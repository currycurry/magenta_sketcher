// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: music.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "music.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace magenta {
class NoteSequence_NoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoteSequence_Note> {
} _NoteSequence_Note_default_instance_;
class NoteSequence_TimeSignatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoteSequence_TimeSignature> {
} _NoteSequence_TimeSignature_default_instance_;
class NoteSequence_KeySignatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoteSequence_KeySignature> {
} _NoteSequence_KeySignature_default_instance_;
class NoteSequence_TempoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoteSequence_Tempo> {
} _NoteSequence_Tempo_default_instance_;
class NoteSequence_PitchBendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoteSequence_PitchBend> {
} _NoteSequence_PitchBend_default_instance_;
class NoteSequence_ControlChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoteSequence_ControlChange> {
} _NoteSequence_ControlChange_default_instance_;
class NoteSequence_PartInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoteSequence_PartInfo> {
} _NoteSequence_PartInfo_default_instance_;
class NoteSequence_SourceInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoteSequence_SourceInfo> {
} _NoteSequence_SourceInfo_default_instance_;
class NoteSequence_TextAnnotationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoteSequence_TextAnnotation> {
} _NoteSequence_TextAnnotation_default_instance_;
class NoteSequence_QuantizationInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoteSequence_QuantizationInfo> {
  public:
  ::google::protobuf::int32 steps_per_quarter_;
  ::google::protobuf::int32 steps_per_second_;
} _NoteSequence_QuantizationInfo_default_instance_;
class NoteSequence_SubsequenceInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoteSequence_SubsequenceInfo> {
} _NoteSequence_SubsequenceInfo_default_instance_;
class NoteSequenceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NoteSequence> {
} _NoteSequence_default_instance_;

namespace protobuf_music_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, pitch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, pitch_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, quantized_start_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, quantized_end_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, numerator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, denominator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, instrument_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, program_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, is_drum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Note, voice_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_TimeSignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_TimeSignature, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_TimeSignature, numerator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_TimeSignature, denominator_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_KeySignature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_KeySignature, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_KeySignature, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_KeySignature, mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Tempo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Tempo, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_Tempo, qpm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_PitchBend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_PitchBend, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_PitchBend, bend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_PitchBend, instrument_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_PitchBend, program_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_PitchBend, is_drum_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_ControlChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_ControlChange, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_ControlChange, control_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_ControlChange, control_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_ControlChange, instrument_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_ControlChange, program_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_ControlChange, is_drum_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_PartInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_PartInfo, part_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_PartInfo, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_SourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_SourceInfo, source_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_SourceInfo, encoding_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_SourceInfo, parser_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_TextAnnotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_TextAnnotation, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_TextAnnotation, quantized_step_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_TextAnnotation, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_TextAnnotation, annotation_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_QuantizationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_QuantizationInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_NoteSequence_QuantizationInfo_default_instance_), steps_per_quarter_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_NoteSequence_QuantizationInfo_default_instance_), steps_per_second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_QuantizationInfo, resolution_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_SubsequenceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_SubsequenceInfo, start_time_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence_SubsequenceInfo, end_time_offset_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, collection_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, ticks_per_quarter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, time_signatures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, key_signatures_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, tempos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, notes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, total_quantized_steps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, pitch_bends_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, control_changes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, part_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, source_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, text_annotations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, quantization_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoteSequence, subsequence_info_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(NoteSequence_Note)},
  { 19, -1, sizeof(NoteSequence_TimeSignature)},
  { 27, -1, sizeof(NoteSequence_KeySignature)},
  { 35, -1, sizeof(NoteSequence_Tempo)},
  { 42, -1, sizeof(NoteSequence_PitchBend)},
  { 52, -1, sizeof(NoteSequence_ControlChange)},
  { 63, -1, sizeof(NoteSequence_PartInfo)},
  { 70, -1, sizeof(NoteSequence_SourceInfo)},
  { 78, -1, sizeof(NoteSequence_TextAnnotation)},
  { 87, -1, sizeof(NoteSequence_QuantizationInfo)},
  { 95, -1, sizeof(NoteSequence_SubsequenceInfo)},
  { 102, -1, sizeof(NoteSequence)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoteSequence_Note_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoteSequence_TimeSignature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoteSequence_KeySignature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoteSequence_Tempo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoteSequence_PitchBend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoteSequence_ControlChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoteSequence_PartInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoteSequence_SourceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoteSequence_TextAnnotation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoteSequence_QuantizationInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoteSequence_SubsequenceInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NoteSequence_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "music.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace

void TableStruct::Shutdown() {
  _NoteSequence_Note_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _NoteSequence_TimeSignature_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _NoteSequence_KeySignature_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _NoteSequence_Tempo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _NoteSequence_PitchBend_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _NoteSequence_ControlChange_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _NoteSequence_PartInfo_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _NoteSequence_SourceInfo_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _NoteSequence_TextAnnotation_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _NoteSequence_QuantizationInfo_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _NoteSequence_SubsequenceInfo_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _NoteSequence_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NoteSequence_Note_default_instance_.DefaultConstruct();
  _NoteSequence_TimeSignature_default_instance_.DefaultConstruct();
  _NoteSequence_KeySignature_default_instance_.DefaultConstruct();
  _NoteSequence_Tempo_default_instance_.DefaultConstruct();
  _NoteSequence_PitchBend_default_instance_.DefaultConstruct();
  _NoteSequence_ControlChange_default_instance_.DefaultConstruct();
  _NoteSequence_PartInfo_default_instance_.DefaultConstruct();
  _NoteSequence_SourceInfo_default_instance_.DefaultConstruct();
  _NoteSequence_TextAnnotation_default_instance_.DefaultConstruct();
  _NoteSequence_QuantizationInfo_default_instance_.DefaultConstruct();
  _NoteSequence_SubsequenceInfo_default_instance_.DefaultConstruct();
  _NoteSequence_default_instance_.DefaultConstruct();
  _NoteSequence_QuantizationInfo_default_instance_.steps_per_quarter_ = 0;
  _NoteSequence_QuantizationInfo_default_instance_.steps_per_second_ = 0;
  _NoteSequence_default_instance_.get_mutable()->source_info_ = const_cast< ::tensorflow::magenta::NoteSequence_SourceInfo*>(
      ::tensorflow::magenta::NoteSequence_SourceInfo::internal_default_instance());
  _NoteSequence_default_instance_.get_mutable()->quantization_info_ = const_cast< ::tensorflow::magenta::NoteSequence_QuantizationInfo*>(
      ::tensorflow::magenta::NoteSequence_QuantizationInfo::internal_default_instance());
  _NoteSequence_default_instance_.get_mutable()->subsequence_info_ = const_cast< ::tensorflow::magenta::NoteSequence_SubsequenceInfo*>(
      ::tensorflow::magenta::NoteSequence_SubsequenceInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013music.proto\022\022tensorflow.magenta\"\312\032\n\014No"
      "teSequence\022\n\n\002id\030\001 \001(\t\022\020\n\010filename\030\002 \001(\t"
      "\022\027\n\017collection_name\030\003 \001(\t\022\031\n\021ticks_per_q"
      "uarter\030\004 \001(\005\022G\n\017time_signatures\030\005 \003(\0132.."
      "tensorflow.magenta.NoteSequence.TimeSign"
      "ature\022E\n\016key_signatures\030\006 \003(\0132-.tensorfl"
      "ow.magenta.NoteSequence.KeySignature\0226\n\006"
      "tempos\030\007 \003(\0132&.tensorflow.magenta.NoteSe"
      "quence.Tempo\0224\n\005notes\030\010 \003(\0132%.tensorflow"
      ".magenta.NoteSequence.Note\022\022\n\ntotal_time"
      "\030\t \001(\001\022\035\n\025total_quantized_steps\030\020 \001(\003\022\?\n"
      "\013pitch_bends\030\n \003(\0132*.tensorflow.magenta."
      "NoteSequence.PitchBend\022G\n\017control_change"
      "s\030\013 \003(\0132..tensorflow.magenta.NoteSequenc"
      "e.ControlChange\022=\n\npart_infos\030\014 \003(\0132).te"
      "nsorflow.magenta.NoteSequence.PartInfo\022@"
      "\n\013source_info\030\r \001(\0132+.tensorflow.magenta"
      ".NoteSequence.SourceInfo\022I\n\020text_annotat"
      "ions\030\016 \003(\0132/.tensorflow.magenta.NoteSequ"
      "ence.TextAnnotation\022L\n\021quantization_info"
      "\030\017 \001(\01321.tensorflow.magenta.NoteSequence"
      ".QuantizationInfo\022J\n\020subsequence_info\030\021 "
      "\001(\01320.tensorflow.magenta.NoteSequence.Su"
      "bsequenceInfo\032\302\002\n\004Note\022\r\n\005pitch\030\001 \001(\005\022>\n"
      "\npitch_name\030\013 \001(\0162*.tensorflow.magenta.N"
      "oteSequence.PitchName\022\020\n\010velocity\030\002 \001(\005\022"
      "\022\n\nstart_time\030\003 \001(\001\022\034\n\024quantized_start_s"
      "tep\030\r \001(\003\022\020\n\010end_time\030\004 \001(\001\022\032\n\022quantized"
      "_end_step\030\016 \001(\003\022\021\n\tnumerator\030\005 \001(\005\022\023\n\013de"
      "nominator\030\006 \001(\005\022\022\n\ninstrument\030\007 \001(\005\022\017\n\007p"
      "rogram\030\010 \001(\005\022\017\n\007is_drum\030\t \001(\010\022\014\n\004part\030\n "
      "\001(\005\022\r\n\005voice\030\014 \001(\005\032E\n\rTimeSignature\022\014\n\004t"
      "ime\030\001 \001(\001\022\021\n\tnumerator\030\002 \001(\005\022\023\n\013denomina"
      "tor\030\003 \001(\005\032\211\003\n\014KeySignature\022\014\n\004time\030\001 \001(\001"
      "\022>\n\003key\030\002 \001(\01621.tensorflow.magenta.NoteS"
      "equence.KeySignature.Key\022@\n\004mode\030\003 \001(\01622"
      ".tensorflow.magenta.NoteSequence.KeySign"
      "ature.Mode\"\267\001\n\003Key\022\005\n\001C\020\000\022\013\n\007C_SHARP\020\001\022\n"
      "\n\006D_FLAT\020\001\022\005\n\001D\020\002\022\013\n\007D_SHARP\020\003\022\n\n\006E_FLAT"
      "\020\003\022\005\n\001E\020\004\022\005\n\001F\020\005\022\013\n\007F_SHARP\020\006\022\n\n\006G_FLAT\020"
      "\006\022\005\n\001G\020\007\022\013\n\007G_SHARP\020\010\022\n\n\006A_FLAT\020\010\022\005\n\001A\020\t"
      "\022\013\n\007A_SHARP\020\n\022\n\n\006B_FLAT\020\n\022\005\n\001B\020\013\032\002\020\001\"/\n\004"
      "Mode\022\t\n\005MAJOR\020\000\022\t\n\005MINOR\020\001\022\021\n\rNOT_SPECIF"
      "IED\020\002\032\"\n\005Tempo\022\014\n\004time\030\001 \001(\001\022\013\n\003qpm\030\002 \001("
      "\001\032]\n\tPitchBend\022\014\n\004time\030\001 \001(\001\022\014\n\004bend\030\002 \001"
      "(\005\022\022\n\ninstrument\030\003 \001(\005\022\017\n\007program\030\004 \001(\005\022"
      "\017\n\007is_drum\030\005 \001(\010\032\202\001\n\rControlChange\022\014\n\004ti"
      "me\030\001 \001(\001\022\026\n\016control_number\030\002 \001(\005\022\025\n\rcont"
      "rol_value\030\003 \001(\005\022\022\n\ninstrument\030\004 \001(\005\022\017\n\007p"
      "rogram\030\005 \001(\005\022\017\n\007is_drum\030\006 \001(\010\032&\n\010PartInf"
      "o\022\014\n\004part\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\032\201\004\n\nSource"
      "Info\022K\n\013source_type\030\001 \001(\01626.tensorflow.m"
      "agenta.NoteSequence.SourceInfo.SourceTyp"
      "e\022O\n\rencoding_type\030\002 \001(\01628.tensorflow.ma"
      "genta.NoteSequence.SourceInfo.EncodingTy"
      "pe\022B\n\006parser\030\003 \001(\01622.tensorflow.magenta."
      "NoteSequence.SourceInfo.Parser\"M\n\nSource"
      "Type\022\027\n\023UNKNOWN_SOURCE_TYPE\020\000\022\017\n\013SCORE_B"
      "ASED\020\001\022\025\n\021PERFORMANCE_BASED\020\002\"Y\n\014Encodin"
      "gType\022\031\n\025UNKNOWN_ENCODING_TYPE\020\000\022\r\n\tMUSI"
      "C_XML\020\001\022\007\n\003ABC\020\002\022\010\n\004MIDI\020\003\022\014\n\010MUSICNET\020\004"
      "\"g\n\006Parser\022\022\n\016UNKNOWN_PARSER\020\000\022\013\n\007MUSIC2"
      "1\020\001\022\017\n\013PRETTY_MIDI\020\002\022\025\n\021MAGENTA_MUSIC_XM"
      "L\020\003\022\024\n\020MAGENTA_MUSICNET\020\004\032\326\001\n\016TextAnnota"
      "tion\022\014\n\004time\030\001 \001(\001\022\026\n\016quantized_step\030\004 \001"
      "(\003\022\014\n\004text\030\002 \001(\t\022[\n\017annotation_type\030\003 \001("
      "\0162B.tensorflow.magenta.NoteSequence.Text"
      "Annotation.TextAnnotationType\"3\n\022TextAnn"
      "otationType\022\013\n\007UNKNOWN\020\000\022\020\n\014CHORD_SYMBOL"
      "\020\001\032Y\n\020QuantizationInfo\022\033\n\021steps_per_quar"
      "ter\030\001 \001(\005H\000\022\032\n\020steps_per_second\030\002 \001(\005H\000B"
      "\014\n\nresolution\032E\n\017SubsequenceInfo\022\031\n\021star"
      "t_time_offset\030\001 \001(\001\022\027\n\017end_time_offset\030\002"
      " \001(\001\"\377\003\n\tPitchName\022\026\n\022UNKNOWN_PITCH_NAME"
      "\020\000\022\017\n\013F_FLAT_FLAT\020\001\022\017\n\013C_FLAT_FLAT\020\002\022\017\n\013"
      "G_FLAT_FLAT\020\003\022\017\n\013D_FLAT_FLAT\020\004\022\017\n\013A_FLAT"
      "_FLAT\020\005\022\017\n\013E_FLAT_FLAT\020\006\022\017\n\013B_FLAT_FLAT\020"
      "\007\022\n\n\006F_FLAT\020\010\022\n\n\006C_FLAT\020\t\022\n\n\006G_FLAT\020\n\022\n\n"
      "\006D_FLAT\020\013\022\n\n\006A_FLAT\020\014\022\n\n\006E_FLAT\020\r\022\n\n\006B_F"
      "LAT\020\016\022\005\n\001F\020\017\022\005\n\001C\020\020\022\005\n\001G\020\021\022\005\n\001D\020\022\022\005\n\001A\020\023"
      "\022\005\n\001E\020\024\022\005\n\001B\020\025\022\013\n\007F_SHARP\020\026\022\013\n\007C_SHARP\020\027"
      "\022\013\n\007G_SHARP\020\030\022\013\n\007D_SHARP\020\031\022\013\n\007A_SHARP\020\032\022"
      "\013\n\007E_SHARP\020\033\022\013\n\007B_SHARP\020\034\022\021\n\rF_SHARP_SHA"
      "RP\020\035\022\021\n\rC_SHARP_SHARP\020\036\022\021\n\rG_SHARP_SHARP"
      "\020\037\022\021\n\rD_SHARP_SHARP\020 \022\021\n\rA_SHARP_SHARP\020!"
      "\022\021\n\rE_SHARP_SHARP\020\"\022\021\n\rB_SHARP_SHARP\020#b\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3446);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "music.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_music_2eproto

const ::google::protobuf::EnumDescriptor* NoteSequence_KeySignature_Key_descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_enum_descriptors[0];
}
bool NoteSequence_KeySignature_Key_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::C;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::C_SHARP;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::D_FLAT;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::D;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::D_SHARP;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::E_FLAT;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::E;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::F;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::F_SHARP;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::G_FLAT;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::G;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::G_SHARP;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::A_FLAT;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::A;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::A_SHARP;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::B_FLAT;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::B;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::Key_MIN;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature::Key_MAX;
const int NoteSequence_KeySignature::Key_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NoteSequence_KeySignature_Mode_descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_enum_descriptors[1];
}
bool NoteSequence_KeySignature_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NoteSequence_KeySignature_Mode NoteSequence_KeySignature::MAJOR;
const NoteSequence_KeySignature_Mode NoteSequence_KeySignature::MINOR;
const NoteSequence_KeySignature_Mode NoteSequence_KeySignature::NOT_SPECIFIED;
const NoteSequence_KeySignature_Mode NoteSequence_KeySignature::Mode_MIN;
const NoteSequence_KeySignature_Mode NoteSequence_KeySignature::Mode_MAX;
const int NoteSequence_KeySignature::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NoteSequence_SourceInfo_SourceType_descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_enum_descriptors[2];
}
bool NoteSequence_SourceInfo_SourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NoteSequence_SourceInfo_SourceType NoteSequence_SourceInfo::UNKNOWN_SOURCE_TYPE;
const NoteSequence_SourceInfo_SourceType NoteSequence_SourceInfo::SCORE_BASED;
const NoteSequence_SourceInfo_SourceType NoteSequence_SourceInfo::PERFORMANCE_BASED;
const NoteSequence_SourceInfo_SourceType NoteSequence_SourceInfo::SourceType_MIN;
const NoteSequence_SourceInfo_SourceType NoteSequence_SourceInfo::SourceType_MAX;
const int NoteSequence_SourceInfo::SourceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NoteSequence_SourceInfo_EncodingType_descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_enum_descriptors[3];
}
bool NoteSequence_SourceInfo_EncodingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NoteSequence_SourceInfo_EncodingType NoteSequence_SourceInfo::UNKNOWN_ENCODING_TYPE;
const NoteSequence_SourceInfo_EncodingType NoteSequence_SourceInfo::MUSIC_XML;
const NoteSequence_SourceInfo_EncodingType NoteSequence_SourceInfo::ABC;
const NoteSequence_SourceInfo_EncodingType NoteSequence_SourceInfo::MIDI;
const NoteSequence_SourceInfo_EncodingType NoteSequence_SourceInfo::MUSICNET;
const NoteSequence_SourceInfo_EncodingType NoteSequence_SourceInfo::EncodingType_MIN;
const NoteSequence_SourceInfo_EncodingType NoteSequence_SourceInfo::EncodingType_MAX;
const int NoteSequence_SourceInfo::EncodingType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NoteSequence_SourceInfo_Parser_descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_enum_descriptors[4];
}
bool NoteSequence_SourceInfo_Parser_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NoteSequence_SourceInfo_Parser NoteSequence_SourceInfo::UNKNOWN_PARSER;
const NoteSequence_SourceInfo_Parser NoteSequence_SourceInfo::MUSIC21;
const NoteSequence_SourceInfo_Parser NoteSequence_SourceInfo::PRETTY_MIDI;
const NoteSequence_SourceInfo_Parser NoteSequence_SourceInfo::MAGENTA_MUSIC_XML;
const NoteSequence_SourceInfo_Parser NoteSequence_SourceInfo::MAGENTA_MUSICNET;
const NoteSequence_SourceInfo_Parser NoteSequence_SourceInfo::Parser_MIN;
const NoteSequence_SourceInfo_Parser NoteSequence_SourceInfo::Parser_MAX;
const int NoteSequence_SourceInfo::Parser_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NoteSequence_TextAnnotation_TextAnnotationType_descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_enum_descriptors[5];
}
bool NoteSequence_TextAnnotation_TextAnnotationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NoteSequence_TextAnnotation_TextAnnotationType NoteSequence_TextAnnotation::UNKNOWN;
const NoteSequence_TextAnnotation_TextAnnotationType NoteSequence_TextAnnotation::CHORD_SYMBOL;
const NoteSequence_TextAnnotation_TextAnnotationType NoteSequence_TextAnnotation::TextAnnotationType_MIN;
const NoteSequence_TextAnnotation_TextAnnotationType NoteSequence_TextAnnotation::TextAnnotationType_MAX;
const int NoteSequence_TextAnnotation::TextAnnotationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NoteSequence_PitchName_descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_enum_descriptors[6];
}
bool NoteSequence_PitchName_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NoteSequence_PitchName NoteSequence::UNKNOWN_PITCH_NAME;
const NoteSequence_PitchName NoteSequence::F_FLAT_FLAT;
const NoteSequence_PitchName NoteSequence::C_FLAT_FLAT;
const NoteSequence_PitchName NoteSequence::G_FLAT_FLAT;
const NoteSequence_PitchName NoteSequence::D_FLAT_FLAT;
const NoteSequence_PitchName NoteSequence::A_FLAT_FLAT;
const NoteSequence_PitchName NoteSequence::E_FLAT_FLAT;
const NoteSequence_PitchName NoteSequence::B_FLAT_FLAT;
const NoteSequence_PitchName NoteSequence::F_FLAT;
const NoteSequence_PitchName NoteSequence::C_FLAT;
const NoteSequence_PitchName NoteSequence::G_FLAT;
const NoteSequence_PitchName NoteSequence::D_FLAT;
const NoteSequence_PitchName NoteSequence::A_FLAT;
const NoteSequence_PitchName NoteSequence::E_FLAT;
const NoteSequence_PitchName NoteSequence::B_FLAT;
const NoteSequence_PitchName NoteSequence::F;
const NoteSequence_PitchName NoteSequence::C;
const NoteSequence_PitchName NoteSequence::G;
const NoteSequence_PitchName NoteSequence::D;
const NoteSequence_PitchName NoteSequence::A;
const NoteSequence_PitchName NoteSequence::E;
const NoteSequence_PitchName NoteSequence::B;
const NoteSequence_PitchName NoteSequence::F_SHARP;
const NoteSequence_PitchName NoteSequence::C_SHARP;
const NoteSequence_PitchName NoteSequence::G_SHARP;
const NoteSequence_PitchName NoteSequence::D_SHARP;
const NoteSequence_PitchName NoteSequence::A_SHARP;
const NoteSequence_PitchName NoteSequence::E_SHARP;
const NoteSequence_PitchName NoteSequence::B_SHARP;
const NoteSequence_PitchName NoteSequence::F_SHARP_SHARP;
const NoteSequence_PitchName NoteSequence::C_SHARP_SHARP;
const NoteSequence_PitchName NoteSequence::G_SHARP_SHARP;
const NoteSequence_PitchName NoteSequence::D_SHARP_SHARP;
const NoteSequence_PitchName NoteSequence::A_SHARP_SHARP;
const NoteSequence_PitchName NoteSequence::E_SHARP_SHARP;
const NoteSequence_PitchName NoteSequence::B_SHARP_SHARP;
const NoteSequence_PitchName NoteSequence::PitchName_MIN;
const NoteSequence_PitchName NoteSequence::PitchName_MAX;
const int NoteSequence::PitchName_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteSequence_Note::kPitchFieldNumber;
const int NoteSequence_Note::kPitchNameFieldNumber;
const int NoteSequence_Note::kVelocityFieldNumber;
const int NoteSequence_Note::kStartTimeFieldNumber;
const int NoteSequence_Note::kQuantizedStartStepFieldNumber;
const int NoteSequence_Note::kEndTimeFieldNumber;
const int NoteSequence_Note::kQuantizedEndStepFieldNumber;
const int NoteSequence_Note::kNumeratorFieldNumber;
const int NoteSequence_Note::kDenominatorFieldNumber;
const int NoteSequence_Note::kInstrumentFieldNumber;
const int NoteSequence_Note::kProgramFieldNumber;
const int NoteSequence_Note::kIsDrumFieldNumber;
const int NoteSequence_Note::kPartFieldNumber;
const int NoteSequence_Note::kVoiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteSequence_Note::NoteSequence_Note()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.NoteSequence.Note)
}
NoteSequence_Note::NoteSequence_Note(const NoteSequence_Note& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pitch_, &from.pitch_,
    reinterpret_cast<char*>(&quantized_end_step_) -
    reinterpret_cast<char*>(&pitch_) + sizeof(quantized_end_step_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.NoteSequence.Note)
}

void NoteSequence_Note::SharedCtor() {
  ::memset(&pitch_, 0, reinterpret_cast<char*>(&quantized_end_step_) -
    reinterpret_cast<char*>(&pitch_) + sizeof(quantized_end_step_));
  _cached_size_ = 0;
}

NoteSequence_Note::~NoteSequence_Note() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.NoteSequence.Note)
  SharedDtor();
}

void NoteSequence_Note::SharedDtor() {
}

void NoteSequence_Note::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteSequence_Note::descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoteSequence_Note& NoteSequence_Note::default_instance() {
  protobuf_music_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoteSequence_Note* NoteSequence_Note::New(::google::protobuf::Arena* arena) const {
  NoteSequence_Note* n = new NoteSequence_Note;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoteSequence_Note::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.NoteSequence.Note)
  ::memset(&pitch_, 0, reinterpret_cast<char*>(&quantized_end_step_) -
    reinterpret_cast<char*>(&pitch_) + sizeof(quantized_end_step_));
}

bool NoteSequence_Note::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.NoteSequence.Note)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 pitch = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 numerator = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numerator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 denominator = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &denominator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 instrument = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instrument_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 program = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &program_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_drum = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_drum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 part = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.magenta.NoteSequence.PitchName pitch_name = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pitch_name(static_cast< ::tensorflow::magenta::NoteSequence_PitchName >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 voice = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 quantized_start_step = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantized_start_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 quantized_end_step = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantized_end_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.NoteSequence.Note)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.NoteSequence.Note)
  return false;
#undef DO_
}

void NoteSequence_Note::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.NoteSequence.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pitch = 1;
  if (this->pitch() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pitch(), output);
  }

  // int32 velocity = 2;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->velocity(), output);
  }

  // double start_time = 3;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->start_time(), output);
  }

  // double end_time = 4;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->end_time(), output);
  }

  // int32 numerator = 5;
  if (this->numerator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numerator(), output);
  }

  // int32 denominator = 6;
  if (this->denominator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->denominator(), output);
  }

  // int32 instrument = 7;
  if (this->instrument() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->instrument(), output);
  }

  // int32 program = 8;
  if (this->program() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->program(), output);
  }

  // bool is_drum = 9;
  if (this->is_drum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_drum(), output);
  }

  // int32 part = 10;
  if (this->part() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->part(), output);
  }

  // .tensorflow.magenta.NoteSequence.PitchName pitch_name = 11;
  if (this->pitch_name() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->pitch_name(), output);
  }

  // int32 voice = 12;
  if (this->voice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->voice(), output);
  }

  // int64 quantized_start_step = 13;
  if (this->quantized_start_step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->quantized_start_step(), output);
  }

  // int64 quantized_end_step = 14;
  if (this->quantized_end_step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->quantized_end_step(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.NoteSequence.Note)
}

::google::protobuf::uint8* NoteSequence_Note::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.NoteSequence.Note)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 pitch = 1;
  if (this->pitch() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pitch(), target);
  }

  // int32 velocity = 2;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->velocity(), target);
  }

  // double start_time = 3;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->start_time(), target);
  }

  // double end_time = 4;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->end_time(), target);
  }

  // int32 numerator = 5;
  if (this->numerator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numerator(), target);
  }

  // int32 denominator = 6;
  if (this->denominator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->denominator(), target);
  }

  // int32 instrument = 7;
  if (this->instrument() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->instrument(), target);
  }

  // int32 program = 8;
  if (this->program() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->program(), target);
  }

  // bool is_drum = 9;
  if (this->is_drum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_drum(), target);
  }

  // int32 part = 10;
  if (this->part() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->part(), target);
  }

  // .tensorflow.magenta.NoteSequence.PitchName pitch_name = 11;
  if (this->pitch_name() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->pitch_name(), target);
  }

  // int32 voice = 12;
  if (this->voice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->voice(), target);
  }

  // int64 quantized_start_step = 13;
  if (this->quantized_start_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->quantized_start_step(), target);
  }

  // int64 quantized_end_step = 14;
  if (this->quantized_end_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->quantized_end_step(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.NoteSequence.Note)
  return target;
}

size_t NoteSequence_Note::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.NoteSequence.Note)
  size_t total_size = 0;

  // int32 pitch = 1;
  if (this->pitch() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->pitch());
  }

  // int32 velocity = 2;
  if (this->velocity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->velocity());
  }

  // double start_time = 3;
  if (this->start_time() != 0) {
    total_size += 1 + 8;
  }

  // double end_time = 4;
  if (this->end_time() != 0) {
    total_size += 1 + 8;
  }

  // int32 numerator = 5;
  if (this->numerator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numerator());
  }

  // int32 denominator = 6;
  if (this->denominator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->denominator());
  }

  // int32 instrument = 7;
  if (this->instrument() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instrument());
  }

  // int32 program = 8;
  if (this->program() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->program());
  }

  // bool is_drum = 9;
  if (this->is_drum() != 0) {
    total_size += 1 + 1;
  }

  // int32 part = 10;
  if (this->part() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->part());
  }

  // .tensorflow.magenta.NoteSequence.PitchName pitch_name = 11;
  if (this->pitch_name() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pitch_name());
  }

  // int32 voice = 12;
  if (this->voice() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->voice());
  }

  // int64 quantized_start_step = 13;
  if (this->quantized_start_step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->quantized_start_step());
  }

  // int64 quantized_end_step = 14;
  if (this->quantized_end_step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->quantized_end_step());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteSequence_Note::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.NoteSequence.Note)
  GOOGLE_DCHECK_NE(&from, this);
  const NoteSequence_Note* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteSequence_Note>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.NoteSequence.Note)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.NoteSequence.Note)
    MergeFrom(*source);
  }
}

void NoteSequence_Note::MergeFrom(const NoteSequence_Note& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.NoteSequence.Note)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pitch() != 0) {
    set_pitch(from.pitch());
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.numerator() != 0) {
    set_numerator(from.numerator());
  }
  if (from.denominator() != 0) {
    set_denominator(from.denominator());
  }
  if (from.instrument() != 0) {
    set_instrument(from.instrument());
  }
  if (from.program() != 0) {
    set_program(from.program());
  }
  if (from.is_drum() != 0) {
    set_is_drum(from.is_drum());
  }
  if (from.part() != 0) {
    set_part(from.part());
  }
  if (from.pitch_name() != 0) {
    set_pitch_name(from.pitch_name());
  }
  if (from.voice() != 0) {
    set_voice(from.voice());
  }
  if (from.quantized_start_step() != 0) {
    set_quantized_start_step(from.quantized_start_step());
  }
  if (from.quantized_end_step() != 0) {
    set_quantized_end_step(from.quantized_end_step());
  }
}

void NoteSequence_Note::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.NoteSequence.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteSequence_Note::CopyFrom(const NoteSequence_Note& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.NoteSequence.Note)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteSequence_Note::IsInitialized() const {
  return true;
}

void NoteSequence_Note::Swap(NoteSequence_Note* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoteSequence_Note::InternalSwap(NoteSequence_Note* other) {
  std::swap(pitch_, other->pitch_);
  std::swap(velocity_, other->velocity_);
  std::swap(start_time_, other->start_time_);
  std::swap(end_time_, other->end_time_);
  std::swap(numerator_, other->numerator_);
  std::swap(denominator_, other->denominator_);
  std::swap(instrument_, other->instrument_);
  std::swap(program_, other->program_);
  std::swap(is_drum_, other->is_drum_);
  std::swap(part_, other->part_);
  std::swap(pitch_name_, other->pitch_name_);
  std::swap(voice_, other->voice_);
  std::swap(quantized_start_step_, other->quantized_start_step_);
  std::swap(quantized_end_step_, other->quantized_end_step_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteSequence_Note::GetMetadata() const {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence_Note

// int32 pitch = 1;
void NoteSequence_Note::clear_pitch() {
  pitch_ = 0;
}
::google::protobuf::int32 NoteSequence_Note::pitch() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.pitch)
  return pitch_;
}
void NoteSequence_Note::set_pitch(::google::protobuf::int32 value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.pitch)
}

// .tensorflow.magenta.NoteSequence.PitchName pitch_name = 11;
void NoteSequence_Note::clear_pitch_name() {
  pitch_name_ = 0;
}
::tensorflow::magenta::NoteSequence_PitchName NoteSequence_Note::pitch_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.pitch_name)
  return static_cast< ::tensorflow::magenta::NoteSequence_PitchName >(pitch_name_);
}
void NoteSequence_Note::set_pitch_name(::tensorflow::magenta::NoteSequence_PitchName value) {
  
  pitch_name_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.pitch_name)
}

// int32 velocity = 2;
void NoteSequence_Note::clear_velocity() {
  velocity_ = 0;
}
::google::protobuf::int32 NoteSequence_Note::velocity() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.velocity)
  return velocity_;
}
void NoteSequence_Note::set_velocity(::google::protobuf::int32 value) {
  
  velocity_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.velocity)
}

// double start_time = 3;
void NoteSequence_Note::clear_start_time() {
  start_time_ = 0;
}
double NoteSequence_Note::start_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.start_time)
  return start_time_;
}
void NoteSequence_Note::set_start_time(double value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.start_time)
}

// int64 quantized_start_step = 13;
void NoteSequence_Note::clear_quantized_start_step() {
  quantized_start_step_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NoteSequence_Note::quantized_start_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.quantized_start_step)
  return quantized_start_step_;
}
void NoteSequence_Note::set_quantized_start_step(::google::protobuf::int64 value) {
  
  quantized_start_step_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.quantized_start_step)
}

// double end_time = 4;
void NoteSequence_Note::clear_end_time() {
  end_time_ = 0;
}
double NoteSequence_Note::end_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.end_time)
  return end_time_;
}
void NoteSequence_Note::set_end_time(double value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.end_time)
}

// int64 quantized_end_step = 14;
void NoteSequence_Note::clear_quantized_end_step() {
  quantized_end_step_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NoteSequence_Note::quantized_end_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.quantized_end_step)
  return quantized_end_step_;
}
void NoteSequence_Note::set_quantized_end_step(::google::protobuf::int64 value) {
  
  quantized_end_step_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.quantized_end_step)
}

// int32 numerator = 5;
void NoteSequence_Note::clear_numerator() {
  numerator_ = 0;
}
::google::protobuf::int32 NoteSequence_Note::numerator() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.numerator)
  return numerator_;
}
void NoteSequence_Note::set_numerator(::google::protobuf::int32 value) {
  
  numerator_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.numerator)
}

// int32 denominator = 6;
void NoteSequence_Note::clear_denominator() {
  denominator_ = 0;
}
::google::protobuf::int32 NoteSequence_Note::denominator() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.denominator)
  return denominator_;
}
void NoteSequence_Note::set_denominator(::google::protobuf::int32 value) {
  
  denominator_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.denominator)
}

// int32 instrument = 7;
void NoteSequence_Note::clear_instrument() {
  instrument_ = 0;
}
::google::protobuf::int32 NoteSequence_Note::instrument() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.instrument)
  return instrument_;
}
void NoteSequence_Note::set_instrument(::google::protobuf::int32 value) {
  
  instrument_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.instrument)
}

// int32 program = 8;
void NoteSequence_Note::clear_program() {
  program_ = 0;
}
::google::protobuf::int32 NoteSequence_Note::program() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.program)
  return program_;
}
void NoteSequence_Note::set_program(::google::protobuf::int32 value) {
  
  program_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.program)
}

// bool is_drum = 9;
void NoteSequence_Note::clear_is_drum() {
  is_drum_ = false;
}
bool NoteSequence_Note::is_drum() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.is_drum)
  return is_drum_;
}
void NoteSequence_Note::set_is_drum(bool value) {
  
  is_drum_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.is_drum)
}

// int32 part = 10;
void NoteSequence_Note::clear_part() {
  part_ = 0;
}
::google::protobuf::int32 NoteSequence_Note::part() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.part)
  return part_;
}
void NoteSequence_Note::set_part(::google::protobuf::int32 value) {
  
  part_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.part)
}

// int32 voice = 12;
void NoteSequence_Note::clear_voice() {
  voice_ = 0;
}
::google::protobuf::int32 NoteSequence_Note::voice() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.voice)
  return voice_;
}
void NoteSequence_Note::set_voice(::google::protobuf::int32 value) {
  
  voice_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.voice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteSequence_TimeSignature::kTimeFieldNumber;
const int NoteSequence_TimeSignature::kNumeratorFieldNumber;
const int NoteSequence_TimeSignature::kDenominatorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteSequence_TimeSignature::NoteSequence_TimeSignature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.NoteSequence.TimeSignature)
}
NoteSequence_TimeSignature::NoteSequence_TimeSignature(const NoteSequence_TimeSignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&denominator_) -
    reinterpret_cast<char*>(&time_) + sizeof(denominator_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.NoteSequence.TimeSignature)
}

void NoteSequence_TimeSignature::SharedCtor() {
  ::memset(&time_, 0, reinterpret_cast<char*>(&denominator_) -
    reinterpret_cast<char*>(&time_) + sizeof(denominator_));
  _cached_size_ = 0;
}

NoteSequence_TimeSignature::~NoteSequence_TimeSignature() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.NoteSequence.TimeSignature)
  SharedDtor();
}

void NoteSequence_TimeSignature::SharedDtor() {
}

void NoteSequence_TimeSignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteSequence_TimeSignature::descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoteSequence_TimeSignature& NoteSequence_TimeSignature::default_instance() {
  protobuf_music_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoteSequence_TimeSignature* NoteSequence_TimeSignature::New(::google::protobuf::Arena* arena) const {
  NoteSequence_TimeSignature* n = new NoteSequence_TimeSignature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoteSequence_TimeSignature::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.NoteSequence.TimeSignature)
  ::memset(&time_, 0, reinterpret_cast<char*>(&denominator_) -
    reinterpret_cast<char*>(&time_) + sizeof(denominator_));
}

bool NoteSequence_TimeSignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.NoteSequence.TimeSignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 numerator = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numerator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 denominator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &denominator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.NoteSequence.TimeSignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.NoteSequence.TimeSignature)
  return false;
#undef DO_
}

void NoteSequence_TimeSignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.NoteSequence.TimeSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // int32 numerator = 2;
  if (this->numerator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numerator(), output);
  }

  // int32 denominator = 3;
  if (this->denominator() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->denominator(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.NoteSequence.TimeSignature)
}

::google::protobuf::uint8* NoteSequence_TimeSignature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.NoteSequence.TimeSignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // int32 numerator = 2;
  if (this->numerator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numerator(), target);
  }

  // int32 denominator = 3;
  if (this->denominator() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->denominator(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.NoteSequence.TimeSignature)
  return target;
}

size_t NoteSequence_TimeSignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.NoteSequence.TimeSignature)
  size_t total_size = 0;

  // double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // int32 numerator = 2;
  if (this->numerator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->numerator());
  }

  // int32 denominator = 3;
  if (this->denominator() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->denominator());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteSequence_TimeSignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.NoteSequence.TimeSignature)
  GOOGLE_DCHECK_NE(&from, this);
  const NoteSequence_TimeSignature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteSequence_TimeSignature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.NoteSequence.TimeSignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.NoteSequence.TimeSignature)
    MergeFrom(*source);
  }
}

void NoteSequence_TimeSignature::MergeFrom(const NoteSequence_TimeSignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.NoteSequence.TimeSignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.numerator() != 0) {
    set_numerator(from.numerator());
  }
  if (from.denominator() != 0) {
    set_denominator(from.denominator());
  }
}

void NoteSequence_TimeSignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.NoteSequence.TimeSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteSequence_TimeSignature::CopyFrom(const NoteSequence_TimeSignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.NoteSequence.TimeSignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteSequence_TimeSignature::IsInitialized() const {
  return true;
}

void NoteSequence_TimeSignature::Swap(NoteSequence_TimeSignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoteSequence_TimeSignature::InternalSwap(NoteSequence_TimeSignature* other) {
  std::swap(time_, other->time_);
  std::swap(numerator_, other->numerator_);
  std::swap(denominator_, other->denominator_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteSequence_TimeSignature::GetMetadata() const {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence_TimeSignature

// double time = 1;
void NoteSequence_TimeSignature::clear_time() {
  time_ = 0;
}
double NoteSequence_TimeSignature::time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TimeSignature.time)
  return time_;
}
void NoteSequence_TimeSignature::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TimeSignature.time)
}

// int32 numerator = 2;
void NoteSequence_TimeSignature::clear_numerator() {
  numerator_ = 0;
}
::google::protobuf::int32 NoteSequence_TimeSignature::numerator() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TimeSignature.numerator)
  return numerator_;
}
void NoteSequence_TimeSignature::set_numerator(::google::protobuf::int32 value) {
  
  numerator_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TimeSignature.numerator)
}

// int32 denominator = 3;
void NoteSequence_TimeSignature::clear_denominator() {
  denominator_ = 0;
}
::google::protobuf::int32 NoteSequence_TimeSignature::denominator() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TimeSignature.denominator)
  return denominator_;
}
void NoteSequence_TimeSignature::set_denominator(::google::protobuf::int32 value) {
  
  denominator_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TimeSignature.denominator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteSequence_KeySignature::kTimeFieldNumber;
const int NoteSequence_KeySignature::kKeyFieldNumber;
const int NoteSequence_KeySignature::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteSequence_KeySignature::NoteSequence_KeySignature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.NoteSequence.KeySignature)
}
NoteSequence_KeySignature::NoteSequence_KeySignature(const NoteSequence_KeySignature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&time_) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.NoteSequence.KeySignature)
}

void NoteSequence_KeySignature::SharedCtor() {
  ::memset(&time_, 0, reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&time_) + sizeof(mode_));
  _cached_size_ = 0;
}

NoteSequence_KeySignature::~NoteSequence_KeySignature() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.NoteSequence.KeySignature)
  SharedDtor();
}

void NoteSequence_KeySignature::SharedDtor() {
}

void NoteSequence_KeySignature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteSequence_KeySignature::descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoteSequence_KeySignature& NoteSequence_KeySignature::default_instance() {
  protobuf_music_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoteSequence_KeySignature* NoteSequence_KeySignature::New(::google::protobuf::Arena* arena) const {
  NoteSequence_KeySignature* n = new NoteSequence_KeySignature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoteSequence_KeySignature::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.NoteSequence.KeySignature)
  ::memset(&time_, 0, reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&time_) + sizeof(mode_));
}

bool NoteSequence_KeySignature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.NoteSequence.KeySignature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.magenta.NoteSequence.KeySignature.Key key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key(static_cast< ::tensorflow::magenta::NoteSequence_KeySignature_Key >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.magenta.NoteSequence.KeySignature.Mode mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::tensorflow::magenta::NoteSequence_KeySignature_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.NoteSequence.KeySignature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.NoteSequence.KeySignature)
  return false;
#undef DO_
}

void NoteSequence_KeySignature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.NoteSequence.KeySignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // .tensorflow.magenta.NoteSequence.KeySignature.Key key = 2;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->key(), output);
  }

  // .tensorflow.magenta.NoteSequence.KeySignature.Mode mode = 3;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.NoteSequence.KeySignature)
}

::google::protobuf::uint8* NoteSequence_KeySignature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.NoteSequence.KeySignature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // .tensorflow.magenta.NoteSequence.KeySignature.Key key = 2;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->key(), target);
  }

  // .tensorflow.magenta.NoteSequence.KeySignature.Mode mode = 3;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.NoteSequence.KeySignature)
  return target;
}

size_t NoteSequence_KeySignature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.NoteSequence.KeySignature)
  size_t total_size = 0;

  // double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // .tensorflow.magenta.NoteSequence.KeySignature.Key key = 2;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key());
  }

  // .tensorflow.magenta.NoteSequence.KeySignature.Mode mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteSequence_KeySignature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.NoteSequence.KeySignature)
  GOOGLE_DCHECK_NE(&from, this);
  const NoteSequence_KeySignature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteSequence_KeySignature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.NoteSequence.KeySignature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.NoteSequence.KeySignature)
    MergeFrom(*source);
  }
}

void NoteSequence_KeySignature::MergeFrom(const NoteSequence_KeySignature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.NoteSequence.KeySignature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void NoteSequence_KeySignature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.NoteSequence.KeySignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteSequence_KeySignature::CopyFrom(const NoteSequence_KeySignature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.NoteSequence.KeySignature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteSequence_KeySignature::IsInitialized() const {
  return true;
}

void NoteSequence_KeySignature::Swap(NoteSequence_KeySignature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoteSequence_KeySignature::InternalSwap(NoteSequence_KeySignature* other) {
  std::swap(time_, other->time_);
  std::swap(key_, other->key_);
  std::swap(mode_, other->mode_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteSequence_KeySignature::GetMetadata() const {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence_KeySignature

// double time = 1;
void NoteSequence_KeySignature::clear_time() {
  time_ = 0;
}
double NoteSequence_KeySignature::time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.KeySignature.time)
  return time_;
}
void NoteSequence_KeySignature::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.KeySignature.time)
}

// .tensorflow.magenta.NoteSequence.KeySignature.Key key = 2;
void NoteSequence_KeySignature::clear_key() {
  key_ = 0;
}
::tensorflow::magenta::NoteSequence_KeySignature_Key NoteSequence_KeySignature::key() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.KeySignature.key)
  return static_cast< ::tensorflow::magenta::NoteSequence_KeySignature_Key >(key_);
}
void NoteSequence_KeySignature::set_key(::tensorflow::magenta::NoteSequence_KeySignature_Key value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.KeySignature.key)
}

// .tensorflow.magenta.NoteSequence.KeySignature.Mode mode = 3;
void NoteSequence_KeySignature::clear_mode() {
  mode_ = 0;
}
::tensorflow::magenta::NoteSequence_KeySignature_Mode NoteSequence_KeySignature::mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.KeySignature.mode)
  return static_cast< ::tensorflow::magenta::NoteSequence_KeySignature_Mode >(mode_);
}
void NoteSequence_KeySignature::set_mode(::tensorflow::magenta::NoteSequence_KeySignature_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.KeySignature.mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteSequence_Tempo::kTimeFieldNumber;
const int NoteSequence_Tempo::kQpmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteSequence_Tempo::NoteSequence_Tempo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.NoteSequence.Tempo)
}
NoteSequence_Tempo::NoteSequence_Tempo(const NoteSequence_Tempo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&qpm_) -
    reinterpret_cast<char*>(&time_) + sizeof(qpm_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.NoteSequence.Tempo)
}

void NoteSequence_Tempo::SharedCtor() {
  ::memset(&time_, 0, reinterpret_cast<char*>(&qpm_) -
    reinterpret_cast<char*>(&time_) + sizeof(qpm_));
  _cached_size_ = 0;
}

NoteSequence_Tempo::~NoteSequence_Tempo() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.NoteSequence.Tempo)
  SharedDtor();
}

void NoteSequence_Tempo::SharedDtor() {
}

void NoteSequence_Tempo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteSequence_Tempo::descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoteSequence_Tempo& NoteSequence_Tempo::default_instance() {
  protobuf_music_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoteSequence_Tempo* NoteSequence_Tempo::New(::google::protobuf::Arena* arena) const {
  NoteSequence_Tempo* n = new NoteSequence_Tempo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoteSequence_Tempo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.NoteSequence.Tempo)
  ::memset(&time_, 0, reinterpret_cast<char*>(&qpm_) -
    reinterpret_cast<char*>(&time_) + sizeof(qpm_));
}

bool NoteSequence_Tempo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.NoteSequence.Tempo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double qpm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.NoteSequence.Tempo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.NoteSequence.Tempo)
  return false;
#undef DO_
}

void NoteSequence_Tempo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.NoteSequence.Tempo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // double qpm = 2;
  if (this->qpm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->qpm(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.NoteSequence.Tempo)
}

::google::protobuf::uint8* NoteSequence_Tempo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.NoteSequence.Tempo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // double qpm = 2;
  if (this->qpm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->qpm(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.NoteSequence.Tempo)
  return target;
}

size_t NoteSequence_Tempo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.NoteSequence.Tempo)
  size_t total_size = 0;

  // double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // double qpm = 2;
  if (this->qpm() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteSequence_Tempo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.NoteSequence.Tempo)
  GOOGLE_DCHECK_NE(&from, this);
  const NoteSequence_Tempo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteSequence_Tempo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.NoteSequence.Tempo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.NoteSequence.Tempo)
    MergeFrom(*source);
  }
}

void NoteSequence_Tempo::MergeFrom(const NoteSequence_Tempo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.NoteSequence.Tempo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.qpm() != 0) {
    set_qpm(from.qpm());
  }
}

void NoteSequence_Tempo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.NoteSequence.Tempo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteSequence_Tempo::CopyFrom(const NoteSequence_Tempo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.NoteSequence.Tempo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteSequence_Tempo::IsInitialized() const {
  return true;
}

void NoteSequence_Tempo::Swap(NoteSequence_Tempo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoteSequence_Tempo::InternalSwap(NoteSequence_Tempo* other) {
  std::swap(time_, other->time_);
  std::swap(qpm_, other->qpm_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteSequence_Tempo::GetMetadata() const {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence_Tempo

// double time = 1;
void NoteSequence_Tempo::clear_time() {
  time_ = 0;
}
double NoteSequence_Tempo::time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Tempo.time)
  return time_;
}
void NoteSequence_Tempo::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Tempo.time)
}

// double qpm = 2;
void NoteSequence_Tempo::clear_qpm() {
  qpm_ = 0;
}
double NoteSequence_Tempo::qpm() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Tempo.qpm)
  return qpm_;
}
void NoteSequence_Tempo::set_qpm(double value) {
  
  qpm_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Tempo.qpm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteSequence_PitchBend::kTimeFieldNumber;
const int NoteSequence_PitchBend::kBendFieldNumber;
const int NoteSequence_PitchBend::kInstrumentFieldNumber;
const int NoteSequence_PitchBend::kProgramFieldNumber;
const int NoteSequence_PitchBend::kIsDrumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteSequence_PitchBend::NoteSequence_PitchBend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.NoteSequence.PitchBend)
}
NoteSequence_PitchBend::NoteSequence_PitchBend(const NoteSequence_PitchBend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&is_drum_) -
    reinterpret_cast<char*>(&time_) + sizeof(is_drum_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.NoteSequence.PitchBend)
}

void NoteSequence_PitchBend::SharedCtor() {
  ::memset(&time_, 0, reinterpret_cast<char*>(&is_drum_) -
    reinterpret_cast<char*>(&time_) + sizeof(is_drum_));
  _cached_size_ = 0;
}

NoteSequence_PitchBend::~NoteSequence_PitchBend() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.NoteSequence.PitchBend)
  SharedDtor();
}

void NoteSequence_PitchBend::SharedDtor() {
}

void NoteSequence_PitchBend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteSequence_PitchBend::descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoteSequence_PitchBend& NoteSequence_PitchBend::default_instance() {
  protobuf_music_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoteSequence_PitchBend* NoteSequence_PitchBend::New(::google::protobuf::Arena* arena) const {
  NoteSequence_PitchBend* n = new NoteSequence_PitchBend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoteSequence_PitchBend::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.NoteSequence.PitchBend)
  ::memset(&time_, 0, reinterpret_cast<char*>(&is_drum_) -
    reinterpret_cast<char*>(&time_) + sizeof(is_drum_));
}

bool NoteSequence_PitchBend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.NoteSequence.PitchBend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 bend = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 instrument = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instrument_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 program = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &program_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_drum = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_drum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.NoteSequence.PitchBend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.NoteSequence.PitchBend)
  return false;
#undef DO_
}

void NoteSequence_PitchBend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.NoteSequence.PitchBend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // int32 bend = 2;
  if (this->bend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bend(), output);
  }

  // int32 instrument = 3;
  if (this->instrument() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instrument(), output);
  }

  // int32 program = 4;
  if (this->program() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->program(), output);
  }

  // bool is_drum = 5;
  if (this->is_drum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_drum(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.NoteSequence.PitchBend)
}

::google::protobuf::uint8* NoteSequence_PitchBend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.NoteSequence.PitchBend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // int32 bend = 2;
  if (this->bend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bend(), target);
  }

  // int32 instrument = 3;
  if (this->instrument() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instrument(), target);
  }

  // int32 program = 4;
  if (this->program() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->program(), target);
  }

  // bool is_drum = 5;
  if (this->is_drum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_drum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.NoteSequence.PitchBend)
  return target;
}

size_t NoteSequence_PitchBend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.NoteSequence.PitchBend)
  size_t total_size = 0;

  // double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // int32 bend = 2;
  if (this->bend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bend());
  }

  // int32 instrument = 3;
  if (this->instrument() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instrument());
  }

  // int32 program = 4;
  if (this->program() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->program());
  }

  // bool is_drum = 5;
  if (this->is_drum() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteSequence_PitchBend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.NoteSequence.PitchBend)
  GOOGLE_DCHECK_NE(&from, this);
  const NoteSequence_PitchBend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteSequence_PitchBend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.NoteSequence.PitchBend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.NoteSequence.PitchBend)
    MergeFrom(*source);
  }
}

void NoteSequence_PitchBend::MergeFrom(const NoteSequence_PitchBend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.NoteSequence.PitchBend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.bend() != 0) {
    set_bend(from.bend());
  }
  if (from.instrument() != 0) {
    set_instrument(from.instrument());
  }
  if (from.program() != 0) {
    set_program(from.program());
  }
  if (from.is_drum() != 0) {
    set_is_drum(from.is_drum());
  }
}

void NoteSequence_PitchBend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.NoteSequence.PitchBend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteSequence_PitchBend::CopyFrom(const NoteSequence_PitchBend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.NoteSequence.PitchBend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteSequence_PitchBend::IsInitialized() const {
  return true;
}

void NoteSequence_PitchBend::Swap(NoteSequence_PitchBend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoteSequence_PitchBend::InternalSwap(NoteSequence_PitchBend* other) {
  std::swap(time_, other->time_);
  std::swap(bend_, other->bend_);
  std::swap(instrument_, other->instrument_);
  std::swap(program_, other->program_);
  std::swap(is_drum_, other->is_drum_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteSequence_PitchBend::GetMetadata() const {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence_PitchBend

// double time = 1;
void NoteSequence_PitchBend::clear_time() {
  time_ = 0;
}
double NoteSequence_PitchBend::time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PitchBend.time)
  return time_;
}
void NoteSequence_PitchBend::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PitchBend.time)
}

// int32 bend = 2;
void NoteSequence_PitchBend::clear_bend() {
  bend_ = 0;
}
::google::protobuf::int32 NoteSequence_PitchBend::bend() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PitchBend.bend)
  return bend_;
}
void NoteSequence_PitchBend::set_bend(::google::protobuf::int32 value) {
  
  bend_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PitchBend.bend)
}

// int32 instrument = 3;
void NoteSequence_PitchBend::clear_instrument() {
  instrument_ = 0;
}
::google::protobuf::int32 NoteSequence_PitchBend::instrument() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PitchBend.instrument)
  return instrument_;
}
void NoteSequence_PitchBend::set_instrument(::google::protobuf::int32 value) {
  
  instrument_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PitchBend.instrument)
}

// int32 program = 4;
void NoteSequence_PitchBend::clear_program() {
  program_ = 0;
}
::google::protobuf::int32 NoteSequence_PitchBend::program() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PitchBend.program)
  return program_;
}
void NoteSequence_PitchBend::set_program(::google::protobuf::int32 value) {
  
  program_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PitchBend.program)
}

// bool is_drum = 5;
void NoteSequence_PitchBend::clear_is_drum() {
  is_drum_ = false;
}
bool NoteSequence_PitchBend::is_drum() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PitchBend.is_drum)
  return is_drum_;
}
void NoteSequence_PitchBend::set_is_drum(bool value) {
  
  is_drum_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PitchBend.is_drum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteSequence_ControlChange::kTimeFieldNumber;
const int NoteSequence_ControlChange::kControlNumberFieldNumber;
const int NoteSequence_ControlChange::kControlValueFieldNumber;
const int NoteSequence_ControlChange::kInstrumentFieldNumber;
const int NoteSequence_ControlChange::kProgramFieldNumber;
const int NoteSequence_ControlChange::kIsDrumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteSequence_ControlChange::NoteSequence_ControlChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.NoteSequence.ControlChange)
}
NoteSequence_ControlChange::NoteSequence_ControlChange(const NoteSequence_ControlChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&is_drum_) -
    reinterpret_cast<char*>(&time_) + sizeof(is_drum_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.NoteSequence.ControlChange)
}

void NoteSequence_ControlChange::SharedCtor() {
  ::memset(&time_, 0, reinterpret_cast<char*>(&is_drum_) -
    reinterpret_cast<char*>(&time_) + sizeof(is_drum_));
  _cached_size_ = 0;
}

NoteSequence_ControlChange::~NoteSequence_ControlChange() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.NoteSequence.ControlChange)
  SharedDtor();
}

void NoteSequence_ControlChange::SharedDtor() {
}

void NoteSequence_ControlChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteSequence_ControlChange::descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoteSequence_ControlChange& NoteSequence_ControlChange::default_instance() {
  protobuf_music_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoteSequence_ControlChange* NoteSequence_ControlChange::New(::google::protobuf::Arena* arena) const {
  NoteSequence_ControlChange* n = new NoteSequence_ControlChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoteSequence_ControlChange::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.NoteSequence.ControlChange)
  ::memset(&time_, 0, reinterpret_cast<char*>(&is_drum_) -
    reinterpret_cast<char*>(&time_) + sizeof(is_drum_));
}

bool NoteSequence_ControlChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.NoteSequence.ControlChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 control_number = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 control_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 instrument = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instrument_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 program = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &program_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_drum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_drum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.NoteSequence.ControlChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.NoteSequence.ControlChange)
  return false;
#undef DO_
}

void NoteSequence_ControlChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.NoteSequence.ControlChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // int32 control_number = 2;
  if (this->control_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->control_number(), output);
  }

  // int32 control_value = 3;
  if (this->control_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->control_value(), output);
  }

  // int32 instrument = 4;
  if (this->instrument() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->instrument(), output);
  }

  // int32 program = 5;
  if (this->program() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->program(), output);
  }

  // bool is_drum = 6;
  if (this->is_drum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_drum(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.NoteSequence.ControlChange)
}

::google::protobuf::uint8* NoteSequence_ControlChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.NoteSequence.ControlChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // int32 control_number = 2;
  if (this->control_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->control_number(), target);
  }

  // int32 control_value = 3;
  if (this->control_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->control_value(), target);
  }

  // int32 instrument = 4;
  if (this->instrument() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->instrument(), target);
  }

  // int32 program = 5;
  if (this->program() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->program(), target);
  }

  // bool is_drum = 6;
  if (this->is_drum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_drum(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.NoteSequence.ControlChange)
  return target;
}

size_t NoteSequence_ControlChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.NoteSequence.ControlChange)
  size_t total_size = 0;

  // double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // int32 control_number = 2;
  if (this->control_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->control_number());
  }

  // int32 control_value = 3;
  if (this->control_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->control_value());
  }

  // int32 instrument = 4;
  if (this->instrument() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->instrument());
  }

  // int32 program = 5;
  if (this->program() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->program());
  }

  // bool is_drum = 6;
  if (this->is_drum() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteSequence_ControlChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.NoteSequence.ControlChange)
  GOOGLE_DCHECK_NE(&from, this);
  const NoteSequence_ControlChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteSequence_ControlChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.NoteSequence.ControlChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.NoteSequence.ControlChange)
    MergeFrom(*source);
  }
}

void NoteSequence_ControlChange::MergeFrom(const NoteSequence_ControlChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.NoteSequence.ControlChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.control_number() != 0) {
    set_control_number(from.control_number());
  }
  if (from.control_value() != 0) {
    set_control_value(from.control_value());
  }
  if (from.instrument() != 0) {
    set_instrument(from.instrument());
  }
  if (from.program() != 0) {
    set_program(from.program());
  }
  if (from.is_drum() != 0) {
    set_is_drum(from.is_drum());
  }
}

void NoteSequence_ControlChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.NoteSequence.ControlChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteSequence_ControlChange::CopyFrom(const NoteSequence_ControlChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.NoteSequence.ControlChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteSequence_ControlChange::IsInitialized() const {
  return true;
}

void NoteSequence_ControlChange::Swap(NoteSequence_ControlChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoteSequence_ControlChange::InternalSwap(NoteSequence_ControlChange* other) {
  std::swap(time_, other->time_);
  std::swap(control_number_, other->control_number_);
  std::swap(control_value_, other->control_value_);
  std::swap(instrument_, other->instrument_);
  std::swap(program_, other->program_);
  std::swap(is_drum_, other->is_drum_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteSequence_ControlChange::GetMetadata() const {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence_ControlChange

// double time = 1;
void NoteSequence_ControlChange::clear_time() {
  time_ = 0;
}
double NoteSequence_ControlChange::time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ControlChange.time)
  return time_;
}
void NoteSequence_ControlChange::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ControlChange.time)
}

// int32 control_number = 2;
void NoteSequence_ControlChange::clear_control_number() {
  control_number_ = 0;
}
::google::protobuf::int32 NoteSequence_ControlChange::control_number() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ControlChange.control_number)
  return control_number_;
}
void NoteSequence_ControlChange::set_control_number(::google::protobuf::int32 value) {
  
  control_number_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ControlChange.control_number)
}

// int32 control_value = 3;
void NoteSequence_ControlChange::clear_control_value() {
  control_value_ = 0;
}
::google::protobuf::int32 NoteSequence_ControlChange::control_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ControlChange.control_value)
  return control_value_;
}
void NoteSequence_ControlChange::set_control_value(::google::protobuf::int32 value) {
  
  control_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ControlChange.control_value)
}

// int32 instrument = 4;
void NoteSequence_ControlChange::clear_instrument() {
  instrument_ = 0;
}
::google::protobuf::int32 NoteSequence_ControlChange::instrument() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ControlChange.instrument)
  return instrument_;
}
void NoteSequence_ControlChange::set_instrument(::google::protobuf::int32 value) {
  
  instrument_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ControlChange.instrument)
}

// int32 program = 5;
void NoteSequence_ControlChange::clear_program() {
  program_ = 0;
}
::google::protobuf::int32 NoteSequence_ControlChange::program() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ControlChange.program)
  return program_;
}
void NoteSequence_ControlChange::set_program(::google::protobuf::int32 value) {
  
  program_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ControlChange.program)
}

// bool is_drum = 6;
void NoteSequence_ControlChange::clear_is_drum() {
  is_drum_ = false;
}
bool NoteSequence_ControlChange::is_drum() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ControlChange.is_drum)
  return is_drum_;
}
void NoteSequence_ControlChange::set_is_drum(bool value) {
  
  is_drum_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ControlChange.is_drum)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteSequence_PartInfo::kPartFieldNumber;
const int NoteSequence_PartInfo::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteSequence_PartInfo::NoteSequence_PartInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.NoteSequence.PartInfo)
}
NoteSequence_PartInfo::NoteSequence_PartInfo(const NoteSequence_PartInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  part_ = from.part_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.NoteSequence.PartInfo)
}

void NoteSequence_PartInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_ = 0;
  _cached_size_ = 0;
}

NoteSequence_PartInfo::~NoteSequence_PartInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.NoteSequence.PartInfo)
  SharedDtor();
}

void NoteSequence_PartInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NoteSequence_PartInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteSequence_PartInfo::descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoteSequence_PartInfo& NoteSequence_PartInfo::default_instance() {
  protobuf_music_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoteSequence_PartInfo* NoteSequence_PartInfo::New(::google::protobuf::Arena* arena) const {
  NoteSequence_PartInfo* n = new NoteSequence_PartInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoteSequence_PartInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.NoteSequence.PartInfo)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_ = 0;
}

bool NoteSequence_PartInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.NoteSequence.PartInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 part = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &part_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.magenta.NoteSequence.PartInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.NoteSequence.PartInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.NoteSequence.PartInfo)
  return false;
#undef DO_
}

void NoteSequence_PartInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.NoteSequence.PartInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 part = 1;
  if (this->part() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->part(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.NoteSequence.PartInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.NoteSequence.PartInfo)
}

::google::protobuf::uint8* NoteSequence_PartInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.NoteSequence.PartInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 part = 1;
  if (this->part() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->part(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.NoteSequence.PartInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.NoteSequence.PartInfo)
  return target;
}

size_t NoteSequence_PartInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.NoteSequence.PartInfo)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 part = 1;
  if (this->part() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->part());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteSequence_PartInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.NoteSequence.PartInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NoteSequence_PartInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteSequence_PartInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.NoteSequence.PartInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.NoteSequence.PartInfo)
    MergeFrom(*source);
  }
}

void NoteSequence_PartInfo::MergeFrom(const NoteSequence_PartInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.NoteSequence.PartInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.part() != 0) {
    set_part(from.part());
  }
}

void NoteSequence_PartInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.NoteSequence.PartInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteSequence_PartInfo::CopyFrom(const NoteSequence_PartInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.NoteSequence.PartInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteSequence_PartInfo::IsInitialized() const {
  return true;
}

void NoteSequence_PartInfo::Swap(NoteSequence_PartInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoteSequence_PartInfo::InternalSwap(NoteSequence_PartInfo* other) {
  name_.Swap(&other->name_);
  std::swap(part_, other->part_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteSequence_PartInfo::GetMetadata() const {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence_PartInfo

// int32 part = 1;
void NoteSequence_PartInfo::clear_part() {
  part_ = 0;
}
::google::protobuf::int32 NoteSequence_PartInfo::part() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PartInfo.part)
  return part_;
}
void NoteSequence_PartInfo::set_part(::google::protobuf::int32 value) {
  
  part_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PartInfo.part)
}

// string name = 2;
void NoteSequence_PartInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NoteSequence_PartInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PartInfo.name)
  return name_.GetNoArena();
}
void NoteSequence_PartInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PartInfo.name)
}
#if LANG_CXX11
void NoteSequence_PartInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.NoteSequence.PartInfo.name)
}
#endif
void NoteSequence_PartInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.NoteSequence.PartInfo.name)
}
void NoteSequence_PartInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.NoteSequence.PartInfo.name)
}
::std::string* NoteSequence_PartInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.PartInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NoteSequence_PartInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.PartInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NoteSequence_PartInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.PartInfo.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteSequence_SourceInfo::kSourceTypeFieldNumber;
const int NoteSequence_SourceInfo::kEncodingTypeFieldNumber;
const int NoteSequence_SourceInfo::kParserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteSequence_SourceInfo::NoteSequence_SourceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.NoteSequence.SourceInfo)
}
NoteSequence_SourceInfo::NoteSequence_SourceInfo(const NoteSequence_SourceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_type_, &from.source_type_,
    reinterpret_cast<char*>(&parser_) -
    reinterpret_cast<char*>(&source_type_) + sizeof(parser_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.NoteSequence.SourceInfo)
}

void NoteSequence_SourceInfo::SharedCtor() {
  ::memset(&source_type_, 0, reinterpret_cast<char*>(&parser_) -
    reinterpret_cast<char*>(&source_type_) + sizeof(parser_));
  _cached_size_ = 0;
}

NoteSequence_SourceInfo::~NoteSequence_SourceInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.NoteSequence.SourceInfo)
  SharedDtor();
}

void NoteSequence_SourceInfo::SharedDtor() {
}

void NoteSequence_SourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteSequence_SourceInfo::descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoteSequence_SourceInfo& NoteSequence_SourceInfo::default_instance() {
  protobuf_music_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoteSequence_SourceInfo* NoteSequence_SourceInfo::New(::google::protobuf::Arena* arena) const {
  NoteSequence_SourceInfo* n = new NoteSequence_SourceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoteSequence_SourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.NoteSequence.SourceInfo)
  ::memset(&source_type_, 0, reinterpret_cast<char*>(&parser_) -
    reinterpret_cast<char*>(&source_type_) + sizeof(parser_));
}

bool NoteSequence_SourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.NoteSequence.SourceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tensorflow.magenta.NoteSequence.SourceInfo.SourceType source_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_source_type(static_cast< ::tensorflow::magenta::NoteSequence_SourceInfo_SourceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.magenta.NoteSequence.SourceInfo.EncodingType encoding_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding_type(static_cast< ::tensorflow::magenta::NoteSequence_SourceInfo_EncodingType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.magenta.NoteSequence.SourceInfo.Parser parser = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_parser(static_cast< ::tensorflow::magenta::NoteSequence_SourceInfo_Parser >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.NoteSequence.SourceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.NoteSequence.SourceInfo)
  return false;
#undef DO_
}

void NoteSequence_SourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.NoteSequence.SourceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.magenta.NoteSequence.SourceInfo.SourceType source_type = 1;
  if (this->source_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source_type(), output);
  }

  // .tensorflow.magenta.NoteSequence.SourceInfo.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding_type(), output);
  }

  // .tensorflow.magenta.NoteSequence.SourceInfo.Parser parser = 3;
  if (this->parser() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->parser(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.NoteSequence.SourceInfo)
}

::google::protobuf::uint8* NoteSequence_SourceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.NoteSequence.SourceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.magenta.NoteSequence.SourceInfo.SourceType source_type = 1;
  if (this->source_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->source_type(), target);
  }

  // .tensorflow.magenta.NoteSequence.SourceInfo.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding_type(), target);
  }

  // .tensorflow.magenta.NoteSequence.SourceInfo.Parser parser = 3;
  if (this->parser() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->parser(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.NoteSequence.SourceInfo)
  return target;
}

size_t NoteSequence_SourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.NoteSequence.SourceInfo)
  size_t total_size = 0;

  // .tensorflow.magenta.NoteSequence.SourceInfo.SourceType source_type = 1;
  if (this->source_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_type());
  }

  // .tensorflow.magenta.NoteSequence.SourceInfo.EncodingType encoding_type = 2;
  if (this->encoding_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding_type());
  }

  // .tensorflow.magenta.NoteSequence.SourceInfo.Parser parser = 3;
  if (this->parser() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->parser());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteSequence_SourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.NoteSequence.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NoteSequence_SourceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteSequence_SourceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.NoteSequence.SourceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.NoteSequence.SourceInfo)
    MergeFrom(*source);
  }
}

void NoteSequence_SourceInfo::MergeFrom(const NoteSequence_SourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.NoteSequence.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_type() != 0) {
    set_source_type(from.source_type());
  }
  if (from.encoding_type() != 0) {
    set_encoding_type(from.encoding_type());
  }
  if (from.parser() != 0) {
    set_parser(from.parser());
  }
}

void NoteSequence_SourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.NoteSequence.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteSequence_SourceInfo::CopyFrom(const NoteSequence_SourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.NoteSequence.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteSequence_SourceInfo::IsInitialized() const {
  return true;
}

void NoteSequence_SourceInfo::Swap(NoteSequence_SourceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoteSequence_SourceInfo::InternalSwap(NoteSequence_SourceInfo* other) {
  std::swap(source_type_, other->source_type_);
  std::swap(encoding_type_, other->encoding_type_);
  std::swap(parser_, other->parser_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteSequence_SourceInfo::GetMetadata() const {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence_SourceInfo

// .tensorflow.magenta.NoteSequence.SourceInfo.SourceType source_type = 1;
void NoteSequence_SourceInfo::clear_source_type() {
  source_type_ = 0;
}
::tensorflow::magenta::NoteSequence_SourceInfo_SourceType NoteSequence_SourceInfo::source_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.SourceInfo.source_type)
  return static_cast< ::tensorflow::magenta::NoteSequence_SourceInfo_SourceType >(source_type_);
}
void NoteSequence_SourceInfo::set_source_type(::tensorflow::magenta::NoteSequence_SourceInfo_SourceType value) {
  
  source_type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.SourceInfo.source_type)
}

// .tensorflow.magenta.NoteSequence.SourceInfo.EncodingType encoding_type = 2;
void NoteSequence_SourceInfo::clear_encoding_type() {
  encoding_type_ = 0;
}
::tensorflow::magenta::NoteSequence_SourceInfo_EncodingType NoteSequence_SourceInfo::encoding_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.SourceInfo.encoding_type)
  return static_cast< ::tensorflow::magenta::NoteSequence_SourceInfo_EncodingType >(encoding_type_);
}
void NoteSequence_SourceInfo::set_encoding_type(::tensorflow::magenta::NoteSequence_SourceInfo_EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.SourceInfo.encoding_type)
}

// .tensorflow.magenta.NoteSequence.SourceInfo.Parser parser = 3;
void NoteSequence_SourceInfo::clear_parser() {
  parser_ = 0;
}
::tensorflow::magenta::NoteSequence_SourceInfo_Parser NoteSequence_SourceInfo::parser() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.SourceInfo.parser)
  return static_cast< ::tensorflow::magenta::NoteSequence_SourceInfo_Parser >(parser_);
}
void NoteSequence_SourceInfo::set_parser(::tensorflow::magenta::NoteSequence_SourceInfo_Parser value) {
  
  parser_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.SourceInfo.parser)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteSequence_TextAnnotation::kTimeFieldNumber;
const int NoteSequence_TextAnnotation::kQuantizedStepFieldNumber;
const int NoteSequence_TextAnnotation::kTextFieldNumber;
const int NoteSequence_TextAnnotation::kAnnotationTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteSequence_TextAnnotation::NoteSequence_TextAnnotation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.NoteSequence.TextAnnotation)
}
NoteSequence_TextAnnotation::NoteSequence_TextAnnotation(const NoteSequence_TextAnnotation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&time_, &from.time_,
    reinterpret_cast<char*>(&annotation_type_) -
    reinterpret_cast<char*>(&time_) + sizeof(annotation_type_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.NoteSequence.TextAnnotation)
}

void NoteSequence_TextAnnotation::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&annotation_type_) -
    reinterpret_cast<char*>(&time_) + sizeof(annotation_type_));
  _cached_size_ = 0;
}

NoteSequence_TextAnnotation::~NoteSequence_TextAnnotation() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.NoteSequence.TextAnnotation)
  SharedDtor();
}

void NoteSequence_TextAnnotation::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NoteSequence_TextAnnotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteSequence_TextAnnotation::descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoteSequence_TextAnnotation& NoteSequence_TextAnnotation::default_instance() {
  protobuf_music_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoteSequence_TextAnnotation* NoteSequence_TextAnnotation::New(::google::protobuf::Arena* arena) const {
  NoteSequence_TextAnnotation* n = new NoteSequence_TextAnnotation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoteSequence_TextAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.NoteSequence.TextAnnotation)
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, reinterpret_cast<char*>(&annotation_type_) -
    reinterpret_cast<char*>(&time_) + sizeof(annotation_type_));
}

bool NoteSequence_TextAnnotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.NoteSequence.TextAnnotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.magenta.NoteSequence.TextAnnotation.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType annotation_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_annotation_type(static_cast< ::tensorflow::magenta::NoteSequence_TextAnnotation_TextAnnotationType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 quantized_step = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantized_step_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.NoteSequence.TextAnnotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.NoteSequence.TextAnnotation)
  return false;
#undef DO_
}

void NoteSequence_TextAnnotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.NoteSequence.TextAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->time(), output);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.NoteSequence.TextAnnotation.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // .tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType annotation_type = 3;
  if (this->annotation_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->annotation_type(), output);
  }

  // int64 quantized_step = 4;
  if (this->quantized_step() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->quantized_step(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.NoteSequence.TextAnnotation)
}

::google::protobuf::uint8* NoteSequence_TextAnnotation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.NoteSequence.TextAnnotation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time = 1;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->time(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.NoteSequence.TextAnnotation.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // .tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType annotation_type = 3;
  if (this->annotation_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->annotation_type(), target);
  }

  // int64 quantized_step = 4;
  if (this->quantized_step() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->quantized_step(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.NoteSequence.TextAnnotation)
  return target;
}

size_t NoteSequence_TextAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.NoteSequence.TextAnnotation)
  size_t total_size = 0;

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  // double time = 1;
  if (this->time() != 0) {
    total_size += 1 + 8;
  }

  // int64 quantized_step = 4;
  if (this->quantized_step() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->quantized_step());
  }

  // .tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType annotation_type = 3;
  if (this->annotation_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->annotation_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteSequence_TextAnnotation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.NoteSequence.TextAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  const NoteSequence_TextAnnotation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteSequence_TextAnnotation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.NoteSequence.TextAnnotation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.NoteSequence.TextAnnotation)
    MergeFrom(*source);
  }
}

void NoteSequence_TextAnnotation::MergeFrom(const NoteSequence_TextAnnotation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.NoteSequence.TextAnnotation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.quantized_step() != 0) {
    set_quantized_step(from.quantized_step());
  }
  if (from.annotation_type() != 0) {
    set_annotation_type(from.annotation_type());
  }
}

void NoteSequence_TextAnnotation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.NoteSequence.TextAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteSequence_TextAnnotation::CopyFrom(const NoteSequence_TextAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.NoteSequence.TextAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteSequence_TextAnnotation::IsInitialized() const {
  return true;
}

void NoteSequence_TextAnnotation::Swap(NoteSequence_TextAnnotation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoteSequence_TextAnnotation::InternalSwap(NoteSequence_TextAnnotation* other) {
  text_.Swap(&other->text_);
  std::swap(time_, other->time_);
  std::swap(quantized_step_, other->quantized_step_);
  std::swap(annotation_type_, other->annotation_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteSequence_TextAnnotation::GetMetadata() const {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence_TextAnnotation

// double time = 1;
void NoteSequence_TextAnnotation::clear_time() {
  time_ = 0;
}
double NoteSequence_TextAnnotation::time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TextAnnotation.time)
  return time_;
}
void NoteSequence_TextAnnotation::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TextAnnotation.time)
}

// int64 quantized_step = 4;
void NoteSequence_TextAnnotation::clear_quantized_step() {
  quantized_step_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NoteSequence_TextAnnotation::quantized_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TextAnnotation.quantized_step)
  return quantized_step_;
}
void NoteSequence_TextAnnotation::set_quantized_step(::google::protobuf::int64 value) {
  
  quantized_step_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TextAnnotation.quantized_step)
}

// string text = 2;
void NoteSequence_TextAnnotation::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NoteSequence_TextAnnotation::text() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TextAnnotation.text)
  return text_.GetNoArena();
}
void NoteSequence_TextAnnotation::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TextAnnotation.text)
}
#if LANG_CXX11
void NoteSequence_TextAnnotation::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.NoteSequence.TextAnnotation.text)
}
#endif
void NoteSequence_TextAnnotation::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.NoteSequence.TextAnnotation.text)
}
void NoteSequence_TextAnnotation::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.NoteSequence.TextAnnotation.text)
}
::std::string* NoteSequence_TextAnnotation::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.TextAnnotation.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NoteSequence_TextAnnotation::release_text() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.TextAnnotation.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NoteSequence_TextAnnotation::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.TextAnnotation.text)
}

// .tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType annotation_type = 3;
void NoteSequence_TextAnnotation::clear_annotation_type() {
  annotation_type_ = 0;
}
::tensorflow::magenta::NoteSequence_TextAnnotation_TextAnnotationType NoteSequence_TextAnnotation::annotation_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TextAnnotation.annotation_type)
  return static_cast< ::tensorflow::magenta::NoteSequence_TextAnnotation_TextAnnotationType >(annotation_type_);
}
void NoteSequence_TextAnnotation::set_annotation_type(::tensorflow::magenta::NoteSequence_TextAnnotation_TextAnnotationType value) {
  
  annotation_type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TextAnnotation.annotation_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteSequence_QuantizationInfo::kStepsPerQuarterFieldNumber;
const int NoteSequence_QuantizationInfo::kStepsPerSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteSequence_QuantizationInfo::NoteSequence_QuantizationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.NoteSequence.QuantizationInfo)
}
NoteSequence_QuantizationInfo::NoteSequence_QuantizationInfo(const NoteSequence_QuantizationInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_resolution();
  switch (from.resolution_case()) {
    case kStepsPerQuarter: {
      set_steps_per_quarter(from.steps_per_quarter());
      break;
    }
    case kStepsPerSecond: {
      set_steps_per_second(from.steps_per_second());
      break;
    }
    case RESOLUTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.NoteSequence.QuantizationInfo)
}

void NoteSequence_QuantizationInfo::SharedCtor() {
  clear_has_resolution();
  _cached_size_ = 0;
}

NoteSequence_QuantizationInfo::~NoteSequence_QuantizationInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.NoteSequence.QuantizationInfo)
  SharedDtor();
}

void NoteSequence_QuantizationInfo::SharedDtor() {
  if (has_resolution()) {
    clear_resolution();
  }
}

void NoteSequence_QuantizationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteSequence_QuantizationInfo::descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoteSequence_QuantizationInfo& NoteSequence_QuantizationInfo::default_instance() {
  protobuf_music_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoteSequence_QuantizationInfo* NoteSequence_QuantizationInfo::New(::google::protobuf::Arena* arena) const {
  NoteSequence_QuantizationInfo* n = new NoteSequence_QuantizationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoteSequence_QuantizationInfo::clear_resolution() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.magenta.NoteSequence.QuantizationInfo)
  switch (resolution_case()) {
    case kStepsPerQuarter: {
      // No need to clear
      break;
    }
    case kStepsPerSecond: {
      // No need to clear
      break;
    }
    case RESOLUTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESOLUTION_NOT_SET;
}


void NoteSequence_QuantizationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.NoteSequence.QuantizationInfo)
  clear_resolution();
}

bool NoteSequence_QuantizationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.NoteSequence.QuantizationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 steps_per_quarter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          clear_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolution_.steps_per_quarter_)));
          set_has_steps_per_quarter();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 steps_per_second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          clear_resolution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resolution_.steps_per_second_)));
          set_has_steps_per_second();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.NoteSequence.QuantizationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.NoteSequence.QuantizationInfo)
  return false;
#undef DO_
}

void NoteSequence_QuantizationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.NoteSequence.QuantizationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 steps_per_quarter = 1;
  if (has_steps_per_quarter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->steps_per_quarter(), output);
  }

  // int32 steps_per_second = 2;
  if (has_steps_per_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->steps_per_second(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.NoteSequence.QuantizationInfo)
}

::google::protobuf::uint8* NoteSequence_QuantizationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.NoteSequence.QuantizationInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 steps_per_quarter = 1;
  if (has_steps_per_quarter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->steps_per_quarter(), target);
  }

  // int32 steps_per_second = 2;
  if (has_steps_per_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->steps_per_second(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.NoteSequence.QuantizationInfo)
  return target;
}

size_t NoteSequence_QuantizationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.NoteSequence.QuantizationInfo)
  size_t total_size = 0;

  switch (resolution_case()) {
    // int32 steps_per_quarter = 1;
    case kStepsPerQuarter: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->steps_per_quarter());
      break;
    }
    // int32 steps_per_second = 2;
    case kStepsPerSecond: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->steps_per_second());
      break;
    }
    case RESOLUTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteSequence_QuantizationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.NoteSequence.QuantizationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NoteSequence_QuantizationInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteSequence_QuantizationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.NoteSequence.QuantizationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.NoteSequence.QuantizationInfo)
    MergeFrom(*source);
  }
}

void NoteSequence_QuantizationInfo::MergeFrom(const NoteSequence_QuantizationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.NoteSequence.QuantizationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.resolution_case()) {
    case kStepsPerQuarter: {
      set_steps_per_quarter(from.steps_per_quarter());
      break;
    }
    case kStepsPerSecond: {
      set_steps_per_second(from.steps_per_second());
      break;
    }
    case RESOLUTION_NOT_SET: {
      break;
    }
  }
}

void NoteSequence_QuantizationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.NoteSequence.QuantizationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteSequence_QuantizationInfo::CopyFrom(const NoteSequence_QuantizationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.NoteSequence.QuantizationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteSequence_QuantizationInfo::IsInitialized() const {
  return true;
}

void NoteSequence_QuantizationInfo::Swap(NoteSequence_QuantizationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoteSequence_QuantizationInfo::InternalSwap(NoteSequence_QuantizationInfo* other) {
  std::swap(resolution_, other->resolution_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteSequence_QuantizationInfo::GetMetadata() const {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence_QuantizationInfo

// int32 steps_per_quarter = 1;
bool NoteSequence_QuantizationInfo::has_steps_per_quarter() const {
  return resolution_case() == kStepsPerQuarter;
}
void NoteSequence_QuantizationInfo::set_has_steps_per_quarter() {
  _oneof_case_[0] = kStepsPerQuarter;
}
void NoteSequence_QuantizationInfo::clear_steps_per_quarter() {
  if (has_steps_per_quarter()) {
    resolution_.steps_per_quarter_ = 0;
    clear_has_resolution();
  }
}
::google::protobuf::int32 NoteSequence_QuantizationInfo::steps_per_quarter() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.QuantizationInfo.steps_per_quarter)
  if (has_steps_per_quarter()) {
    return resolution_.steps_per_quarter_;
  }
  return 0;
}
void NoteSequence_QuantizationInfo::set_steps_per_quarter(::google::protobuf::int32 value) {
  if (!has_steps_per_quarter()) {
    clear_resolution();
    set_has_steps_per_quarter();
  }
  resolution_.steps_per_quarter_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.QuantizationInfo.steps_per_quarter)
}

// int32 steps_per_second = 2;
bool NoteSequence_QuantizationInfo::has_steps_per_second() const {
  return resolution_case() == kStepsPerSecond;
}
void NoteSequence_QuantizationInfo::set_has_steps_per_second() {
  _oneof_case_[0] = kStepsPerSecond;
}
void NoteSequence_QuantizationInfo::clear_steps_per_second() {
  if (has_steps_per_second()) {
    resolution_.steps_per_second_ = 0;
    clear_has_resolution();
  }
}
::google::protobuf::int32 NoteSequence_QuantizationInfo::steps_per_second() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.QuantizationInfo.steps_per_second)
  if (has_steps_per_second()) {
    return resolution_.steps_per_second_;
  }
  return 0;
}
void NoteSequence_QuantizationInfo::set_steps_per_second(::google::protobuf::int32 value) {
  if (!has_steps_per_second()) {
    clear_resolution();
    set_has_steps_per_second();
  }
  resolution_.steps_per_second_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.QuantizationInfo.steps_per_second)
}

bool NoteSequence_QuantizationInfo::has_resolution() const {
  return resolution_case() != RESOLUTION_NOT_SET;
}
void NoteSequence_QuantizationInfo::clear_has_resolution() {
  _oneof_case_[0] = RESOLUTION_NOT_SET;
}
NoteSequence_QuantizationInfo::ResolutionCase NoteSequence_QuantizationInfo::resolution_case() const {
  return NoteSequence_QuantizationInfo::ResolutionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteSequence_SubsequenceInfo::kStartTimeOffsetFieldNumber;
const int NoteSequence_SubsequenceInfo::kEndTimeOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteSequence_SubsequenceInfo::NoteSequence_SubsequenceInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.NoteSequence.SubsequenceInfo)
}
NoteSequence_SubsequenceInfo::NoteSequence_SubsequenceInfo(const NoteSequence_SubsequenceInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_offset_, &from.start_time_offset_,
    reinterpret_cast<char*>(&end_time_offset_) -
    reinterpret_cast<char*>(&start_time_offset_) + sizeof(end_time_offset_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.NoteSequence.SubsequenceInfo)
}

void NoteSequence_SubsequenceInfo::SharedCtor() {
  ::memset(&start_time_offset_, 0, reinterpret_cast<char*>(&end_time_offset_) -
    reinterpret_cast<char*>(&start_time_offset_) + sizeof(end_time_offset_));
  _cached_size_ = 0;
}

NoteSequence_SubsequenceInfo::~NoteSequence_SubsequenceInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  SharedDtor();
}

void NoteSequence_SubsequenceInfo::SharedDtor() {
}

void NoteSequence_SubsequenceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteSequence_SubsequenceInfo::descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoteSequence_SubsequenceInfo& NoteSequence_SubsequenceInfo::default_instance() {
  protobuf_music_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoteSequence_SubsequenceInfo* NoteSequence_SubsequenceInfo::New(::google::protobuf::Arena* arena) const {
  NoteSequence_SubsequenceInfo* n = new NoteSequence_SubsequenceInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoteSequence_SubsequenceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  ::memset(&start_time_offset_, 0, reinterpret_cast<char*>(&end_time_offset_) -
    reinterpret_cast<char*>(&start_time_offset_) + sizeof(end_time_offset_));
}

bool NoteSequence_SubsequenceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double start_time_offset = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_time_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  return false;
#undef DO_
}

void NoteSequence_SubsequenceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start_time_offset = 1;
  if (this->start_time_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->start_time_offset(), output);
  }

  // double end_time_offset = 2;
  if (this->end_time_offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->end_time_offset(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.NoteSequence.SubsequenceInfo)
}

::google::protobuf::uint8* NoteSequence_SubsequenceInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start_time_offset = 1;
  if (this->start_time_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->start_time_offset(), target);
  }

  // double end_time_offset = 2;
  if (this->end_time_offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->end_time_offset(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  return target;
}

size_t NoteSequence_SubsequenceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  size_t total_size = 0;

  // double start_time_offset = 1;
  if (this->start_time_offset() != 0) {
    total_size += 1 + 8;
  }

  // double end_time_offset = 2;
  if (this->end_time_offset() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteSequence_SubsequenceInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NoteSequence_SubsequenceInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteSequence_SubsequenceInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.NoteSequence.SubsequenceInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.NoteSequence.SubsequenceInfo)
    MergeFrom(*source);
  }
}

void NoteSequence_SubsequenceInfo::MergeFrom(const NoteSequence_SubsequenceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_time_offset() != 0) {
    set_start_time_offset(from.start_time_offset());
  }
  if (from.end_time_offset() != 0) {
    set_end_time_offset(from.end_time_offset());
  }
}

void NoteSequence_SubsequenceInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteSequence_SubsequenceInfo::CopyFrom(const NoteSequence_SubsequenceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.NoteSequence.SubsequenceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteSequence_SubsequenceInfo::IsInitialized() const {
  return true;
}

void NoteSequence_SubsequenceInfo::Swap(NoteSequence_SubsequenceInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoteSequence_SubsequenceInfo::InternalSwap(NoteSequence_SubsequenceInfo* other) {
  std::swap(start_time_offset_, other->start_time_offset_);
  std::swap(end_time_offset_, other->end_time_offset_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteSequence_SubsequenceInfo::GetMetadata() const {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence_SubsequenceInfo

// double start_time_offset = 1;
void NoteSequence_SubsequenceInfo::clear_start_time_offset() {
  start_time_offset_ = 0;
}
double NoteSequence_SubsequenceInfo::start_time_offset() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.SubsequenceInfo.start_time_offset)
  return start_time_offset_;
}
void NoteSequence_SubsequenceInfo::set_start_time_offset(double value) {
  
  start_time_offset_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.SubsequenceInfo.start_time_offset)
}

// double end_time_offset = 2;
void NoteSequence_SubsequenceInfo::clear_end_time_offset() {
  end_time_offset_ = 0;
}
double NoteSequence_SubsequenceInfo::end_time_offset() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.SubsequenceInfo.end_time_offset)
  return end_time_offset_;
}
void NoteSequence_SubsequenceInfo::set_end_time_offset(double value) {
  
  end_time_offset_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.SubsequenceInfo.end_time_offset)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NoteSequence::kIdFieldNumber;
const int NoteSequence::kFilenameFieldNumber;
const int NoteSequence::kCollectionNameFieldNumber;
const int NoteSequence::kTicksPerQuarterFieldNumber;
const int NoteSequence::kTimeSignaturesFieldNumber;
const int NoteSequence::kKeySignaturesFieldNumber;
const int NoteSequence::kTemposFieldNumber;
const int NoteSequence::kNotesFieldNumber;
const int NoteSequence::kTotalTimeFieldNumber;
const int NoteSequence::kTotalQuantizedStepsFieldNumber;
const int NoteSequence::kPitchBendsFieldNumber;
const int NoteSequence::kControlChangesFieldNumber;
const int NoteSequence::kPartInfosFieldNumber;
const int NoteSequence::kSourceInfoFieldNumber;
const int NoteSequence::kTextAnnotationsFieldNumber;
const int NoteSequence::kQuantizationInfoFieldNumber;
const int NoteSequence::kSubsequenceInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NoteSequence::NoteSequence()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_music_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.NoteSequence)
}
NoteSequence::NoteSequence(const NoteSequence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      time_signatures_(from.time_signatures_),
      key_signatures_(from.key_signatures_),
      tempos_(from.tempos_),
      notes_(from.notes_),
      pitch_bends_(from.pitch_bends_),
      control_changes_(from.control_changes_),
      part_infos_(from.part_infos_),
      text_annotations_(from.text_annotations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  collection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.collection_name().size() > 0) {
    collection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_source_info()) {
    source_info_ = new ::tensorflow::magenta::NoteSequence_SourceInfo(*from.source_info_);
  } else {
    source_info_ = NULL;
  }
  if (from.has_quantization_info()) {
    quantization_info_ = new ::tensorflow::magenta::NoteSequence_QuantizationInfo(*from.quantization_info_);
  } else {
    quantization_info_ = NULL;
  }
  if (from.has_subsequence_info()) {
    subsequence_info_ = new ::tensorflow::magenta::NoteSequence_SubsequenceInfo(*from.subsequence_info_);
  } else {
    subsequence_info_ = NULL;
  }
  ::memcpy(&total_time_, &from.total_time_,
    reinterpret_cast<char*>(&ticks_per_quarter_) -
    reinterpret_cast<char*>(&total_time_) + sizeof(ticks_per_quarter_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.NoteSequence)
}

void NoteSequence::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&source_info_, 0, reinterpret_cast<char*>(&ticks_per_quarter_) -
    reinterpret_cast<char*>(&source_info_) + sizeof(ticks_per_quarter_));
  _cached_size_ = 0;
}

NoteSequence::~NoteSequence() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.NoteSequence)
  SharedDtor();
}

void NoteSequence::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete source_info_;
  }
  if (this != internal_default_instance()) {
    delete quantization_info_;
  }
  if (this != internal_default_instance()) {
    delete subsequence_info_;
  }
}

void NoteSequence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoteSequence::descriptor() {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NoteSequence& NoteSequence::default_instance() {
  protobuf_music_2eproto::InitDefaults();
  return *internal_default_instance();
}

NoteSequence* NoteSequence::New(::google::protobuf::Arena* arena) const {
  NoteSequence* n = new NoteSequence;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NoteSequence::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.NoteSequence)
  time_signatures_.Clear();
  key_signatures_.Clear();
  tempos_.Clear();
  notes_.Clear();
  pitch_bends_.Clear();
  control_changes_.Clear();
  part_infos_.Clear();
  text_annotations_.Clear();
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && source_info_ != NULL) {
    delete source_info_;
  }
  source_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && quantization_info_ != NULL) {
    delete quantization_info_;
  }
  quantization_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && subsequence_info_ != NULL) {
    delete subsequence_info_;
  }
  subsequence_info_ = NULL;
  ::memset(&total_time_, 0, reinterpret_cast<char*>(&ticks_per_quarter_) -
    reinterpret_cast<char*>(&total_time_) + sizeof(ticks_per_quarter_));
}

bool NoteSequence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.NoteSequence)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.magenta.NoteSequence.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.magenta.NoteSequence.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string collection_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_collection_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->collection_name().data(), this->collection_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.magenta.NoteSequence.collection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ticks_per_quarter = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticks_per_quarter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.magenta.NoteSequence.TimeSignature time_signatures = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_time_signatures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.magenta.NoteSequence.KeySignature key_signatures = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_key_signatures()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.magenta.NoteSequence.Tempo tempos = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tempos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.magenta.NoteSequence.Note notes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.magenta.NoteSequence.PitchBend pitch_bends = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pitch_bends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.magenta.NoteSequence.ControlChange control_changes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_control_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.magenta.NoteSequence.PartInfo part_infos = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_part_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.magenta.NoteSequence.SourceInfo source_info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.magenta.NoteSequence.TextAnnotation text_annotations = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_text_annotations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.magenta.NoteSequence.QuantizationInfo quantization_info = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quantization_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_quantized_steps = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_quantized_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tensorflow.magenta.NoteSequence.SubsequenceInfo subsequence_info = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subsequence_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.NoteSequence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.NoteSequence)
  return false;
#undef DO_
}

void NoteSequence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.NoteSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.NoteSequence.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.NoteSequence.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), this->collection_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.NoteSequence.collection_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->collection_name(), output);
  }

  // int32 ticks_per_quarter = 4;
  if (this->ticks_per_quarter() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ticks_per_quarter(), output);
  }

  // repeated .tensorflow.magenta.NoteSequence.TimeSignature time_signatures = 5;
  for (unsigned int i = 0, n = this->time_signatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->time_signatures(i), output);
  }

  // repeated .tensorflow.magenta.NoteSequence.KeySignature key_signatures = 6;
  for (unsigned int i = 0, n = this->key_signatures_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->key_signatures(i), output);
  }

  // repeated .tensorflow.magenta.NoteSequence.Tempo tempos = 7;
  for (unsigned int i = 0, n = this->tempos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tempos(i), output);
  }

  // repeated .tensorflow.magenta.NoteSequence.Note notes = 8;
  for (unsigned int i = 0, n = this->notes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->notes(i), output);
  }

  // double total_time = 9;
  if (this->total_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->total_time(), output);
  }

  // repeated .tensorflow.magenta.NoteSequence.PitchBend pitch_bends = 10;
  for (unsigned int i = 0, n = this->pitch_bends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pitch_bends(i), output);
  }

  // repeated .tensorflow.magenta.NoteSequence.ControlChange control_changes = 11;
  for (unsigned int i = 0, n = this->control_changes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->control_changes(i), output);
  }

  // repeated .tensorflow.magenta.NoteSequence.PartInfo part_infos = 12;
  for (unsigned int i = 0, n = this->part_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->part_infos(i), output);
  }

  // .tensorflow.magenta.NoteSequence.SourceInfo source_info = 13;
  if (this->has_source_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->source_info_, output);
  }

  // repeated .tensorflow.magenta.NoteSequence.TextAnnotation text_annotations = 14;
  for (unsigned int i = 0, n = this->text_annotations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->text_annotations(i), output);
  }

  // .tensorflow.magenta.NoteSequence.QuantizationInfo quantization_info = 15;
  if (this->has_quantization_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->quantization_info_, output);
  }

  // int64 total_quantized_steps = 16;
  if (this->total_quantized_steps() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->total_quantized_steps(), output);
  }

  // .tensorflow.magenta.NoteSequence.SubsequenceInfo subsequence_info = 17;
  if (this->has_subsequence_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->subsequence_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.NoteSequence)
}

::google::protobuf::uint8* NoteSequence::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.NoteSequence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.NoteSequence.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.NoteSequence.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->collection_name().data(), this->collection_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.NoteSequence.collection_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->collection_name(), target);
  }

  // int32 ticks_per_quarter = 4;
  if (this->ticks_per_quarter() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ticks_per_quarter(), target);
  }

  // repeated .tensorflow.magenta.NoteSequence.TimeSignature time_signatures = 5;
  for (unsigned int i = 0, n = this->time_signatures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->time_signatures(i), deterministic, target);
  }

  // repeated .tensorflow.magenta.NoteSequence.KeySignature key_signatures = 6;
  for (unsigned int i = 0, n = this->key_signatures_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->key_signatures(i), deterministic, target);
  }

  // repeated .tensorflow.magenta.NoteSequence.Tempo tempos = 7;
  for (unsigned int i = 0, n = this->tempos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->tempos(i), deterministic, target);
  }

  // repeated .tensorflow.magenta.NoteSequence.Note notes = 8;
  for (unsigned int i = 0, n = this->notes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->notes(i), deterministic, target);
  }

  // double total_time = 9;
  if (this->total_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->total_time(), target);
  }

  // repeated .tensorflow.magenta.NoteSequence.PitchBend pitch_bends = 10;
  for (unsigned int i = 0, n = this->pitch_bends_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->pitch_bends(i), deterministic, target);
  }

  // repeated .tensorflow.magenta.NoteSequence.ControlChange control_changes = 11;
  for (unsigned int i = 0, n = this->control_changes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->control_changes(i), deterministic, target);
  }

  // repeated .tensorflow.magenta.NoteSequence.PartInfo part_infos = 12;
  for (unsigned int i = 0, n = this->part_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->part_infos(i), deterministic, target);
  }

  // .tensorflow.magenta.NoteSequence.SourceInfo source_info = 13;
  if (this->has_source_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->source_info_, deterministic, target);
  }

  // repeated .tensorflow.magenta.NoteSequence.TextAnnotation text_annotations = 14;
  for (unsigned int i = 0, n = this->text_annotations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->text_annotations(i), deterministic, target);
  }

  // .tensorflow.magenta.NoteSequence.QuantizationInfo quantization_info = 15;
  if (this->has_quantization_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->quantization_info_, deterministic, target);
  }

  // int64 total_quantized_steps = 16;
  if (this->total_quantized_steps() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->total_quantized_steps(), target);
  }

  // .tensorflow.magenta.NoteSequence.SubsequenceInfo subsequence_info = 17;
  if (this->has_subsequence_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->subsequence_info_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.NoteSequence)
  return target;
}

size_t NoteSequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.NoteSequence)
  size_t total_size = 0;

  // repeated .tensorflow.magenta.NoteSequence.TimeSignature time_signatures = 5;
  {
    unsigned int count = this->time_signatures_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time_signatures(i));
    }
  }

  // repeated .tensorflow.magenta.NoteSequence.KeySignature key_signatures = 6;
  {
    unsigned int count = this->key_signatures_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->key_signatures(i));
    }
  }

  // repeated .tensorflow.magenta.NoteSequence.Tempo tempos = 7;
  {
    unsigned int count = this->tempos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tempos(i));
    }
  }

  // repeated .tensorflow.magenta.NoteSequence.Note notes = 8;
  {
    unsigned int count = this->notes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notes(i));
    }
  }

  // repeated .tensorflow.magenta.NoteSequence.PitchBend pitch_bends = 10;
  {
    unsigned int count = this->pitch_bends_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pitch_bends(i));
    }
  }

  // repeated .tensorflow.magenta.NoteSequence.ControlChange control_changes = 11;
  {
    unsigned int count = this->control_changes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_changes(i));
    }
  }

  // repeated .tensorflow.magenta.NoteSequence.PartInfo part_infos = 12;
  {
    unsigned int count = this->part_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->part_infos(i));
    }
  }

  // repeated .tensorflow.magenta.NoteSequence.TextAnnotation text_annotations = 14;
  {
    unsigned int count = this->text_annotations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->text_annotations(i));
    }
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // string collection_name = 3;
  if (this->collection_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->collection_name());
  }

  // .tensorflow.magenta.NoteSequence.SourceInfo source_info = 13;
  if (this->has_source_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_info_);
  }

  // .tensorflow.magenta.NoteSequence.QuantizationInfo quantization_info = 15;
  if (this->has_quantization_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->quantization_info_);
  }

  // .tensorflow.magenta.NoteSequence.SubsequenceInfo subsequence_info = 17;
  if (this->has_subsequence_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->subsequence_info_);
  }

  // double total_time = 9;
  if (this->total_time() != 0) {
    total_size += 1 + 8;
  }

  // int64 total_quantized_steps = 16;
  if (this->total_quantized_steps() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_quantized_steps());
  }

  // int32 ticks_per_quarter = 4;
  if (this->ticks_per_quarter() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ticks_per_quarter());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoteSequence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.NoteSequence)
  GOOGLE_DCHECK_NE(&from, this);
  const NoteSequence* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NoteSequence>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.NoteSequence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.NoteSequence)
    MergeFrom(*source);
  }
}

void NoteSequence::MergeFrom(const NoteSequence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.NoteSequence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_signatures_.MergeFrom(from.time_signatures_);
  key_signatures_.MergeFrom(from.key_signatures_);
  tempos_.MergeFrom(from.tempos_);
  notes_.MergeFrom(from.notes_);
  pitch_bends_.MergeFrom(from.pitch_bends_);
  control_changes_.MergeFrom(from.control_changes_);
  part_infos_.MergeFrom(from.part_infos_);
  text_annotations_.MergeFrom(from.text_annotations_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.collection_name().size() > 0) {

    collection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.collection_name_);
  }
  if (from.has_source_info()) {
    mutable_source_info()->::tensorflow::magenta::NoteSequence_SourceInfo::MergeFrom(from.source_info());
  }
  if (from.has_quantization_info()) {
    mutable_quantization_info()->::tensorflow::magenta::NoteSequence_QuantizationInfo::MergeFrom(from.quantization_info());
  }
  if (from.has_subsequence_info()) {
    mutable_subsequence_info()->::tensorflow::magenta::NoteSequence_SubsequenceInfo::MergeFrom(from.subsequence_info());
  }
  if (from.total_time() != 0) {
    set_total_time(from.total_time());
  }
  if (from.total_quantized_steps() != 0) {
    set_total_quantized_steps(from.total_quantized_steps());
  }
  if (from.ticks_per_quarter() != 0) {
    set_ticks_per_quarter(from.ticks_per_quarter());
  }
}

void NoteSequence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.NoteSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoteSequence::CopyFrom(const NoteSequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.NoteSequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoteSequence::IsInitialized() const {
  return true;
}

void NoteSequence::Swap(NoteSequence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NoteSequence::InternalSwap(NoteSequence* other) {
  time_signatures_.InternalSwap(&other->time_signatures_);
  key_signatures_.InternalSwap(&other->key_signatures_);
  tempos_.InternalSwap(&other->tempos_);
  notes_.InternalSwap(&other->notes_);
  pitch_bends_.InternalSwap(&other->pitch_bends_);
  control_changes_.InternalSwap(&other->control_changes_);
  part_infos_.InternalSwap(&other->part_infos_);
  text_annotations_.InternalSwap(&other->text_annotations_);
  id_.Swap(&other->id_);
  filename_.Swap(&other->filename_);
  collection_name_.Swap(&other->collection_name_);
  std::swap(source_info_, other->source_info_);
  std::swap(quantization_info_, other->quantization_info_);
  std::swap(subsequence_info_, other->subsequence_info_);
  std::swap(total_time_, other->total_time_);
  std::swap(total_quantized_steps_, other->total_quantized_steps_);
  std::swap(ticks_per_quarter_, other->ticks_per_quarter_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NoteSequence::GetMetadata() const {
  protobuf_music_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_music_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence

// string id = 1;
void NoteSequence::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NoteSequence::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.id)
  return id_.GetNoArena();
}
void NoteSequence::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.id)
}
#if LANG_CXX11
void NoteSequence::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.NoteSequence.id)
}
#endif
void NoteSequence::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.NoteSequence.id)
}
void NoteSequence::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.NoteSequence.id)
}
::std::string* NoteSequence::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NoteSequence::release_id() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NoteSequence::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.id)
}

// string filename = 2;
void NoteSequence::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NoteSequence::filename() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.filename)
  return filename_.GetNoArena();
}
void NoteSequence::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.filename)
}
#if LANG_CXX11
void NoteSequence::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.NoteSequence.filename)
}
#endif
void NoteSequence::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.NoteSequence.filename)
}
void NoteSequence::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.NoteSequence.filename)
}
::std::string* NoteSequence::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NoteSequence::release_filename() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NoteSequence::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.filename)
}

// string collection_name = 3;
void NoteSequence::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NoteSequence::collection_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.collection_name)
  return collection_name_.GetNoArena();
}
void NoteSequence::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.collection_name)
}
#if LANG_CXX11
void NoteSequence::set_collection_name(::std::string&& value) {
  
  collection_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.NoteSequence.collection_name)
}
#endif
void NoteSequence::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.NoteSequence.collection_name)
}
void NoteSequence::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.NoteSequence.collection_name)
}
::std::string* NoteSequence::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NoteSequence::release_collection_name() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NoteSequence::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.collection_name)
}

// int32 ticks_per_quarter = 4;
void NoteSequence::clear_ticks_per_quarter() {
  ticks_per_quarter_ = 0;
}
::google::protobuf::int32 NoteSequence::ticks_per_quarter() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ticks_per_quarter)
  return ticks_per_quarter_;
}
void NoteSequence::set_ticks_per_quarter(::google::protobuf::int32 value) {
  
  ticks_per_quarter_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ticks_per_quarter)
}

// repeated .tensorflow.magenta.NoteSequence.TimeSignature time_signatures = 5;
int NoteSequence::time_signatures_size() const {
  return time_signatures_.size();
}
void NoteSequence::clear_time_signatures() {
  time_signatures_.Clear();
}
const ::tensorflow::magenta::NoteSequence_TimeSignature& NoteSequence::time_signatures(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.time_signatures)
  return time_signatures_.Get(index);
}
::tensorflow::magenta::NoteSequence_TimeSignature* NoteSequence::mutable_time_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.time_signatures)
  return time_signatures_.Mutable(index);
}
::tensorflow::magenta::NoteSequence_TimeSignature* NoteSequence::add_time_signatures() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.time_signatures)
  return time_signatures_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TimeSignature >*
NoteSequence::mutable_time_signatures() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.time_signatures)
  return &time_signatures_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TimeSignature >&
NoteSequence::time_signatures() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.time_signatures)
  return time_signatures_;
}

// repeated .tensorflow.magenta.NoteSequence.KeySignature key_signatures = 6;
int NoteSequence::key_signatures_size() const {
  return key_signatures_.size();
}
void NoteSequence::clear_key_signatures() {
  key_signatures_.Clear();
}
const ::tensorflow::magenta::NoteSequence_KeySignature& NoteSequence::key_signatures(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.key_signatures)
  return key_signatures_.Get(index);
}
::tensorflow::magenta::NoteSequence_KeySignature* NoteSequence::mutable_key_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.key_signatures)
  return key_signatures_.Mutable(index);
}
::tensorflow::magenta::NoteSequence_KeySignature* NoteSequence::add_key_signatures() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.key_signatures)
  return key_signatures_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_KeySignature >*
NoteSequence::mutable_key_signatures() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.key_signatures)
  return &key_signatures_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_KeySignature >&
NoteSequence::key_signatures() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.key_signatures)
  return key_signatures_;
}

// repeated .tensorflow.magenta.NoteSequence.Tempo tempos = 7;
int NoteSequence::tempos_size() const {
  return tempos_.size();
}
void NoteSequence::clear_tempos() {
  tempos_.Clear();
}
const ::tensorflow::magenta::NoteSequence_Tempo& NoteSequence::tempos(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.tempos)
  return tempos_.Get(index);
}
::tensorflow::magenta::NoteSequence_Tempo* NoteSequence::mutable_tempos(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.tempos)
  return tempos_.Mutable(index);
}
::tensorflow::magenta::NoteSequence_Tempo* NoteSequence::add_tempos() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.tempos)
  return tempos_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Tempo >*
NoteSequence::mutable_tempos() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.tempos)
  return &tempos_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Tempo >&
NoteSequence::tempos() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.tempos)
  return tempos_;
}

// repeated .tensorflow.magenta.NoteSequence.Note notes = 8;
int NoteSequence::notes_size() const {
  return notes_.size();
}
void NoteSequence::clear_notes() {
  notes_.Clear();
}
const ::tensorflow::magenta::NoteSequence_Note& NoteSequence::notes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.notes)
  return notes_.Get(index);
}
::tensorflow::magenta::NoteSequence_Note* NoteSequence::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.notes)
  return notes_.Mutable(index);
}
::tensorflow::magenta::NoteSequence_Note* NoteSequence::add_notes() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.notes)
  return notes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Note >*
NoteSequence::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.notes)
  return &notes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Note >&
NoteSequence::notes() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.notes)
  return notes_;
}

// double total_time = 9;
void NoteSequence::clear_total_time() {
  total_time_ = 0;
}
double NoteSequence::total_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.total_time)
  return total_time_;
}
void NoteSequence::set_total_time(double value) {
  
  total_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.total_time)
}

// int64 total_quantized_steps = 16;
void NoteSequence::clear_total_quantized_steps() {
  total_quantized_steps_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 NoteSequence::total_quantized_steps() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.total_quantized_steps)
  return total_quantized_steps_;
}
void NoteSequence::set_total_quantized_steps(::google::protobuf::int64 value) {
  
  total_quantized_steps_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.total_quantized_steps)
}

// repeated .tensorflow.magenta.NoteSequence.PitchBend pitch_bends = 10;
int NoteSequence::pitch_bends_size() const {
  return pitch_bends_.size();
}
void NoteSequence::clear_pitch_bends() {
  pitch_bends_.Clear();
}
const ::tensorflow::magenta::NoteSequence_PitchBend& NoteSequence::pitch_bends(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.pitch_bends)
  return pitch_bends_.Get(index);
}
::tensorflow::magenta::NoteSequence_PitchBend* NoteSequence::mutable_pitch_bends(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.pitch_bends)
  return pitch_bends_.Mutable(index);
}
::tensorflow::magenta::NoteSequence_PitchBend* NoteSequence::add_pitch_bends() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.pitch_bends)
  return pitch_bends_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PitchBend >*
NoteSequence::mutable_pitch_bends() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.pitch_bends)
  return &pitch_bends_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PitchBend >&
NoteSequence::pitch_bends() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.pitch_bends)
  return pitch_bends_;
}

// repeated .tensorflow.magenta.NoteSequence.ControlChange control_changes = 11;
int NoteSequence::control_changes_size() const {
  return control_changes_.size();
}
void NoteSequence::clear_control_changes() {
  control_changes_.Clear();
}
const ::tensorflow::magenta::NoteSequence_ControlChange& NoteSequence::control_changes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.control_changes)
  return control_changes_.Get(index);
}
::tensorflow::magenta::NoteSequence_ControlChange* NoteSequence::mutable_control_changes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.control_changes)
  return control_changes_.Mutable(index);
}
::tensorflow::magenta::NoteSequence_ControlChange* NoteSequence::add_control_changes() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.control_changes)
  return control_changes_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_ControlChange >*
NoteSequence::mutable_control_changes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.control_changes)
  return &control_changes_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_ControlChange >&
NoteSequence::control_changes() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.control_changes)
  return control_changes_;
}

// repeated .tensorflow.magenta.NoteSequence.PartInfo part_infos = 12;
int NoteSequence::part_infos_size() const {
  return part_infos_.size();
}
void NoteSequence::clear_part_infos() {
  part_infos_.Clear();
}
const ::tensorflow::magenta::NoteSequence_PartInfo& NoteSequence::part_infos(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.part_infos)
  return part_infos_.Get(index);
}
::tensorflow::magenta::NoteSequence_PartInfo* NoteSequence::mutable_part_infos(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.part_infos)
  return part_infos_.Mutable(index);
}
::tensorflow::magenta::NoteSequence_PartInfo* NoteSequence::add_part_infos() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.part_infos)
  return part_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PartInfo >*
NoteSequence::mutable_part_infos() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.part_infos)
  return &part_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PartInfo >&
NoteSequence::part_infos() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.part_infos)
  return part_infos_;
}

// .tensorflow.magenta.NoteSequence.SourceInfo source_info = 13;
bool NoteSequence::has_source_info() const {
  return this != internal_default_instance() && source_info_ != NULL;
}
void NoteSequence::clear_source_info() {
  if (GetArenaNoVirtual() == NULL && source_info_ != NULL) delete source_info_;
  source_info_ = NULL;
}
const ::tensorflow::magenta::NoteSequence_SourceInfo& NoteSequence::source_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.source_info)
  return source_info_ != NULL ? *source_info_
                         : *::tensorflow::magenta::NoteSequence_SourceInfo::internal_default_instance();
}
::tensorflow::magenta::NoteSequence_SourceInfo* NoteSequence::mutable_source_info() {
  
  if (source_info_ == NULL) {
    source_info_ = new ::tensorflow::magenta::NoteSequence_SourceInfo;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.source_info)
  return source_info_;
}
::tensorflow::magenta::NoteSequence_SourceInfo* NoteSequence::release_source_info() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.source_info)
  
  ::tensorflow::magenta::NoteSequence_SourceInfo* temp = source_info_;
  source_info_ = NULL;
  return temp;
}
void NoteSequence::set_allocated_source_info(::tensorflow::magenta::NoteSequence_SourceInfo* source_info) {
  delete source_info_;
  source_info_ = source_info;
  if (source_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.source_info)
}

// repeated .tensorflow.magenta.NoteSequence.TextAnnotation text_annotations = 14;
int NoteSequence::text_annotations_size() const {
  return text_annotations_.size();
}
void NoteSequence::clear_text_annotations() {
  text_annotations_.Clear();
}
const ::tensorflow::magenta::NoteSequence_TextAnnotation& NoteSequence::text_annotations(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.text_annotations)
  return text_annotations_.Get(index);
}
::tensorflow::magenta::NoteSequence_TextAnnotation* NoteSequence::mutable_text_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.text_annotations)
  return text_annotations_.Mutable(index);
}
::tensorflow::magenta::NoteSequence_TextAnnotation* NoteSequence::add_text_annotations() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.text_annotations)
  return text_annotations_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TextAnnotation >*
NoteSequence::mutable_text_annotations() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.text_annotations)
  return &text_annotations_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TextAnnotation >&
NoteSequence::text_annotations() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.text_annotations)
  return text_annotations_;
}

// .tensorflow.magenta.NoteSequence.QuantizationInfo quantization_info = 15;
bool NoteSequence::has_quantization_info() const {
  return this != internal_default_instance() && quantization_info_ != NULL;
}
void NoteSequence::clear_quantization_info() {
  if (GetArenaNoVirtual() == NULL && quantization_info_ != NULL) delete quantization_info_;
  quantization_info_ = NULL;
}
const ::tensorflow::magenta::NoteSequence_QuantizationInfo& NoteSequence::quantization_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.quantization_info)
  return quantization_info_ != NULL ? *quantization_info_
                         : *::tensorflow::magenta::NoteSequence_QuantizationInfo::internal_default_instance();
}
::tensorflow::magenta::NoteSequence_QuantizationInfo* NoteSequence::mutable_quantization_info() {
  
  if (quantization_info_ == NULL) {
    quantization_info_ = new ::tensorflow::magenta::NoteSequence_QuantizationInfo;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.quantization_info)
  return quantization_info_;
}
::tensorflow::magenta::NoteSequence_QuantizationInfo* NoteSequence::release_quantization_info() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.quantization_info)
  
  ::tensorflow::magenta::NoteSequence_QuantizationInfo* temp = quantization_info_;
  quantization_info_ = NULL;
  return temp;
}
void NoteSequence::set_allocated_quantization_info(::tensorflow::magenta::NoteSequence_QuantizationInfo* quantization_info) {
  delete quantization_info_;
  quantization_info_ = quantization_info;
  if (quantization_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.quantization_info)
}

// .tensorflow.magenta.NoteSequence.SubsequenceInfo subsequence_info = 17;
bool NoteSequence::has_subsequence_info() const {
  return this != internal_default_instance() && subsequence_info_ != NULL;
}
void NoteSequence::clear_subsequence_info() {
  if (GetArenaNoVirtual() == NULL && subsequence_info_ != NULL) delete subsequence_info_;
  subsequence_info_ = NULL;
}
const ::tensorflow::magenta::NoteSequence_SubsequenceInfo& NoteSequence::subsequence_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.subsequence_info)
  return subsequence_info_ != NULL ? *subsequence_info_
                         : *::tensorflow::magenta::NoteSequence_SubsequenceInfo::internal_default_instance();
}
::tensorflow::magenta::NoteSequence_SubsequenceInfo* NoteSequence::mutable_subsequence_info() {
  
  if (subsequence_info_ == NULL) {
    subsequence_info_ = new ::tensorflow::magenta::NoteSequence_SubsequenceInfo;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.subsequence_info)
  return subsequence_info_;
}
::tensorflow::magenta::NoteSequence_SubsequenceInfo* NoteSequence::release_subsequence_info() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.subsequence_info)
  
  ::tensorflow::magenta::NoteSequence_SubsequenceInfo* temp = subsequence_info_;
  subsequence_info_ = NULL;
  return temp;
}
void NoteSequence::set_allocated_subsequence_info(::tensorflow::magenta::NoteSequence_SubsequenceInfo* subsequence_info) {
  delete subsequence_info_;
  subsequence_info_ = subsequence_info;
  if (subsequence_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.subsequence_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace magenta
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
