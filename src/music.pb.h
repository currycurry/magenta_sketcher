// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: music.proto

#ifndef PROTOBUF_music_2eproto__INCLUDED
#define PROTOBUF_music_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace tensorflow {
namespace magenta {
class NoteSequence;
class NoteSequenceDefaultTypeInternal;
extern NoteSequenceDefaultTypeInternal _NoteSequence_default_instance_;
class NoteSequence_ControlChange;
class NoteSequence_ControlChangeDefaultTypeInternal;
extern NoteSequence_ControlChangeDefaultTypeInternal _NoteSequence_ControlChange_default_instance_;
class NoteSequence_KeySignature;
class NoteSequence_KeySignatureDefaultTypeInternal;
extern NoteSequence_KeySignatureDefaultTypeInternal _NoteSequence_KeySignature_default_instance_;
class NoteSequence_Note;
class NoteSequence_NoteDefaultTypeInternal;
extern NoteSequence_NoteDefaultTypeInternal _NoteSequence_Note_default_instance_;
class NoteSequence_PartInfo;
class NoteSequence_PartInfoDefaultTypeInternal;
extern NoteSequence_PartInfoDefaultTypeInternal _NoteSequence_PartInfo_default_instance_;
class NoteSequence_PitchBend;
class NoteSequence_PitchBendDefaultTypeInternal;
extern NoteSequence_PitchBendDefaultTypeInternal _NoteSequence_PitchBend_default_instance_;
class NoteSequence_QuantizationInfo;
class NoteSequence_QuantizationInfoDefaultTypeInternal;
extern NoteSequence_QuantizationInfoDefaultTypeInternal _NoteSequence_QuantizationInfo_default_instance_;
class NoteSequence_SourceInfo;
class NoteSequence_SourceInfoDefaultTypeInternal;
extern NoteSequence_SourceInfoDefaultTypeInternal _NoteSequence_SourceInfo_default_instance_;
class NoteSequence_SubsequenceInfo;
class NoteSequence_SubsequenceInfoDefaultTypeInternal;
extern NoteSequence_SubsequenceInfoDefaultTypeInternal _NoteSequence_SubsequenceInfo_default_instance_;
class NoteSequence_Tempo;
class NoteSequence_TempoDefaultTypeInternal;
extern NoteSequence_TempoDefaultTypeInternal _NoteSequence_Tempo_default_instance_;
class NoteSequence_TextAnnotation;
class NoteSequence_TextAnnotationDefaultTypeInternal;
extern NoteSequence_TextAnnotationDefaultTypeInternal _NoteSequence_TextAnnotation_default_instance_;
class NoteSequence_TimeSignature;
class NoteSequence_TimeSignatureDefaultTypeInternal;
extern NoteSequence_TimeSignatureDefaultTypeInternal _NoteSequence_TimeSignature_default_instance_;
}  // namespace magenta
}  // namespace tensorflow

namespace tensorflow {
namespace magenta {

namespace protobuf_music_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_music_2eproto

enum NoteSequence_KeySignature_Key {
  NoteSequence_KeySignature_Key_C = 0,
  NoteSequence_KeySignature_Key_C_SHARP = 1,
  NoteSequence_KeySignature_Key_D_FLAT = 1,
  NoteSequence_KeySignature_Key_D = 2,
  NoteSequence_KeySignature_Key_D_SHARP = 3,
  NoteSequence_KeySignature_Key_E_FLAT = 3,
  NoteSequence_KeySignature_Key_E = 4,
  NoteSequence_KeySignature_Key_F = 5,
  NoteSequence_KeySignature_Key_F_SHARP = 6,
  NoteSequence_KeySignature_Key_G_FLAT = 6,
  NoteSequence_KeySignature_Key_G = 7,
  NoteSequence_KeySignature_Key_G_SHARP = 8,
  NoteSequence_KeySignature_Key_A_FLAT = 8,
  NoteSequence_KeySignature_Key_A = 9,
  NoteSequence_KeySignature_Key_A_SHARP = 10,
  NoteSequence_KeySignature_Key_B_FLAT = 10,
  NoteSequence_KeySignature_Key_B = 11,
  NoteSequence_KeySignature_Key_NoteSequence_KeySignature_Key_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NoteSequence_KeySignature_Key_NoteSequence_KeySignature_Key_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NoteSequence_KeySignature_Key_IsValid(int value);
const NoteSequence_KeySignature_Key NoteSequence_KeySignature_Key_Key_MIN = NoteSequence_KeySignature_Key_C;
const NoteSequence_KeySignature_Key NoteSequence_KeySignature_Key_Key_MAX = NoteSequence_KeySignature_Key_B;
const int NoteSequence_KeySignature_Key_Key_ARRAYSIZE = NoteSequence_KeySignature_Key_Key_MAX + 1;

const ::google::protobuf::EnumDescriptor* NoteSequence_KeySignature_Key_descriptor();
inline const ::std::string& NoteSequence_KeySignature_Key_Name(NoteSequence_KeySignature_Key value) {
  return ::google::protobuf::internal::NameOfEnum(
    NoteSequence_KeySignature_Key_descriptor(), value);
}
inline bool NoteSequence_KeySignature_Key_Parse(
    const ::std::string& name, NoteSequence_KeySignature_Key* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NoteSequence_KeySignature_Key>(
    NoteSequence_KeySignature_Key_descriptor(), name, value);
}
enum NoteSequence_KeySignature_Mode {
  NoteSequence_KeySignature_Mode_MAJOR = 0,
  NoteSequence_KeySignature_Mode_MINOR = 1,
  NoteSequence_KeySignature_Mode_NOT_SPECIFIED = 2,
  NoteSequence_KeySignature_Mode_NoteSequence_KeySignature_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NoteSequence_KeySignature_Mode_NoteSequence_KeySignature_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NoteSequence_KeySignature_Mode_IsValid(int value);
const NoteSequence_KeySignature_Mode NoteSequence_KeySignature_Mode_Mode_MIN = NoteSequence_KeySignature_Mode_MAJOR;
const NoteSequence_KeySignature_Mode NoteSequence_KeySignature_Mode_Mode_MAX = NoteSequence_KeySignature_Mode_NOT_SPECIFIED;
const int NoteSequence_KeySignature_Mode_Mode_ARRAYSIZE = NoteSequence_KeySignature_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* NoteSequence_KeySignature_Mode_descriptor();
inline const ::std::string& NoteSequence_KeySignature_Mode_Name(NoteSequence_KeySignature_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    NoteSequence_KeySignature_Mode_descriptor(), value);
}
inline bool NoteSequence_KeySignature_Mode_Parse(
    const ::std::string& name, NoteSequence_KeySignature_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NoteSequence_KeySignature_Mode>(
    NoteSequence_KeySignature_Mode_descriptor(), name, value);
}
enum NoteSequence_SourceInfo_SourceType {
  NoteSequence_SourceInfo_SourceType_UNKNOWN_SOURCE_TYPE = 0,
  NoteSequence_SourceInfo_SourceType_SCORE_BASED = 1,
  NoteSequence_SourceInfo_SourceType_PERFORMANCE_BASED = 2,
  NoteSequence_SourceInfo_SourceType_NoteSequence_SourceInfo_SourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NoteSequence_SourceInfo_SourceType_NoteSequence_SourceInfo_SourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NoteSequence_SourceInfo_SourceType_IsValid(int value);
const NoteSequence_SourceInfo_SourceType NoteSequence_SourceInfo_SourceType_SourceType_MIN = NoteSequence_SourceInfo_SourceType_UNKNOWN_SOURCE_TYPE;
const NoteSequence_SourceInfo_SourceType NoteSequence_SourceInfo_SourceType_SourceType_MAX = NoteSequence_SourceInfo_SourceType_PERFORMANCE_BASED;
const int NoteSequence_SourceInfo_SourceType_SourceType_ARRAYSIZE = NoteSequence_SourceInfo_SourceType_SourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NoteSequence_SourceInfo_SourceType_descriptor();
inline const ::std::string& NoteSequence_SourceInfo_SourceType_Name(NoteSequence_SourceInfo_SourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NoteSequence_SourceInfo_SourceType_descriptor(), value);
}
inline bool NoteSequence_SourceInfo_SourceType_Parse(
    const ::std::string& name, NoteSequence_SourceInfo_SourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NoteSequence_SourceInfo_SourceType>(
    NoteSequence_SourceInfo_SourceType_descriptor(), name, value);
}
enum NoteSequence_SourceInfo_EncodingType {
  NoteSequence_SourceInfo_EncodingType_UNKNOWN_ENCODING_TYPE = 0,
  NoteSequence_SourceInfo_EncodingType_MUSIC_XML = 1,
  NoteSequence_SourceInfo_EncodingType_ABC = 2,
  NoteSequence_SourceInfo_EncodingType_MIDI = 3,
  NoteSequence_SourceInfo_EncodingType_MUSICNET = 4,
  NoteSequence_SourceInfo_EncodingType_NoteSequence_SourceInfo_EncodingType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NoteSequence_SourceInfo_EncodingType_NoteSequence_SourceInfo_EncodingType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NoteSequence_SourceInfo_EncodingType_IsValid(int value);
const NoteSequence_SourceInfo_EncodingType NoteSequence_SourceInfo_EncodingType_EncodingType_MIN = NoteSequence_SourceInfo_EncodingType_UNKNOWN_ENCODING_TYPE;
const NoteSequence_SourceInfo_EncodingType NoteSequence_SourceInfo_EncodingType_EncodingType_MAX = NoteSequence_SourceInfo_EncodingType_MUSICNET;
const int NoteSequence_SourceInfo_EncodingType_EncodingType_ARRAYSIZE = NoteSequence_SourceInfo_EncodingType_EncodingType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NoteSequence_SourceInfo_EncodingType_descriptor();
inline const ::std::string& NoteSequence_SourceInfo_EncodingType_Name(NoteSequence_SourceInfo_EncodingType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NoteSequence_SourceInfo_EncodingType_descriptor(), value);
}
inline bool NoteSequence_SourceInfo_EncodingType_Parse(
    const ::std::string& name, NoteSequence_SourceInfo_EncodingType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NoteSequence_SourceInfo_EncodingType>(
    NoteSequence_SourceInfo_EncodingType_descriptor(), name, value);
}
enum NoteSequence_SourceInfo_Parser {
  NoteSequence_SourceInfo_Parser_UNKNOWN_PARSER = 0,
  NoteSequence_SourceInfo_Parser_MUSIC21 = 1,
  NoteSequence_SourceInfo_Parser_PRETTY_MIDI = 2,
  NoteSequence_SourceInfo_Parser_MAGENTA_MUSIC_XML = 3,
  NoteSequence_SourceInfo_Parser_MAGENTA_MUSICNET = 4,
  NoteSequence_SourceInfo_Parser_NoteSequence_SourceInfo_Parser_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NoteSequence_SourceInfo_Parser_NoteSequence_SourceInfo_Parser_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NoteSequence_SourceInfo_Parser_IsValid(int value);
const NoteSequence_SourceInfo_Parser NoteSequence_SourceInfo_Parser_Parser_MIN = NoteSequence_SourceInfo_Parser_UNKNOWN_PARSER;
const NoteSequence_SourceInfo_Parser NoteSequence_SourceInfo_Parser_Parser_MAX = NoteSequence_SourceInfo_Parser_MAGENTA_MUSICNET;
const int NoteSequence_SourceInfo_Parser_Parser_ARRAYSIZE = NoteSequence_SourceInfo_Parser_Parser_MAX + 1;

const ::google::protobuf::EnumDescriptor* NoteSequence_SourceInfo_Parser_descriptor();
inline const ::std::string& NoteSequence_SourceInfo_Parser_Name(NoteSequence_SourceInfo_Parser value) {
  return ::google::protobuf::internal::NameOfEnum(
    NoteSequence_SourceInfo_Parser_descriptor(), value);
}
inline bool NoteSequence_SourceInfo_Parser_Parse(
    const ::std::string& name, NoteSequence_SourceInfo_Parser* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NoteSequence_SourceInfo_Parser>(
    NoteSequence_SourceInfo_Parser_descriptor(), name, value);
}
enum NoteSequence_TextAnnotation_TextAnnotationType {
  NoteSequence_TextAnnotation_TextAnnotationType_UNKNOWN = 0,
  NoteSequence_TextAnnotation_TextAnnotationType_CHORD_SYMBOL = 1,
  NoteSequence_TextAnnotation_TextAnnotationType_NoteSequence_TextAnnotation_TextAnnotationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NoteSequence_TextAnnotation_TextAnnotationType_NoteSequence_TextAnnotation_TextAnnotationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NoteSequence_TextAnnotation_TextAnnotationType_IsValid(int value);
const NoteSequence_TextAnnotation_TextAnnotationType NoteSequence_TextAnnotation_TextAnnotationType_TextAnnotationType_MIN = NoteSequence_TextAnnotation_TextAnnotationType_UNKNOWN;
const NoteSequence_TextAnnotation_TextAnnotationType NoteSequence_TextAnnotation_TextAnnotationType_TextAnnotationType_MAX = NoteSequence_TextAnnotation_TextAnnotationType_CHORD_SYMBOL;
const int NoteSequence_TextAnnotation_TextAnnotationType_TextAnnotationType_ARRAYSIZE = NoteSequence_TextAnnotation_TextAnnotationType_TextAnnotationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NoteSequence_TextAnnotation_TextAnnotationType_descriptor();
inline const ::std::string& NoteSequence_TextAnnotation_TextAnnotationType_Name(NoteSequence_TextAnnotation_TextAnnotationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NoteSequence_TextAnnotation_TextAnnotationType_descriptor(), value);
}
inline bool NoteSequence_TextAnnotation_TextAnnotationType_Parse(
    const ::std::string& name, NoteSequence_TextAnnotation_TextAnnotationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NoteSequence_TextAnnotation_TextAnnotationType>(
    NoteSequence_TextAnnotation_TextAnnotationType_descriptor(), name, value);
}
enum NoteSequence_PitchName {
  NoteSequence_PitchName_UNKNOWN_PITCH_NAME = 0,
  NoteSequence_PitchName_F_FLAT_FLAT = 1,
  NoteSequence_PitchName_C_FLAT_FLAT = 2,
  NoteSequence_PitchName_G_FLAT_FLAT = 3,
  NoteSequence_PitchName_D_FLAT_FLAT = 4,
  NoteSequence_PitchName_A_FLAT_FLAT = 5,
  NoteSequence_PitchName_E_FLAT_FLAT = 6,
  NoteSequence_PitchName_B_FLAT_FLAT = 7,
  NoteSequence_PitchName_F_FLAT = 8,
  NoteSequence_PitchName_C_FLAT = 9,
  NoteSequence_PitchName_G_FLAT = 10,
  NoteSequence_PitchName_D_FLAT = 11,
  NoteSequence_PitchName_A_FLAT = 12,
  NoteSequence_PitchName_E_FLAT = 13,
  NoteSequence_PitchName_B_FLAT = 14,
  NoteSequence_PitchName_F = 15,
  NoteSequence_PitchName_C = 16,
  NoteSequence_PitchName_G = 17,
  NoteSequence_PitchName_D = 18,
  NoteSequence_PitchName_A = 19,
  NoteSequence_PitchName_E = 20,
  NoteSequence_PitchName_B = 21,
  NoteSequence_PitchName_F_SHARP = 22,
  NoteSequence_PitchName_C_SHARP = 23,
  NoteSequence_PitchName_G_SHARP = 24,
  NoteSequence_PitchName_D_SHARP = 25,
  NoteSequence_PitchName_A_SHARP = 26,
  NoteSequence_PitchName_E_SHARP = 27,
  NoteSequence_PitchName_B_SHARP = 28,
  NoteSequence_PitchName_F_SHARP_SHARP = 29,
  NoteSequence_PitchName_C_SHARP_SHARP = 30,
  NoteSequence_PitchName_G_SHARP_SHARP = 31,
  NoteSequence_PitchName_D_SHARP_SHARP = 32,
  NoteSequence_PitchName_A_SHARP_SHARP = 33,
  NoteSequence_PitchName_E_SHARP_SHARP = 34,
  NoteSequence_PitchName_B_SHARP_SHARP = 35,
  NoteSequence_PitchName_NoteSequence_PitchName_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NoteSequence_PitchName_NoteSequence_PitchName_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NoteSequence_PitchName_IsValid(int value);
const NoteSequence_PitchName NoteSequence_PitchName_PitchName_MIN = NoteSequence_PitchName_UNKNOWN_PITCH_NAME;
const NoteSequence_PitchName NoteSequence_PitchName_PitchName_MAX = NoteSequence_PitchName_B_SHARP_SHARP;
const int NoteSequence_PitchName_PitchName_ARRAYSIZE = NoteSequence_PitchName_PitchName_MAX + 1;

const ::google::protobuf::EnumDescriptor* NoteSequence_PitchName_descriptor();
inline const ::std::string& NoteSequence_PitchName_Name(NoteSequence_PitchName value) {
  return ::google::protobuf::internal::NameOfEnum(
    NoteSequence_PitchName_descriptor(), value);
}
inline bool NoteSequence_PitchName_Parse(
    const ::std::string& name, NoteSequence_PitchName* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NoteSequence_PitchName>(
    NoteSequence_PitchName_descriptor(), name, value);
}
// ===================================================================

class NoteSequence_Note : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.NoteSequence.Note) */ {
 public:
  NoteSequence_Note();
  virtual ~NoteSequence_Note();

  NoteSequence_Note(const NoteSequence_Note& from);

  inline NoteSequence_Note& operator=(const NoteSequence_Note& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteSequence_Note& default_instance();

  static inline const NoteSequence_Note* internal_default_instance() {
    return reinterpret_cast<const NoteSequence_Note*>(
               &_NoteSequence_Note_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NoteSequence_Note* other);

  // implements Message ----------------------------------------------

  inline NoteSequence_Note* New() const PROTOBUF_FINAL { return New(NULL); }

  NoteSequence_Note* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoteSequence_Note& from);
  void MergeFrom(const NoteSequence_Note& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoteSequence_Note* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 pitch = 1;
  void clear_pitch();
  static const int kPitchFieldNumber = 1;
  ::google::protobuf::int32 pitch() const;
  void set_pitch(::google::protobuf::int32 value);

  // int32 velocity = 2;
  void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  ::google::protobuf::int32 velocity() const;
  void set_velocity(::google::protobuf::int32 value);

  // double start_time = 3;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 3;
  double start_time() const;
  void set_start_time(double value);

  // double end_time = 4;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  double end_time() const;
  void set_end_time(double value);

  // int32 numerator = 5;
  void clear_numerator();
  static const int kNumeratorFieldNumber = 5;
  ::google::protobuf::int32 numerator() const;
  void set_numerator(::google::protobuf::int32 value);

  // int32 denominator = 6;
  void clear_denominator();
  static const int kDenominatorFieldNumber = 6;
  ::google::protobuf::int32 denominator() const;
  void set_denominator(::google::protobuf::int32 value);

  // int32 instrument = 7;
  void clear_instrument();
  static const int kInstrumentFieldNumber = 7;
  ::google::protobuf::int32 instrument() const;
  void set_instrument(::google::protobuf::int32 value);

  // int32 program = 8;
  void clear_program();
  static const int kProgramFieldNumber = 8;
  ::google::protobuf::int32 program() const;
  void set_program(::google::protobuf::int32 value);

  // bool is_drum = 9;
  void clear_is_drum();
  static const int kIsDrumFieldNumber = 9;
  bool is_drum() const;
  void set_is_drum(bool value);

  // int32 part = 10;
  void clear_part();
  static const int kPartFieldNumber = 10;
  ::google::protobuf::int32 part() const;
  void set_part(::google::protobuf::int32 value);

  // .tensorflow.magenta.NoteSequence.PitchName pitch_name = 11;
  void clear_pitch_name();
  static const int kPitchNameFieldNumber = 11;
  ::tensorflow::magenta::NoteSequence_PitchName pitch_name() const;
  void set_pitch_name(::tensorflow::magenta::NoteSequence_PitchName value);

  // int32 voice = 12;
  void clear_voice();
  static const int kVoiceFieldNumber = 12;
  ::google::protobuf::int32 voice() const;
  void set_voice(::google::protobuf::int32 value);

  // int64 quantized_start_step = 13;
  void clear_quantized_start_step();
  static const int kQuantizedStartStepFieldNumber = 13;
  ::google::protobuf::int64 quantized_start_step() const;
  void set_quantized_start_step(::google::protobuf::int64 value);

  // int64 quantized_end_step = 14;
  void clear_quantized_end_step();
  static const int kQuantizedEndStepFieldNumber = 14;
  ::google::protobuf::int64 quantized_end_step() const;
  void set_quantized_end_step(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.NoteSequence.Note)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 pitch_;
  ::google::protobuf::int32 velocity_;
  double start_time_;
  double end_time_;
  ::google::protobuf::int32 numerator_;
  ::google::protobuf::int32 denominator_;
  ::google::protobuf::int32 instrument_;
  ::google::protobuf::int32 program_;
  bool is_drum_;
  ::google::protobuf::int32 part_;
  int pitch_name_;
  ::google::protobuf::int32 voice_;
  ::google::protobuf::int64 quantized_start_step_;
  ::google::protobuf::int64 quantized_end_step_;
  mutable int _cached_size_;
  friend struct protobuf_music_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoteSequence_TimeSignature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.NoteSequence.TimeSignature) */ {
 public:
  NoteSequence_TimeSignature();
  virtual ~NoteSequence_TimeSignature();

  NoteSequence_TimeSignature(const NoteSequence_TimeSignature& from);

  inline NoteSequence_TimeSignature& operator=(const NoteSequence_TimeSignature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteSequence_TimeSignature& default_instance();

  static inline const NoteSequence_TimeSignature* internal_default_instance() {
    return reinterpret_cast<const NoteSequence_TimeSignature*>(
               &_NoteSequence_TimeSignature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(NoteSequence_TimeSignature* other);

  // implements Message ----------------------------------------------

  inline NoteSequence_TimeSignature* New() const PROTOBUF_FINAL { return New(NULL); }

  NoteSequence_TimeSignature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoteSequence_TimeSignature& from);
  void MergeFrom(const NoteSequence_TimeSignature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoteSequence_TimeSignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // int32 numerator = 2;
  void clear_numerator();
  static const int kNumeratorFieldNumber = 2;
  ::google::protobuf::int32 numerator() const;
  void set_numerator(::google::protobuf::int32 value);

  // int32 denominator = 3;
  void clear_denominator();
  static const int kDenominatorFieldNumber = 3;
  ::google::protobuf::int32 denominator() const;
  void set_denominator(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.NoteSequence.TimeSignature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double time_;
  ::google::protobuf::int32 numerator_;
  ::google::protobuf::int32 denominator_;
  mutable int _cached_size_;
  friend struct protobuf_music_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoteSequence_KeySignature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.NoteSequence.KeySignature) */ {
 public:
  NoteSequence_KeySignature();
  virtual ~NoteSequence_KeySignature();

  NoteSequence_KeySignature(const NoteSequence_KeySignature& from);

  inline NoteSequence_KeySignature& operator=(const NoteSequence_KeySignature& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteSequence_KeySignature& default_instance();

  static inline const NoteSequence_KeySignature* internal_default_instance() {
    return reinterpret_cast<const NoteSequence_KeySignature*>(
               &_NoteSequence_KeySignature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NoteSequence_KeySignature* other);

  // implements Message ----------------------------------------------

  inline NoteSequence_KeySignature* New() const PROTOBUF_FINAL { return New(NULL); }

  NoteSequence_KeySignature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoteSequence_KeySignature& from);
  void MergeFrom(const NoteSequence_KeySignature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoteSequence_KeySignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NoteSequence_KeySignature_Key Key;
  static const Key C =
    NoteSequence_KeySignature_Key_C;
  static const Key C_SHARP =
    NoteSequence_KeySignature_Key_C_SHARP;
  static const Key D_FLAT =
    NoteSequence_KeySignature_Key_D_FLAT;
  static const Key D =
    NoteSequence_KeySignature_Key_D;
  static const Key D_SHARP =
    NoteSequence_KeySignature_Key_D_SHARP;
  static const Key E_FLAT =
    NoteSequence_KeySignature_Key_E_FLAT;
  static const Key E =
    NoteSequence_KeySignature_Key_E;
  static const Key F =
    NoteSequence_KeySignature_Key_F;
  static const Key F_SHARP =
    NoteSequence_KeySignature_Key_F_SHARP;
  static const Key G_FLAT =
    NoteSequence_KeySignature_Key_G_FLAT;
  static const Key G =
    NoteSequence_KeySignature_Key_G;
  static const Key G_SHARP =
    NoteSequence_KeySignature_Key_G_SHARP;
  static const Key A_FLAT =
    NoteSequence_KeySignature_Key_A_FLAT;
  static const Key A =
    NoteSequence_KeySignature_Key_A;
  static const Key A_SHARP =
    NoteSequence_KeySignature_Key_A_SHARP;
  static const Key B_FLAT =
    NoteSequence_KeySignature_Key_B_FLAT;
  static const Key B =
    NoteSequence_KeySignature_Key_B;
  static inline bool Key_IsValid(int value) {
    return NoteSequence_KeySignature_Key_IsValid(value);
  }
  static const Key Key_MIN =
    NoteSequence_KeySignature_Key_Key_MIN;
  static const Key Key_MAX =
    NoteSequence_KeySignature_Key_Key_MAX;
  static const int Key_ARRAYSIZE =
    NoteSequence_KeySignature_Key_Key_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Key_descriptor() {
    return NoteSequence_KeySignature_Key_descriptor();
  }
  static inline const ::std::string& Key_Name(Key value) {
    return NoteSequence_KeySignature_Key_Name(value);
  }
  static inline bool Key_Parse(const ::std::string& name,
      Key* value) {
    return NoteSequence_KeySignature_Key_Parse(name, value);
  }

  typedef NoteSequence_KeySignature_Mode Mode;
  static const Mode MAJOR =
    NoteSequence_KeySignature_Mode_MAJOR;
  static const Mode MINOR =
    NoteSequence_KeySignature_Mode_MINOR;
  static const Mode NOT_SPECIFIED =
    NoteSequence_KeySignature_Mode_NOT_SPECIFIED;
  static inline bool Mode_IsValid(int value) {
    return NoteSequence_KeySignature_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    NoteSequence_KeySignature_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    NoteSequence_KeySignature_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    NoteSequence_KeySignature_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return NoteSequence_KeySignature_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return NoteSequence_KeySignature_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return NoteSequence_KeySignature_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // .tensorflow.magenta.NoteSequence.KeySignature.Key key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  ::tensorflow::magenta::NoteSequence_KeySignature_Key key() const;
  void set_key(::tensorflow::magenta::NoteSequence_KeySignature_Key value);

  // .tensorflow.magenta.NoteSequence.KeySignature.Mode mode = 3;
  void clear_mode();
  static const int kModeFieldNumber = 3;
  ::tensorflow::magenta::NoteSequence_KeySignature_Mode mode() const;
  void set_mode(::tensorflow::magenta::NoteSequence_KeySignature_Mode value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.NoteSequence.KeySignature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double time_;
  int key_;
  int mode_;
  mutable int _cached_size_;
  friend struct protobuf_music_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoteSequence_Tempo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.NoteSequence.Tempo) */ {
 public:
  NoteSequence_Tempo();
  virtual ~NoteSequence_Tempo();

  NoteSequence_Tempo(const NoteSequence_Tempo& from);

  inline NoteSequence_Tempo& operator=(const NoteSequence_Tempo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteSequence_Tempo& default_instance();

  static inline const NoteSequence_Tempo* internal_default_instance() {
    return reinterpret_cast<const NoteSequence_Tempo*>(
               &_NoteSequence_Tempo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(NoteSequence_Tempo* other);

  // implements Message ----------------------------------------------

  inline NoteSequence_Tempo* New() const PROTOBUF_FINAL { return New(NULL); }

  NoteSequence_Tempo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoteSequence_Tempo& from);
  void MergeFrom(const NoteSequence_Tempo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoteSequence_Tempo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // double qpm = 2;
  void clear_qpm();
  static const int kQpmFieldNumber = 2;
  double qpm() const;
  void set_qpm(double value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.NoteSequence.Tempo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double time_;
  double qpm_;
  mutable int _cached_size_;
  friend struct protobuf_music_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoteSequence_PitchBend : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.NoteSequence.PitchBend) */ {
 public:
  NoteSequence_PitchBend();
  virtual ~NoteSequence_PitchBend();

  NoteSequence_PitchBend(const NoteSequence_PitchBend& from);

  inline NoteSequence_PitchBend& operator=(const NoteSequence_PitchBend& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteSequence_PitchBend& default_instance();

  static inline const NoteSequence_PitchBend* internal_default_instance() {
    return reinterpret_cast<const NoteSequence_PitchBend*>(
               &_NoteSequence_PitchBend_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(NoteSequence_PitchBend* other);

  // implements Message ----------------------------------------------

  inline NoteSequence_PitchBend* New() const PROTOBUF_FINAL { return New(NULL); }

  NoteSequence_PitchBend* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoteSequence_PitchBend& from);
  void MergeFrom(const NoteSequence_PitchBend& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoteSequence_PitchBend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // int32 bend = 2;
  void clear_bend();
  static const int kBendFieldNumber = 2;
  ::google::protobuf::int32 bend() const;
  void set_bend(::google::protobuf::int32 value);

  // int32 instrument = 3;
  void clear_instrument();
  static const int kInstrumentFieldNumber = 3;
  ::google::protobuf::int32 instrument() const;
  void set_instrument(::google::protobuf::int32 value);

  // int32 program = 4;
  void clear_program();
  static const int kProgramFieldNumber = 4;
  ::google::protobuf::int32 program() const;
  void set_program(::google::protobuf::int32 value);

  // bool is_drum = 5;
  void clear_is_drum();
  static const int kIsDrumFieldNumber = 5;
  bool is_drum() const;
  void set_is_drum(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.NoteSequence.PitchBend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double time_;
  ::google::protobuf::int32 bend_;
  ::google::protobuf::int32 instrument_;
  ::google::protobuf::int32 program_;
  bool is_drum_;
  mutable int _cached_size_;
  friend struct protobuf_music_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoteSequence_ControlChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.NoteSequence.ControlChange) */ {
 public:
  NoteSequence_ControlChange();
  virtual ~NoteSequence_ControlChange();

  NoteSequence_ControlChange(const NoteSequence_ControlChange& from);

  inline NoteSequence_ControlChange& operator=(const NoteSequence_ControlChange& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteSequence_ControlChange& default_instance();

  static inline const NoteSequence_ControlChange* internal_default_instance() {
    return reinterpret_cast<const NoteSequence_ControlChange*>(
               &_NoteSequence_ControlChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(NoteSequence_ControlChange* other);

  // implements Message ----------------------------------------------

  inline NoteSequence_ControlChange* New() const PROTOBUF_FINAL { return New(NULL); }

  NoteSequence_ControlChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoteSequence_ControlChange& from);
  void MergeFrom(const NoteSequence_ControlChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoteSequence_ControlChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // int32 control_number = 2;
  void clear_control_number();
  static const int kControlNumberFieldNumber = 2;
  ::google::protobuf::int32 control_number() const;
  void set_control_number(::google::protobuf::int32 value);

  // int32 control_value = 3;
  void clear_control_value();
  static const int kControlValueFieldNumber = 3;
  ::google::protobuf::int32 control_value() const;
  void set_control_value(::google::protobuf::int32 value);

  // int32 instrument = 4;
  void clear_instrument();
  static const int kInstrumentFieldNumber = 4;
  ::google::protobuf::int32 instrument() const;
  void set_instrument(::google::protobuf::int32 value);

  // int32 program = 5;
  void clear_program();
  static const int kProgramFieldNumber = 5;
  ::google::protobuf::int32 program() const;
  void set_program(::google::protobuf::int32 value);

  // bool is_drum = 6;
  void clear_is_drum();
  static const int kIsDrumFieldNumber = 6;
  bool is_drum() const;
  void set_is_drum(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.NoteSequence.ControlChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double time_;
  ::google::protobuf::int32 control_number_;
  ::google::protobuf::int32 control_value_;
  ::google::protobuf::int32 instrument_;
  ::google::protobuf::int32 program_;
  bool is_drum_;
  mutable int _cached_size_;
  friend struct protobuf_music_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoteSequence_PartInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.NoteSequence.PartInfo) */ {
 public:
  NoteSequence_PartInfo();
  virtual ~NoteSequence_PartInfo();

  NoteSequence_PartInfo(const NoteSequence_PartInfo& from);

  inline NoteSequence_PartInfo& operator=(const NoteSequence_PartInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteSequence_PartInfo& default_instance();

  static inline const NoteSequence_PartInfo* internal_default_instance() {
    return reinterpret_cast<const NoteSequence_PartInfo*>(
               &_NoteSequence_PartInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(NoteSequence_PartInfo* other);

  // implements Message ----------------------------------------------

  inline NoteSequence_PartInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  NoteSequence_PartInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoteSequence_PartInfo& from);
  void MergeFrom(const NoteSequence_PartInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoteSequence_PartInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 part = 1;
  void clear_part();
  static const int kPartFieldNumber = 1;
  ::google::protobuf::int32 part() const;
  void set_part(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.NoteSequence.PartInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 part_;
  mutable int _cached_size_;
  friend struct protobuf_music_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoteSequence_SourceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.NoteSequence.SourceInfo) */ {
 public:
  NoteSequence_SourceInfo();
  virtual ~NoteSequence_SourceInfo();

  NoteSequence_SourceInfo(const NoteSequence_SourceInfo& from);

  inline NoteSequence_SourceInfo& operator=(const NoteSequence_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteSequence_SourceInfo& default_instance();

  static inline const NoteSequence_SourceInfo* internal_default_instance() {
    return reinterpret_cast<const NoteSequence_SourceInfo*>(
               &_NoteSequence_SourceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(NoteSequence_SourceInfo* other);

  // implements Message ----------------------------------------------

  inline NoteSequence_SourceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  NoteSequence_SourceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoteSequence_SourceInfo& from);
  void MergeFrom(const NoteSequence_SourceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoteSequence_SourceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NoteSequence_SourceInfo_SourceType SourceType;
  static const SourceType UNKNOWN_SOURCE_TYPE =
    NoteSequence_SourceInfo_SourceType_UNKNOWN_SOURCE_TYPE;
  static const SourceType SCORE_BASED =
    NoteSequence_SourceInfo_SourceType_SCORE_BASED;
  static const SourceType PERFORMANCE_BASED =
    NoteSequence_SourceInfo_SourceType_PERFORMANCE_BASED;
  static inline bool SourceType_IsValid(int value) {
    return NoteSequence_SourceInfo_SourceType_IsValid(value);
  }
  static const SourceType SourceType_MIN =
    NoteSequence_SourceInfo_SourceType_SourceType_MIN;
  static const SourceType SourceType_MAX =
    NoteSequence_SourceInfo_SourceType_SourceType_MAX;
  static const int SourceType_ARRAYSIZE =
    NoteSequence_SourceInfo_SourceType_SourceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SourceType_descriptor() {
    return NoteSequence_SourceInfo_SourceType_descriptor();
  }
  static inline const ::std::string& SourceType_Name(SourceType value) {
    return NoteSequence_SourceInfo_SourceType_Name(value);
  }
  static inline bool SourceType_Parse(const ::std::string& name,
      SourceType* value) {
    return NoteSequence_SourceInfo_SourceType_Parse(name, value);
  }

  typedef NoteSequence_SourceInfo_EncodingType EncodingType;
  static const EncodingType UNKNOWN_ENCODING_TYPE =
    NoteSequence_SourceInfo_EncodingType_UNKNOWN_ENCODING_TYPE;
  static const EncodingType MUSIC_XML =
    NoteSequence_SourceInfo_EncodingType_MUSIC_XML;
  static const EncodingType ABC =
    NoteSequence_SourceInfo_EncodingType_ABC;
  static const EncodingType MIDI =
    NoteSequence_SourceInfo_EncodingType_MIDI;
  static const EncodingType MUSICNET =
    NoteSequence_SourceInfo_EncodingType_MUSICNET;
  static inline bool EncodingType_IsValid(int value) {
    return NoteSequence_SourceInfo_EncodingType_IsValid(value);
  }
  static const EncodingType EncodingType_MIN =
    NoteSequence_SourceInfo_EncodingType_EncodingType_MIN;
  static const EncodingType EncodingType_MAX =
    NoteSequence_SourceInfo_EncodingType_EncodingType_MAX;
  static const int EncodingType_ARRAYSIZE =
    NoteSequence_SourceInfo_EncodingType_EncodingType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EncodingType_descriptor() {
    return NoteSequence_SourceInfo_EncodingType_descriptor();
  }
  static inline const ::std::string& EncodingType_Name(EncodingType value) {
    return NoteSequence_SourceInfo_EncodingType_Name(value);
  }
  static inline bool EncodingType_Parse(const ::std::string& name,
      EncodingType* value) {
    return NoteSequence_SourceInfo_EncodingType_Parse(name, value);
  }

  typedef NoteSequence_SourceInfo_Parser Parser;
  static const Parser UNKNOWN_PARSER =
    NoteSequence_SourceInfo_Parser_UNKNOWN_PARSER;
  static const Parser MUSIC21 =
    NoteSequence_SourceInfo_Parser_MUSIC21;
  static const Parser PRETTY_MIDI =
    NoteSequence_SourceInfo_Parser_PRETTY_MIDI;
  static const Parser MAGENTA_MUSIC_XML =
    NoteSequence_SourceInfo_Parser_MAGENTA_MUSIC_XML;
  static const Parser MAGENTA_MUSICNET =
    NoteSequence_SourceInfo_Parser_MAGENTA_MUSICNET;
  static inline bool Parser_IsValid(int value) {
    return NoteSequence_SourceInfo_Parser_IsValid(value);
  }
  static const Parser Parser_MIN =
    NoteSequence_SourceInfo_Parser_Parser_MIN;
  static const Parser Parser_MAX =
    NoteSequence_SourceInfo_Parser_Parser_MAX;
  static const int Parser_ARRAYSIZE =
    NoteSequence_SourceInfo_Parser_Parser_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Parser_descriptor() {
    return NoteSequence_SourceInfo_Parser_descriptor();
  }
  static inline const ::std::string& Parser_Name(Parser value) {
    return NoteSequence_SourceInfo_Parser_Name(value);
  }
  static inline bool Parser_Parse(const ::std::string& name,
      Parser* value) {
    return NoteSequence_SourceInfo_Parser_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .tensorflow.magenta.NoteSequence.SourceInfo.SourceType source_type = 1;
  void clear_source_type();
  static const int kSourceTypeFieldNumber = 1;
  ::tensorflow::magenta::NoteSequence_SourceInfo_SourceType source_type() const;
  void set_source_type(::tensorflow::magenta::NoteSequence_SourceInfo_SourceType value);

  // .tensorflow.magenta.NoteSequence.SourceInfo.EncodingType encoding_type = 2;
  void clear_encoding_type();
  static const int kEncodingTypeFieldNumber = 2;
  ::tensorflow::magenta::NoteSequence_SourceInfo_EncodingType encoding_type() const;
  void set_encoding_type(::tensorflow::magenta::NoteSequence_SourceInfo_EncodingType value);

  // .tensorflow.magenta.NoteSequence.SourceInfo.Parser parser = 3;
  void clear_parser();
  static const int kParserFieldNumber = 3;
  ::tensorflow::magenta::NoteSequence_SourceInfo_Parser parser() const;
  void set_parser(::tensorflow::magenta::NoteSequence_SourceInfo_Parser value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.NoteSequence.SourceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int source_type_;
  int encoding_type_;
  int parser_;
  mutable int _cached_size_;
  friend struct protobuf_music_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoteSequence_TextAnnotation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.NoteSequence.TextAnnotation) */ {
 public:
  NoteSequence_TextAnnotation();
  virtual ~NoteSequence_TextAnnotation();

  NoteSequence_TextAnnotation(const NoteSequence_TextAnnotation& from);

  inline NoteSequence_TextAnnotation& operator=(const NoteSequence_TextAnnotation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteSequence_TextAnnotation& default_instance();

  static inline const NoteSequence_TextAnnotation* internal_default_instance() {
    return reinterpret_cast<const NoteSequence_TextAnnotation*>(
               &_NoteSequence_TextAnnotation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(NoteSequence_TextAnnotation* other);

  // implements Message ----------------------------------------------

  inline NoteSequence_TextAnnotation* New() const PROTOBUF_FINAL { return New(NULL); }

  NoteSequence_TextAnnotation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoteSequence_TextAnnotation& from);
  void MergeFrom(const NoteSequence_TextAnnotation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoteSequence_TextAnnotation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NoteSequence_TextAnnotation_TextAnnotationType TextAnnotationType;
  static const TextAnnotationType UNKNOWN =
    NoteSequence_TextAnnotation_TextAnnotationType_UNKNOWN;
  static const TextAnnotationType CHORD_SYMBOL =
    NoteSequence_TextAnnotation_TextAnnotationType_CHORD_SYMBOL;
  static inline bool TextAnnotationType_IsValid(int value) {
    return NoteSequence_TextAnnotation_TextAnnotationType_IsValid(value);
  }
  static const TextAnnotationType TextAnnotationType_MIN =
    NoteSequence_TextAnnotation_TextAnnotationType_TextAnnotationType_MIN;
  static const TextAnnotationType TextAnnotationType_MAX =
    NoteSequence_TextAnnotation_TextAnnotationType_TextAnnotationType_MAX;
  static const int TextAnnotationType_ARRAYSIZE =
    NoteSequence_TextAnnotation_TextAnnotationType_TextAnnotationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TextAnnotationType_descriptor() {
    return NoteSequence_TextAnnotation_TextAnnotationType_descriptor();
  }
  static inline const ::std::string& TextAnnotationType_Name(TextAnnotationType value) {
    return NoteSequence_TextAnnotation_TextAnnotationType_Name(value);
  }
  static inline bool TextAnnotationType_Parse(const ::std::string& name,
      TextAnnotationType* value) {
    return NoteSequence_TextAnnotation_TextAnnotationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string text = 2;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // double time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  double time() const;
  void set_time(double value);

  // int64 quantized_step = 4;
  void clear_quantized_step();
  static const int kQuantizedStepFieldNumber = 4;
  ::google::protobuf::int64 quantized_step() const;
  void set_quantized_step(::google::protobuf::int64 value);

  // .tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType annotation_type = 3;
  void clear_annotation_type();
  static const int kAnnotationTypeFieldNumber = 3;
  ::tensorflow::magenta::NoteSequence_TextAnnotation_TextAnnotationType annotation_type() const;
  void set_annotation_type(::tensorflow::magenta::NoteSequence_TextAnnotation_TextAnnotationType value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.NoteSequence.TextAnnotation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  double time_;
  ::google::protobuf::int64 quantized_step_;
  int annotation_type_;
  mutable int _cached_size_;
  friend struct protobuf_music_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoteSequence_QuantizationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.NoteSequence.QuantizationInfo) */ {
 public:
  NoteSequence_QuantizationInfo();
  virtual ~NoteSequence_QuantizationInfo();

  NoteSequence_QuantizationInfo(const NoteSequence_QuantizationInfo& from);

  inline NoteSequence_QuantizationInfo& operator=(const NoteSequence_QuantizationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteSequence_QuantizationInfo& default_instance();

  enum ResolutionCase {
    kStepsPerQuarter = 1,
    kStepsPerSecond = 2,
    RESOLUTION_NOT_SET = 0,
  };

  static inline const NoteSequence_QuantizationInfo* internal_default_instance() {
    return reinterpret_cast<const NoteSequence_QuantizationInfo*>(
               &_NoteSequence_QuantizationInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(NoteSequence_QuantizationInfo* other);

  // implements Message ----------------------------------------------

  inline NoteSequence_QuantizationInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  NoteSequence_QuantizationInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoteSequence_QuantizationInfo& from);
  void MergeFrom(const NoteSequence_QuantizationInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoteSequence_QuantizationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 steps_per_quarter = 1;
  private:
  bool has_steps_per_quarter() const;
  public:
  void clear_steps_per_quarter();
  static const int kStepsPerQuarterFieldNumber = 1;
  ::google::protobuf::int32 steps_per_quarter() const;
  void set_steps_per_quarter(::google::protobuf::int32 value);

  // int32 steps_per_second = 2;
  private:
  bool has_steps_per_second() const;
  public:
  void clear_steps_per_second();
  static const int kStepsPerSecondFieldNumber = 2;
  ::google::protobuf::int32 steps_per_second() const;
  void set_steps_per_second(::google::protobuf::int32 value);

  ResolutionCase resolution_case() const;
  // @@protoc_insertion_point(class_scope:tensorflow.magenta.NoteSequence.QuantizationInfo)
 private:
  void set_has_steps_per_quarter();
  void set_has_steps_per_second();

  inline bool has_resolution() const;
  void clear_resolution();
  inline void clear_has_resolution();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ResolutionUnion {
    ResolutionUnion() {}
    ::google::protobuf::int32 steps_per_quarter_;
    ::google::protobuf::int32 steps_per_second_;
  } resolution_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_music_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoteSequence_SubsequenceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.NoteSequence.SubsequenceInfo) */ {
 public:
  NoteSequence_SubsequenceInfo();
  virtual ~NoteSequence_SubsequenceInfo();

  NoteSequence_SubsequenceInfo(const NoteSequence_SubsequenceInfo& from);

  inline NoteSequence_SubsequenceInfo& operator=(const NoteSequence_SubsequenceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteSequence_SubsequenceInfo& default_instance();

  static inline const NoteSequence_SubsequenceInfo* internal_default_instance() {
    return reinterpret_cast<const NoteSequence_SubsequenceInfo*>(
               &_NoteSequence_SubsequenceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(NoteSequence_SubsequenceInfo* other);

  // implements Message ----------------------------------------------

  inline NoteSequence_SubsequenceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  NoteSequence_SubsequenceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoteSequence_SubsequenceInfo& from);
  void MergeFrom(const NoteSequence_SubsequenceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoteSequence_SubsequenceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double start_time_offset = 1;
  void clear_start_time_offset();
  static const int kStartTimeOffsetFieldNumber = 1;
  double start_time_offset() const;
  void set_start_time_offset(double value);

  // double end_time_offset = 2;
  void clear_end_time_offset();
  static const int kEndTimeOffsetFieldNumber = 2;
  double end_time_offset() const;
  void set_end_time_offset(double value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.NoteSequence.SubsequenceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double start_time_offset_;
  double end_time_offset_;
  mutable int _cached_size_;
  friend struct protobuf_music_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NoteSequence : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.NoteSequence) */ {
 public:
  NoteSequence();
  virtual ~NoteSequence();

  NoteSequence(const NoteSequence& from);

  inline NoteSequence& operator=(const NoteSequence& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoteSequence& default_instance();

  static inline const NoteSequence* internal_default_instance() {
    return reinterpret_cast<const NoteSequence*>(
               &_NoteSequence_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(NoteSequence* other);

  // implements Message ----------------------------------------------

  inline NoteSequence* New() const PROTOBUF_FINAL { return New(NULL); }

  NoteSequence* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NoteSequence& from);
  void MergeFrom(const NoteSequence& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NoteSequence* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NoteSequence_Note Note;
  typedef NoteSequence_TimeSignature TimeSignature;
  typedef NoteSequence_KeySignature KeySignature;
  typedef NoteSequence_Tempo Tempo;
  typedef NoteSequence_PitchBend PitchBend;
  typedef NoteSequence_ControlChange ControlChange;
  typedef NoteSequence_PartInfo PartInfo;
  typedef NoteSequence_SourceInfo SourceInfo;
  typedef NoteSequence_TextAnnotation TextAnnotation;
  typedef NoteSequence_QuantizationInfo QuantizationInfo;
  typedef NoteSequence_SubsequenceInfo SubsequenceInfo;

  typedef NoteSequence_PitchName PitchName;
  static const PitchName UNKNOWN_PITCH_NAME =
    NoteSequence_PitchName_UNKNOWN_PITCH_NAME;
  static const PitchName F_FLAT_FLAT =
    NoteSequence_PitchName_F_FLAT_FLAT;
  static const PitchName C_FLAT_FLAT =
    NoteSequence_PitchName_C_FLAT_FLAT;
  static const PitchName G_FLAT_FLAT =
    NoteSequence_PitchName_G_FLAT_FLAT;
  static const PitchName D_FLAT_FLAT =
    NoteSequence_PitchName_D_FLAT_FLAT;
  static const PitchName A_FLAT_FLAT =
    NoteSequence_PitchName_A_FLAT_FLAT;
  static const PitchName E_FLAT_FLAT =
    NoteSequence_PitchName_E_FLAT_FLAT;
  static const PitchName B_FLAT_FLAT =
    NoteSequence_PitchName_B_FLAT_FLAT;
  static const PitchName F_FLAT =
    NoteSequence_PitchName_F_FLAT;
  static const PitchName C_FLAT =
    NoteSequence_PitchName_C_FLAT;
  static const PitchName G_FLAT =
    NoteSequence_PitchName_G_FLAT;
  static const PitchName D_FLAT =
    NoteSequence_PitchName_D_FLAT;
  static const PitchName A_FLAT =
    NoteSequence_PitchName_A_FLAT;
  static const PitchName E_FLAT =
    NoteSequence_PitchName_E_FLAT;
  static const PitchName B_FLAT =
    NoteSequence_PitchName_B_FLAT;
  static const PitchName F =
    NoteSequence_PitchName_F;
  static const PitchName C =
    NoteSequence_PitchName_C;
  static const PitchName G =
    NoteSequence_PitchName_G;
  static const PitchName D =
    NoteSequence_PitchName_D;
  static const PitchName A =
    NoteSequence_PitchName_A;
  static const PitchName E =
    NoteSequence_PitchName_E;
  static const PitchName B =
    NoteSequence_PitchName_B;
  static const PitchName F_SHARP =
    NoteSequence_PitchName_F_SHARP;
  static const PitchName C_SHARP =
    NoteSequence_PitchName_C_SHARP;
  static const PitchName G_SHARP =
    NoteSequence_PitchName_G_SHARP;
  static const PitchName D_SHARP =
    NoteSequence_PitchName_D_SHARP;
  static const PitchName A_SHARP =
    NoteSequence_PitchName_A_SHARP;
  static const PitchName E_SHARP =
    NoteSequence_PitchName_E_SHARP;
  static const PitchName B_SHARP =
    NoteSequence_PitchName_B_SHARP;
  static const PitchName F_SHARP_SHARP =
    NoteSequence_PitchName_F_SHARP_SHARP;
  static const PitchName C_SHARP_SHARP =
    NoteSequence_PitchName_C_SHARP_SHARP;
  static const PitchName G_SHARP_SHARP =
    NoteSequence_PitchName_G_SHARP_SHARP;
  static const PitchName D_SHARP_SHARP =
    NoteSequence_PitchName_D_SHARP_SHARP;
  static const PitchName A_SHARP_SHARP =
    NoteSequence_PitchName_A_SHARP_SHARP;
  static const PitchName E_SHARP_SHARP =
    NoteSequence_PitchName_E_SHARP_SHARP;
  static const PitchName B_SHARP_SHARP =
    NoteSequence_PitchName_B_SHARP_SHARP;
  static inline bool PitchName_IsValid(int value) {
    return NoteSequence_PitchName_IsValid(value);
  }
  static const PitchName PitchName_MIN =
    NoteSequence_PitchName_PitchName_MIN;
  static const PitchName PitchName_MAX =
    NoteSequence_PitchName_PitchName_MAX;
  static const int PitchName_ARRAYSIZE =
    NoteSequence_PitchName_PitchName_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PitchName_descriptor() {
    return NoteSequence_PitchName_descriptor();
  }
  static inline const ::std::string& PitchName_Name(PitchName value) {
    return NoteSequence_PitchName_Name(value);
  }
  static inline bool PitchName_Parse(const ::std::string& name,
      PitchName* value) {
    return NoteSequence_PitchName_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .tensorflow.magenta.NoteSequence.TimeSignature time_signatures = 5;
  int time_signatures_size() const;
  void clear_time_signatures();
  static const int kTimeSignaturesFieldNumber = 5;
  const ::tensorflow::magenta::NoteSequence_TimeSignature& time_signatures(int index) const;
  ::tensorflow::magenta::NoteSequence_TimeSignature* mutable_time_signatures(int index);
  ::tensorflow::magenta::NoteSequence_TimeSignature* add_time_signatures();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TimeSignature >*
      mutable_time_signatures();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TimeSignature >&
      time_signatures() const;

  // repeated .tensorflow.magenta.NoteSequence.KeySignature key_signatures = 6;
  int key_signatures_size() const;
  void clear_key_signatures();
  static const int kKeySignaturesFieldNumber = 6;
  const ::tensorflow::magenta::NoteSequence_KeySignature& key_signatures(int index) const;
  ::tensorflow::magenta::NoteSequence_KeySignature* mutable_key_signatures(int index);
  ::tensorflow::magenta::NoteSequence_KeySignature* add_key_signatures();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_KeySignature >*
      mutable_key_signatures();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_KeySignature >&
      key_signatures() const;

  // repeated .tensorflow.magenta.NoteSequence.Tempo tempos = 7;
  int tempos_size() const;
  void clear_tempos();
  static const int kTemposFieldNumber = 7;
  const ::tensorflow::magenta::NoteSequence_Tempo& tempos(int index) const;
  ::tensorflow::magenta::NoteSequence_Tempo* mutable_tempos(int index);
  ::tensorflow::magenta::NoteSequence_Tempo* add_tempos();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Tempo >*
      mutable_tempos();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Tempo >&
      tempos() const;

  // repeated .tensorflow.magenta.NoteSequence.Note notes = 8;
  int notes_size() const;
  void clear_notes();
  static const int kNotesFieldNumber = 8;
  const ::tensorflow::magenta::NoteSequence_Note& notes(int index) const;
  ::tensorflow::magenta::NoteSequence_Note* mutable_notes(int index);
  ::tensorflow::magenta::NoteSequence_Note* add_notes();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Note >*
      mutable_notes();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Note >&
      notes() const;

  // repeated .tensorflow.magenta.NoteSequence.PitchBend pitch_bends = 10;
  int pitch_bends_size() const;
  void clear_pitch_bends();
  static const int kPitchBendsFieldNumber = 10;
  const ::tensorflow::magenta::NoteSequence_PitchBend& pitch_bends(int index) const;
  ::tensorflow::magenta::NoteSequence_PitchBend* mutable_pitch_bends(int index);
  ::tensorflow::magenta::NoteSequence_PitchBend* add_pitch_bends();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PitchBend >*
      mutable_pitch_bends();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PitchBend >&
      pitch_bends() const;

  // repeated .tensorflow.magenta.NoteSequence.ControlChange control_changes = 11;
  int control_changes_size() const;
  void clear_control_changes();
  static const int kControlChangesFieldNumber = 11;
  const ::tensorflow::magenta::NoteSequence_ControlChange& control_changes(int index) const;
  ::tensorflow::magenta::NoteSequence_ControlChange* mutable_control_changes(int index);
  ::tensorflow::magenta::NoteSequence_ControlChange* add_control_changes();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_ControlChange >*
      mutable_control_changes();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_ControlChange >&
      control_changes() const;

  // repeated .tensorflow.magenta.NoteSequence.PartInfo part_infos = 12;
  int part_infos_size() const;
  void clear_part_infos();
  static const int kPartInfosFieldNumber = 12;
  const ::tensorflow::magenta::NoteSequence_PartInfo& part_infos(int index) const;
  ::tensorflow::magenta::NoteSequence_PartInfo* mutable_part_infos(int index);
  ::tensorflow::magenta::NoteSequence_PartInfo* add_part_infos();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PartInfo >*
      mutable_part_infos();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PartInfo >&
      part_infos() const;

  // repeated .tensorflow.magenta.NoteSequence.TextAnnotation text_annotations = 14;
  int text_annotations_size() const;
  void clear_text_annotations();
  static const int kTextAnnotationsFieldNumber = 14;
  const ::tensorflow::magenta::NoteSequence_TextAnnotation& text_annotations(int index) const;
  ::tensorflow::magenta::NoteSequence_TextAnnotation* mutable_text_annotations(int index);
  ::tensorflow::magenta::NoteSequence_TextAnnotation* add_text_annotations();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TextAnnotation >*
      mutable_text_annotations();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TextAnnotation >&
      text_annotations() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // string collection_name = 3;
  void clear_collection_name();
  static const int kCollectionNameFieldNumber = 3;
  const ::std::string& collection_name() const;
  void set_collection_name(const ::std::string& value);
  #if LANG_CXX11
  void set_collection_name(::std::string&& value);
  #endif
  void set_collection_name(const char* value);
  void set_collection_name(const char* value, size_t size);
  ::std::string* mutable_collection_name();
  ::std::string* release_collection_name();
  void set_allocated_collection_name(::std::string* collection_name);

  // .tensorflow.magenta.NoteSequence.SourceInfo source_info = 13;
  bool has_source_info() const;
  void clear_source_info();
  static const int kSourceInfoFieldNumber = 13;
  const ::tensorflow::magenta::NoteSequence_SourceInfo& source_info() const;
  ::tensorflow::magenta::NoteSequence_SourceInfo* mutable_source_info();
  ::tensorflow::magenta::NoteSequence_SourceInfo* release_source_info();
  void set_allocated_source_info(::tensorflow::magenta::NoteSequence_SourceInfo* source_info);

  // .tensorflow.magenta.NoteSequence.QuantizationInfo quantization_info = 15;
  bool has_quantization_info() const;
  void clear_quantization_info();
  static const int kQuantizationInfoFieldNumber = 15;
  const ::tensorflow::magenta::NoteSequence_QuantizationInfo& quantization_info() const;
  ::tensorflow::magenta::NoteSequence_QuantizationInfo* mutable_quantization_info();
  ::tensorflow::magenta::NoteSequence_QuantizationInfo* release_quantization_info();
  void set_allocated_quantization_info(::tensorflow::magenta::NoteSequence_QuantizationInfo* quantization_info);

  // .tensorflow.magenta.NoteSequence.SubsequenceInfo subsequence_info = 17;
  bool has_subsequence_info() const;
  void clear_subsequence_info();
  static const int kSubsequenceInfoFieldNumber = 17;
  const ::tensorflow::magenta::NoteSequence_SubsequenceInfo& subsequence_info() const;
  ::tensorflow::magenta::NoteSequence_SubsequenceInfo* mutable_subsequence_info();
  ::tensorflow::magenta::NoteSequence_SubsequenceInfo* release_subsequence_info();
  void set_allocated_subsequence_info(::tensorflow::magenta::NoteSequence_SubsequenceInfo* subsequence_info);

  // double total_time = 9;
  void clear_total_time();
  static const int kTotalTimeFieldNumber = 9;
  double total_time() const;
  void set_total_time(double value);

  // int64 total_quantized_steps = 16;
  void clear_total_quantized_steps();
  static const int kTotalQuantizedStepsFieldNumber = 16;
  ::google::protobuf::int64 total_quantized_steps() const;
  void set_total_quantized_steps(::google::protobuf::int64 value);

  // int32 ticks_per_quarter = 4;
  void clear_ticks_per_quarter();
  static const int kTicksPerQuarterFieldNumber = 4;
  ::google::protobuf::int32 ticks_per_quarter() const;
  void set_ticks_per_quarter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.NoteSequence)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TimeSignature > time_signatures_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_KeySignature > key_signatures_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Tempo > tempos_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Note > notes_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PitchBend > pitch_bends_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_ControlChange > control_changes_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PartInfo > part_infos_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TextAnnotation > text_annotations_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr collection_name_;
  ::tensorflow::magenta::NoteSequence_SourceInfo* source_info_;
  ::tensorflow::magenta::NoteSequence_QuantizationInfo* quantization_info_;
  ::tensorflow::magenta::NoteSequence_SubsequenceInfo* subsequence_info_;
  double total_time_;
  ::google::protobuf::int64 total_quantized_steps_;
  ::google::protobuf::int32 ticks_per_quarter_;
  mutable int _cached_size_;
  friend struct protobuf_music_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NoteSequence_Note

// int32 pitch = 1;
inline void NoteSequence_Note::clear_pitch() {
  pitch_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_Note::pitch() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.pitch)
  return pitch_;
}
inline void NoteSequence_Note::set_pitch(::google::protobuf::int32 value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.pitch)
}

// .tensorflow.magenta.NoteSequence.PitchName pitch_name = 11;
inline void NoteSequence_Note::clear_pitch_name() {
  pitch_name_ = 0;
}
inline ::tensorflow::magenta::NoteSequence_PitchName NoteSequence_Note::pitch_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.pitch_name)
  return static_cast< ::tensorflow::magenta::NoteSequence_PitchName >(pitch_name_);
}
inline void NoteSequence_Note::set_pitch_name(::tensorflow::magenta::NoteSequence_PitchName value) {
  
  pitch_name_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.pitch_name)
}

// int32 velocity = 2;
inline void NoteSequence_Note::clear_velocity() {
  velocity_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_Note::velocity() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.velocity)
  return velocity_;
}
inline void NoteSequence_Note::set_velocity(::google::protobuf::int32 value) {
  
  velocity_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.velocity)
}

// double start_time = 3;
inline void NoteSequence_Note::clear_start_time() {
  start_time_ = 0;
}
inline double NoteSequence_Note::start_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.start_time)
  return start_time_;
}
inline void NoteSequence_Note::set_start_time(double value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.start_time)
}

// int64 quantized_start_step = 13;
inline void NoteSequence_Note::clear_quantized_start_step() {
  quantized_start_step_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NoteSequence_Note::quantized_start_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.quantized_start_step)
  return quantized_start_step_;
}
inline void NoteSequence_Note::set_quantized_start_step(::google::protobuf::int64 value) {
  
  quantized_start_step_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.quantized_start_step)
}

// double end_time = 4;
inline void NoteSequence_Note::clear_end_time() {
  end_time_ = 0;
}
inline double NoteSequence_Note::end_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.end_time)
  return end_time_;
}
inline void NoteSequence_Note::set_end_time(double value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.end_time)
}

// int64 quantized_end_step = 14;
inline void NoteSequence_Note::clear_quantized_end_step() {
  quantized_end_step_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NoteSequence_Note::quantized_end_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.quantized_end_step)
  return quantized_end_step_;
}
inline void NoteSequence_Note::set_quantized_end_step(::google::protobuf::int64 value) {
  
  quantized_end_step_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.quantized_end_step)
}

// int32 numerator = 5;
inline void NoteSequence_Note::clear_numerator() {
  numerator_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_Note::numerator() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.numerator)
  return numerator_;
}
inline void NoteSequence_Note::set_numerator(::google::protobuf::int32 value) {
  
  numerator_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.numerator)
}

// int32 denominator = 6;
inline void NoteSequence_Note::clear_denominator() {
  denominator_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_Note::denominator() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.denominator)
  return denominator_;
}
inline void NoteSequence_Note::set_denominator(::google::protobuf::int32 value) {
  
  denominator_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.denominator)
}

// int32 instrument = 7;
inline void NoteSequence_Note::clear_instrument() {
  instrument_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_Note::instrument() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.instrument)
  return instrument_;
}
inline void NoteSequence_Note::set_instrument(::google::protobuf::int32 value) {
  
  instrument_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.instrument)
}

// int32 program = 8;
inline void NoteSequence_Note::clear_program() {
  program_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_Note::program() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.program)
  return program_;
}
inline void NoteSequence_Note::set_program(::google::protobuf::int32 value) {
  
  program_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.program)
}

// bool is_drum = 9;
inline void NoteSequence_Note::clear_is_drum() {
  is_drum_ = false;
}
inline bool NoteSequence_Note::is_drum() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.is_drum)
  return is_drum_;
}
inline void NoteSequence_Note::set_is_drum(bool value) {
  
  is_drum_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.is_drum)
}

// int32 part = 10;
inline void NoteSequence_Note::clear_part() {
  part_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_Note::part() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.part)
  return part_;
}
inline void NoteSequence_Note::set_part(::google::protobuf::int32 value) {
  
  part_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.part)
}

// int32 voice = 12;
inline void NoteSequence_Note::clear_voice() {
  voice_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_Note::voice() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Note.voice)
  return voice_;
}
inline void NoteSequence_Note::set_voice(::google::protobuf::int32 value) {
  
  voice_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Note.voice)
}

// -------------------------------------------------------------------

// NoteSequence_TimeSignature

// double time = 1;
inline void NoteSequence_TimeSignature::clear_time() {
  time_ = 0;
}
inline double NoteSequence_TimeSignature::time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TimeSignature.time)
  return time_;
}
inline void NoteSequence_TimeSignature::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TimeSignature.time)
}

// int32 numerator = 2;
inline void NoteSequence_TimeSignature::clear_numerator() {
  numerator_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_TimeSignature::numerator() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TimeSignature.numerator)
  return numerator_;
}
inline void NoteSequence_TimeSignature::set_numerator(::google::protobuf::int32 value) {
  
  numerator_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TimeSignature.numerator)
}

// int32 denominator = 3;
inline void NoteSequence_TimeSignature::clear_denominator() {
  denominator_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_TimeSignature::denominator() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TimeSignature.denominator)
  return denominator_;
}
inline void NoteSequence_TimeSignature::set_denominator(::google::protobuf::int32 value) {
  
  denominator_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TimeSignature.denominator)
}

// -------------------------------------------------------------------

// NoteSequence_KeySignature

// double time = 1;
inline void NoteSequence_KeySignature::clear_time() {
  time_ = 0;
}
inline double NoteSequence_KeySignature::time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.KeySignature.time)
  return time_;
}
inline void NoteSequence_KeySignature::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.KeySignature.time)
}

// .tensorflow.magenta.NoteSequence.KeySignature.Key key = 2;
inline void NoteSequence_KeySignature::clear_key() {
  key_ = 0;
}
inline ::tensorflow::magenta::NoteSequence_KeySignature_Key NoteSequence_KeySignature::key() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.KeySignature.key)
  return static_cast< ::tensorflow::magenta::NoteSequence_KeySignature_Key >(key_);
}
inline void NoteSequence_KeySignature::set_key(::tensorflow::magenta::NoteSequence_KeySignature_Key value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.KeySignature.key)
}

// .tensorflow.magenta.NoteSequence.KeySignature.Mode mode = 3;
inline void NoteSequence_KeySignature::clear_mode() {
  mode_ = 0;
}
inline ::tensorflow::magenta::NoteSequence_KeySignature_Mode NoteSequence_KeySignature::mode() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.KeySignature.mode)
  return static_cast< ::tensorflow::magenta::NoteSequence_KeySignature_Mode >(mode_);
}
inline void NoteSequence_KeySignature::set_mode(::tensorflow::magenta::NoteSequence_KeySignature_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.KeySignature.mode)
}

// -------------------------------------------------------------------

// NoteSequence_Tempo

// double time = 1;
inline void NoteSequence_Tempo::clear_time() {
  time_ = 0;
}
inline double NoteSequence_Tempo::time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Tempo.time)
  return time_;
}
inline void NoteSequence_Tempo::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Tempo.time)
}

// double qpm = 2;
inline void NoteSequence_Tempo::clear_qpm() {
  qpm_ = 0;
}
inline double NoteSequence_Tempo::qpm() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.Tempo.qpm)
  return qpm_;
}
inline void NoteSequence_Tempo::set_qpm(double value) {
  
  qpm_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.Tempo.qpm)
}

// -------------------------------------------------------------------

// NoteSequence_PitchBend

// double time = 1;
inline void NoteSequence_PitchBend::clear_time() {
  time_ = 0;
}
inline double NoteSequence_PitchBend::time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PitchBend.time)
  return time_;
}
inline void NoteSequence_PitchBend::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PitchBend.time)
}

// int32 bend = 2;
inline void NoteSequence_PitchBend::clear_bend() {
  bend_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_PitchBend::bend() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PitchBend.bend)
  return bend_;
}
inline void NoteSequence_PitchBend::set_bend(::google::protobuf::int32 value) {
  
  bend_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PitchBend.bend)
}

// int32 instrument = 3;
inline void NoteSequence_PitchBend::clear_instrument() {
  instrument_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_PitchBend::instrument() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PitchBend.instrument)
  return instrument_;
}
inline void NoteSequence_PitchBend::set_instrument(::google::protobuf::int32 value) {
  
  instrument_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PitchBend.instrument)
}

// int32 program = 4;
inline void NoteSequence_PitchBend::clear_program() {
  program_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_PitchBend::program() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PitchBend.program)
  return program_;
}
inline void NoteSequence_PitchBend::set_program(::google::protobuf::int32 value) {
  
  program_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PitchBend.program)
}

// bool is_drum = 5;
inline void NoteSequence_PitchBend::clear_is_drum() {
  is_drum_ = false;
}
inline bool NoteSequence_PitchBend::is_drum() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PitchBend.is_drum)
  return is_drum_;
}
inline void NoteSequence_PitchBend::set_is_drum(bool value) {
  
  is_drum_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PitchBend.is_drum)
}

// -------------------------------------------------------------------

// NoteSequence_ControlChange

// double time = 1;
inline void NoteSequence_ControlChange::clear_time() {
  time_ = 0;
}
inline double NoteSequence_ControlChange::time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ControlChange.time)
  return time_;
}
inline void NoteSequence_ControlChange::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ControlChange.time)
}

// int32 control_number = 2;
inline void NoteSequence_ControlChange::clear_control_number() {
  control_number_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_ControlChange::control_number() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ControlChange.control_number)
  return control_number_;
}
inline void NoteSequence_ControlChange::set_control_number(::google::protobuf::int32 value) {
  
  control_number_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ControlChange.control_number)
}

// int32 control_value = 3;
inline void NoteSequence_ControlChange::clear_control_value() {
  control_value_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_ControlChange::control_value() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ControlChange.control_value)
  return control_value_;
}
inline void NoteSequence_ControlChange::set_control_value(::google::protobuf::int32 value) {
  
  control_value_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ControlChange.control_value)
}

// int32 instrument = 4;
inline void NoteSequence_ControlChange::clear_instrument() {
  instrument_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_ControlChange::instrument() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ControlChange.instrument)
  return instrument_;
}
inline void NoteSequence_ControlChange::set_instrument(::google::protobuf::int32 value) {
  
  instrument_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ControlChange.instrument)
}

// int32 program = 5;
inline void NoteSequence_ControlChange::clear_program() {
  program_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_ControlChange::program() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ControlChange.program)
  return program_;
}
inline void NoteSequence_ControlChange::set_program(::google::protobuf::int32 value) {
  
  program_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ControlChange.program)
}

// bool is_drum = 6;
inline void NoteSequence_ControlChange::clear_is_drum() {
  is_drum_ = false;
}
inline bool NoteSequence_ControlChange::is_drum() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ControlChange.is_drum)
  return is_drum_;
}
inline void NoteSequence_ControlChange::set_is_drum(bool value) {
  
  is_drum_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ControlChange.is_drum)
}

// -------------------------------------------------------------------

// NoteSequence_PartInfo

// int32 part = 1;
inline void NoteSequence_PartInfo::clear_part() {
  part_ = 0;
}
inline ::google::protobuf::int32 NoteSequence_PartInfo::part() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PartInfo.part)
  return part_;
}
inline void NoteSequence_PartInfo::set_part(::google::protobuf::int32 value) {
  
  part_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PartInfo.part)
}

// string name = 2;
inline void NoteSequence_PartInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NoteSequence_PartInfo::name() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.PartInfo.name)
  return name_.GetNoArena();
}
inline void NoteSequence_PartInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.PartInfo.name)
}
#if LANG_CXX11
inline void NoteSequence_PartInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.NoteSequence.PartInfo.name)
}
#endif
inline void NoteSequence_PartInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.NoteSequence.PartInfo.name)
}
inline void NoteSequence_PartInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.NoteSequence.PartInfo.name)
}
inline ::std::string* NoteSequence_PartInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.PartInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NoteSequence_PartInfo::release_name() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.PartInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoteSequence_PartInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.PartInfo.name)
}

// -------------------------------------------------------------------

// NoteSequence_SourceInfo

// .tensorflow.magenta.NoteSequence.SourceInfo.SourceType source_type = 1;
inline void NoteSequence_SourceInfo::clear_source_type() {
  source_type_ = 0;
}
inline ::tensorflow::magenta::NoteSequence_SourceInfo_SourceType NoteSequence_SourceInfo::source_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.SourceInfo.source_type)
  return static_cast< ::tensorflow::magenta::NoteSequence_SourceInfo_SourceType >(source_type_);
}
inline void NoteSequence_SourceInfo::set_source_type(::tensorflow::magenta::NoteSequence_SourceInfo_SourceType value) {
  
  source_type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.SourceInfo.source_type)
}

// .tensorflow.magenta.NoteSequence.SourceInfo.EncodingType encoding_type = 2;
inline void NoteSequence_SourceInfo::clear_encoding_type() {
  encoding_type_ = 0;
}
inline ::tensorflow::magenta::NoteSequence_SourceInfo_EncodingType NoteSequence_SourceInfo::encoding_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.SourceInfo.encoding_type)
  return static_cast< ::tensorflow::magenta::NoteSequence_SourceInfo_EncodingType >(encoding_type_);
}
inline void NoteSequence_SourceInfo::set_encoding_type(::tensorflow::magenta::NoteSequence_SourceInfo_EncodingType value) {
  
  encoding_type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.SourceInfo.encoding_type)
}

// .tensorflow.magenta.NoteSequence.SourceInfo.Parser parser = 3;
inline void NoteSequence_SourceInfo::clear_parser() {
  parser_ = 0;
}
inline ::tensorflow::magenta::NoteSequence_SourceInfo_Parser NoteSequence_SourceInfo::parser() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.SourceInfo.parser)
  return static_cast< ::tensorflow::magenta::NoteSequence_SourceInfo_Parser >(parser_);
}
inline void NoteSequence_SourceInfo::set_parser(::tensorflow::magenta::NoteSequence_SourceInfo_Parser value) {
  
  parser_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.SourceInfo.parser)
}

// -------------------------------------------------------------------

// NoteSequence_TextAnnotation

// double time = 1;
inline void NoteSequence_TextAnnotation::clear_time() {
  time_ = 0;
}
inline double NoteSequence_TextAnnotation::time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TextAnnotation.time)
  return time_;
}
inline void NoteSequence_TextAnnotation::set_time(double value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TextAnnotation.time)
}

// int64 quantized_step = 4;
inline void NoteSequence_TextAnnotation::clear_quantized_step() {
  quantized_step_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NoteSequence_TextAnnotation::quantized_step() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TextAnnotation.quantized_step)
  return quantized_step_;
}
inline void NoteSequence_TextAnnotation::set_quantized_step(::google::protobuf::int64 value) {
  
  quantized_step_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TextAnnotation.quantized_step)
}

// string text = 2;
inline void NoteSequence_TextAnnotation::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NoteSequence_TextAnnotation::text() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TextAnnotation.text)
  return text_.GetNoArena();
}
inline void NoteSequence_TextAnnotation::set_text(const ::std::string& value) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TextAnnotation.text)
}
#if LANG_CXX11
inline void NoteSequence_TextAnnotation::set_text(::std::string&& value) {
  
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.NoteSequence.TextAnnotation.text)
}
#endif
inline void NoteSequence_TextAnnotation::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.NoteSequence.TextAnnotation.text)
}
inline void NoteSequence_TextAnnotation::set_text(const char* value, size_t size) {
  
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.NoteSequence.TextAnnotation.text)
}
inline ::std::string* NoteSequence_TextAnnotation::mutable_text() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.TextAnnotation.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NoteSequence_TextAnnotation::release_text() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.TextAnnotation.text)
  
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoteSequence_TextAnnotation::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    
  } else {
    
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.TextAnnotation.text)
}

// .tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType annotation_type = 3;
inline void NoteSequence_TextAnnotation::clear_annotation_type() {
  annotation_type_ = 0;
}
inline ::tensorflow::magenta::NoteSequence_TextAnnotation_TextAnnotationType NoteSequence_TextAnnotation::annotation_type() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.TextAnnotation.annotation_type)
  return static_cast< ::tensorflow::magenta::NoteSequence_TextAnnotation_TextAnnotationType >(annotation_type_);
}
inline void NoteSequence_TextAnnotation::set_annotation_type(::tensorflow::magenta::NoteSequence_TextAnnotation_TextAnnotationType value) {
  
  annotation_type_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.TextAnnotation.annotation_type)
}

// -------------------------------------------------------------------

// NoteSequence_QuantizationInfo

// int32 steps_per_quarter = 1;
inline bool NoteSequence_QuantizationInfo::has_steps_per_quarter() const {
  return resolution_case() == kStepsPerQuarter;
}
inline void NoteSequence_QuantizationInfo::set_has_steps_per_quarter() {
  _oneof_case_[0] = kStepsPerQuarter;
}
inline void NoteSequence_QuantizationInfo::clear_steps_per_quarter() {
  if (has_steps_per_quarter()) {
    resolution_.steps_per_quarter_ = 0;
    clear_has_resolution();
  }
}
inline ::google::protobuf::int32 NoteSequence_QuantizationInfo::steps_per_quarter() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.QuantizationInfo.steps_per_quarter)
  if (has_steps_per_quarter()) {
    return resolution_.steps_per_quarter_;
  }
  return 0;
}
inline void NoteSequence_QuantizationInfo::set_steps_per_quarter(::google::protobuf::int32 value) {
  if (!has_steps_per_quarter()) {
    clear_resolution();
    set_has_steps_per_quarter();
  }
  resolution_.steps_per_quarter_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.QuantizationInfo.steps_per_quarter)
}

// int32 steps_per_second = 2;
inline bool NoteSequence_QuantizationInfo::has_steps_per_second() const {
  return resolution_case() == kStepsPerSecond;
}
inline void NoteSequence_QuantizationInfo::set_has_steps_per_second() {
  _oneof_case_[0] = kStepsPerSecond;
}
inline void NoteSequence_QuantizationInfo::clear_steps_per_second() {
  if (has_steps_per_second()) {
    resolution_.steps_per_second_ = 0;
    clear_has_resolution();
  }
}
inline ::google::protobuf::int32 NoteSequence_QuantizationInfo::steps_per_second() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.QuantizationInfo.steps_per_second)
  if (has_steps_per_second()) {
    return resolution_.steps_per_second_;
  }
  return 0;
}
inline void NoteSequence_QuantizationInfo::set_steps_per_second(::google::protobuf::int32 value) {
  if (!has_steps_per_second()) {
    clear_resolution();
    set_has_steps_per_second();
  }
  resolution_.steps_per_second_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.QuantizationInfo.steps_per_second)
}

inline bool NoteSequence_QuantizationInfo::has_resolution() const {
  return resolution_case() != RESOLUTION_NOT_SET;
}
inline void NoteSequence_QuantizationInfo::clear_has_resolution() {
  _oneof_case_[0] = RESOLUTION_NOT_SET;
}
inline NoteSequence_QuantizationInfo::ResolutionCase NoteSequence_QuantizationInfo::resolution_case() const {
  return NoteSequence_QuantizationInfo::ResolutionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NoteSequence_SubsequenceInfo

// double start_time_offset = 1;
inline void NoteSequence_SubsequenceInfo::clear_start_time_offset() {
  start_time_offset_ = 0;
}
inline double NoteSequence_SubsequenceInfo::start_time_offset() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.SubsequenceInfo.start_time_offset)
  return start_time_offset_;
}
inline void NoteSequence_SubsequenceInfo::set_start_time_offset(double value) {
  
  start_time_offset_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.SubsequenceInfo.start_time_offset)
}

// double end_time_offset = 2;
inline void NoteSequence_SubsequenceInfo::clear_end_time_offset() {
  end_time_offset_ = 0;
}
inline double NoteSequence_SubsequenceInfo::end_time_offset() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.SubsequenceInfo.end_time_offset)
  return end_time_offset_;
}
inline void NoteSequence_SubsequenceInfo::set_end_time_offset(double value) {
  
  end_time_offset_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.SubsequenceInfo.end_time_offset)
}

// -------------------------------------------------------------------

// NoteSequence

// string id = 1;
inline void NoteSequence::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NoteSequence::id() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.id)
  return id_.GetNoArena();
}
inline void NoteSequence::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.id)
}
#if LANG_CXX11
inline void NoteSequence::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.NoteSequence.id)
}
#endif
inline void NoteSequence::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.NoteSequence.id)
}
inline void NoteSequence::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.NoteSequence.id)
}
inline ::std::string* NoteSequence::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NoteSequence::release_id() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoteSequence::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.id)
}

// string filename = 2;
inline void NoteSequence::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NoteSequence::filename() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.filename)
  return filename_.GetNoArena();
}
inline void NoteSequence::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.filename)
}
#if LANG_CXX11
inline void NoteSequence::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.NoteSequence.filename)
}
#endif
inline void NoteSequence::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.NoteSequence.filename)
}
inline void NoteSequence::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.NoteSequence.filename)
}
inline ::std::string* NoteSequence::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NoteSequence::release_filename() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoteSequence::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.filename)
}

// string collection_name = 3;
inline void NoteSequence::clear_collection_name() {
  collection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NoteSequence::collection_name() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.collection_name)
  return collection_name_.GetNoArena();
}
inline void NoteSequence::set_collection_name(const ::std::string& value) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.collection_name)
}
#if LANG_CXX11
inline void NoteSequence::set_collection_name(::std::string&& value) {
  
  collection_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.NoteSequence.collection_name)
}
#endif
inline void NoteSequence::set_collection_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.NoteSequence.collection_name)
}
inline void NoteSequence::set_collection_name(const char* value, size_t size) {
  
  collection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.NoteSequence.collection_name)
}
inline ::std::string* NoteSequence::mutable_collection_name() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.collection_name)
  return collection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NoteSequence::release_collection_name() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.collection_name)
  
  return collection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NoteSequence::set_allocated_collection_name(::std::string* collection_name) {
  if (collection_name != NULL) {
    
  } else {
    
  }
  collection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_name);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.collection_name)
}

// int32 ticks_per_quarter = 4;
inline void NoteSequence::clear_ticks_per_quarter() {
  ticks_per_quarter_ = 0;
}
inline ::google::protobuf::int32 NoteSequence::ticks_per_quarter() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.ticks_per_quarter)
  return ticks_per_quarter_;
}
inline void NoteSequence::set_ticks_per_quarter(::google::protobuf::int32 value) {
  
  ticks_per_quarter_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.ticks_per_quarter)
}

// repeated .tensorflow.magenta.NoteSequence.TimeSignature time_signatures = 5;
inline int NoteSequence::time_signatures_size() const {
  return time_signatures_.size();
}
inline void NoteSequence::clear_time_signatures() {
  time_signatures_.Clear();
}
inline const ::tensorflow::magenta::NoteSequence_TimeSignature& NoteSequence::time_signatures(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.time_signatures)
  return time_signatures_.Get(index);
}
inline ::tensorflow::magenta::NoteSequence_TimeSignature* NoteSequence::mutable_time_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.time_signatures)
  return time_signatures_.Mutable(index);
}
inline ::tensorflow::magenta::NoteSequence_TimeSignature* NoteSequence::add_time_signatures() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.time_signatures)
  return time_signatures_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TimeSignature >*
NoteSequence::mutable_time_signatures() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.time_signatures)
  return &time_signatures_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TimeSignature >&
NoteSequence::time_signatures() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.time_signatures)
  return time_signatures_;
}

// repeated .tensorflow.magenta.NoteSequence.KeySignature key_signatures = 6;
inline int NoteSequence::key_signatures_size() const {
  return key_signatures_.size();
}
inline void NoteSequence::clear_key_signatures() {
  key_signatures_.Clear();
}
inline const ::tensorflow::magenta::NoteSequence_KeySignature& NoteSequence::key_signatures(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.key_signatures)
  return key_signatures_.Get(index);
}
inline ::tensorflow::magenta::NoteSequence_KeySignature* NoteSequence::mutable_key_signatures(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.key_signatures)
  return key_signatures_.Mutable(index);
}
inline ::tensorflow::magenta::NoteSequence_KeySignature* NoteSequence::add_key_signatures() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.key_signatures)
  return key_signatures_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_KeySignature >*
NoteSequence::mutable_key_signatures() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.key_signatures)
  return &key_signatures_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_KeySignature >&
NoteSequence::key_signatures() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.key_signatures)
  return key_signatures_;
}

// repeated .tensorflow.magenta.NoteSequence.Tempo tempos = 7;
inline int NoteSequence::tempos_size() const {
  return tempos_.size();
}
inline void NoteSequence::clear_tempos() {
  tempos_.Clear();
}
inline const ::tensorflow::magenta::NoteSequence_Tempo& NoteSequence::tempos(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.tempos)
  return tempos_.Get(index);
}
inline ::tensorflow::magenta::NoteSequence_Tempo* NoteSequence::mutable_tempos(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.tempos)
  return tempos_.Mutable(index);
}
inline ::tensorflow::magenta::NoteSequence_Tempo* NoteSequence::add_tempos() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.tempos)
  return tempos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Tempo >*
NoteSequence::mutable_tempos() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.tempos)
  return &tempos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Tempo >&
NoteSequence::tempos() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.tempos)
  return tempos_;
}

// repeated .tensorflow.magenta.NoteSequence.Note notes = 8;
inline int NoteSequence::notes_size() const {
  return notes_.size();
}
inline void NoteSequence::clear_notes() {
  notes_.Clear();
}
inline const ::tensorflow::magenta::NoteSequence_Note& NoteSequence::notes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.notes)
  return notes_.Get(index);
}
inline ::tensorflow::magenta::NoteSequence_Note* NoteSequence::mutable_notes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.notes)
  return notes_.Mutable(index);
}
inline ::tensorflow::magenta::NoteSequence_Note* NoteSequence::add_notes() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.notes)
  return notes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Note >*
NoteSequence::mutable_notes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.notes)
  return &notes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_Note >&
NoteSequence::notes() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.notes)
  return notes_;
}

// double total_time = 9;
inline void NoteSequence::clear_total_time() {
  total_time_ = 0;
}
inline double NoteSequence::total_time() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.total_time)
  return total_time_;
}
inline void NoteSequence::set_total_time(double value) {
  
  total_time_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.total_time)
}

// int64 total_quantized_steps = 16;
inline void NoteSequence::clear_total_quantized_steps() {
  total_quantized_steps_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NoteSequence::total_quantized_steps() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.total_quantized_steps)
  return total_quantized_steps_;
}
inline void NoteSequence::set_total_quantized_steps(::google::protobuf::int64 value) {
  
  total_quantized_steps_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.NoteSequence.total_quantized_steps)
}

// repeated .tensorflow.magenta.NoteSequence.PitchBend pitch_bends = 10;
inline int NoteSequence::pitch_bends_size() const {
  return pitch_bends_.size();
}
inline void NoteSequence::clear_pitch_bends() {
  pitch_bends_.Clear();
}
inline const ::tensorflow::magenta::NoteSequence_PitchBend& NoteSequence::pitch_bends(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.pitch_bends)
  return pitch_bends_.Get(index);
}
inline ::tensorflow::magenta::NoteSequence_PitchBend* NoteSequence::mutable_pitch_bends(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.pitch_bends)
  return pitch_bends_.Mutable(index);
}
inline ::tensorflow::magenta::NoteSequence_PitchBend* NoteSequence::add_pitch_bends() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.pitch_bends)
  return pitch_bends_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PitchBend >*
NoteSequence::mutable_pitch_bends() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.pitch_bends)
  return &pitch_bends_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PitchBend >&
NoteSequence::pitch_bends() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.pitch_bends)
  return pitch_bends_;
}

// repeated .tensorflow.magenta.NoteSequence.ControlChange control_changes = 11;
inline int NoteSequence::control_changes_size() const {
  return control_changes_.size();
}
inline void NoteSequence::clear_control_changes() {
  control_changes_.Clear();
}
inline const ::tensorflow::magenta::NoteSequence_ControlChange& NoteSequence::control_changes(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.control_changes)
  return control_changes_.Get(index);
}
inline ::tensorflow::magenta::NoteSequence_ControlChange* NoteSequence::mutable_control_changes(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.control_changes)
  return control_changes_.Mutable(index);
}
inline ::tensorflow::magenta::NoteSequence_ControlChange* NoteSequence::add_control_changes() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.control_changes)
  return control_changes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_ControlChange >*
NoteSequence::mutable_control_changes() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.control_changes)
  return &control_changes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_ControlChange >&
NoteSequence::control_changes() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.control_changes)
  return control_changes_;
}

// repeated .tensorflow.magenta.NoteSequence.PartInfo part_infos = 12;
inline int NoteSequence::part_infos_size() const {
  return part_infos_.size();
}
inline void NoteSequence::clear_part_infos() {
  part_infos_.Clear();
}
inline const ::tensorflow::magenta::NoteSequence_PartInfo& NoteSequence::part_infos(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.part_infos)
  return part_infos_.Get(index);
}
inline ::tensorflow::magenta::NoteSequence_PartInfo* NoteSequence::mutable_part_infos(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.part_infos)
  return part_infos_.Mutable(index);
}
inline ::tensorflow::magenta::NoteSequence_PartInfo* NoteSequence::add_part_infos() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.part_infos)
  return part_infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PartInfo >*
NoteSequence::mutable_part_infos() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.part_infos)
  return &part_infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_PartInfo >&
NoteSequence::part_infos() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.part_infos)
  return part_infos_;
}

// .tensorflow.magenta.NoteSequence.SourceInfo source_info = 13;
inline bool NoteSequence::has_source_info() const {
  return this != internal_default_instance() && source_info_ != NULL;
}
inline void NoteSequence::clear_source_info() {
  if (GetArenaNoVirtual() == NULL && source_info_ != NULL) delete source_info_;
  source_info_ = NULL;
}
inline const ::tensorflow::magenta::NoteSequence_SourceInfo& NoteSequence::source_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.source_info)
  return source_info_ != NULL ? *source_info_
                         : *::tensorflow::magenta::NoteSequence_SourceInfo::internal_default_instance();
}
inline ::tensorflow::magenta::NoteSequence_SourceInfo* NoteSequence::mutable_source_info() {
  
  if (source_info_ == NULL) {
    source_info_ = new ::tensorflow::magenta::NoteSequence_SourceInfo;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.source_info)
  return source_info_;
}
inline ::tensorflow::magenta::NoteSequence_SourceInfo* NoteSequence::release_source_info() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.source_info)
  
  ::tensorflow::magenta::NoteSequence_SourceInfo* temp = source_info_;
  source_info_ = NULL;
  return temp;
}
inline void NoteSequence::set_allocated_source_info(::tensorflow::magenta::NoteSequence_SourceInfo* source_info) {
  delete source_info_;
  source_info_ = source_info;
  if (source_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.source_info)
}

// repeated .tensorflow.magenta.NoteSequence.TextAnnotation text_annotations = 14;
inline int NoteSequence::text_annotations_size() const {
  return text_annotations_.size();
}
inline void NoteSequence::clear_text_annotations() {
  text_annotations_.Clear();
}
inline const ::tensorflow::magenta::NoteSequence_TextAnnotation& NoteSequence::text_annotations(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.text_annotations)
  return text_annotations_.Get(index);
}
inline ::tensorflow::magenta::NoteSequence_TextAnnotation* NoteSequence::mutable_text_annotations(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.text_annotations)
  return text_annotations_.Mutable(index);
}
inline ::tensorflow::magenta::NoteSequence_TextAnnotation* NoteSequence::add_text_annotations() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.NoteSequence.text_annotations)
  return text_annotations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TextAnnotation >*
NoteSequence::mutable_text_annotations() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.NoteSequence.text_annotations)
  return &text_annotations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence_TextAnnotation >&
NoteSequence::text_annotations() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.NoteSequence.text_annotations)
  return text_annotations_;
}

// .tensorflow.magenta.NoteSequence.QuantizationInfo quantization_info = 15;
inline bool NoteSequence::has_quantization_info() const {
  return this != internal_default_instance() && quantization_info_ != NULL;
}
inline void NoteSequence::clear_quantization_info() {
  if (GetArenaNoVirtual() == NULL && quantization_info_ != NULL) delete quantization_info_;
  quantization_info_ = NULL;
}
inline const ::tensorflow::magenta::NoteSequence_QuantizationInfo& NoteSequence::quantization_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.quantization_info)
  return quantization_info_ != NULL ? *quantization_info_
                         : *::tensorflow::magenta::NoteSequence_QuantizationInfo::internal_default_instance();
}
inline ::tensorflow::magenta::NoteSequence_QuantizationInfo* NoteSequence::mutable_quantization_info() {
  
  if (quantization_info_ == NULL) {
    quantization_info_ = new ::tensorflow::magenta::NoteSequence_QuantizationInfo;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.quantization_info)
  return quantization_info_;
}
inline ::tensorflow::magenta::NoteSequence_QuantizationInfo* NoteSequence::release_quantization_info() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.quantization_info)
  
  ::tensorflow::magenta::NoteSequence_QuantizationInfo* temp = quantization_info_;
  quantization_info_ = NULL;
  return temp;
}
inline void NoteSequence::set_allocated_quantization_info(::tensorflow::magenta::NoteSequence_QuantizationInfo* quantization_info) {
  delete quantization_info_;
  quantization_info_ = quantization_info;
  if (quantization_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.quantization_info)
}

// .tensorflow.magenta.NoteSequence.SubsequenceInfo subsequence_info = 17;
inline bool NoteSequence::has_subsequence_info() const {
  return this != internal_default_instance() && subsequence_info_ != NULL;
}
inline void NoteSequence::clear_subsequence_info() {
  if (GetArenaNoVirtual() == NULL && subsequence_info_ != NULL) delete subsequence_info_;
  subsequence_info_ = NULL;
}
inline const ::tensorflow::magenta::NoteSequence_SubsequenceInfo& NoteSequence::subsequence_info() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.NoteSequence.subsequence_info)
  return subsequence_info_ != NULL ? *subsequence_info_
                         : *::tensorflow::magenta::NoteSequence_SubsequenceInfo::internal_default_instance();
}
inline ::tensorflow::magenta::NoteSequence_SubsequenceInfo* NoteSequence::mutable_subsequence_info() {
  
  if (subsequence_info_ == NULL) {
    subsequence_info_ = new ::tensorflow::magenta::NoteSequence_SubsequenceInfo;
  }
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.NoteSequence.subsequence_info)
  return subsequence_info_;
}
inline ::tensorflow::magenta::NoteSequence_SubsequenceInfo* NoteSequence::release_subsequence_info() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.NoteSequence.subsequence_info)
  
  ::tensorflow::magenta::NoteSequence_SubsequenceInfo* temp = subsequence_info_;
  subsequence_info_ = NULL;
  return temp;
}
inline void NoteSequence::set_allocated_subsequence_info(::tensorflow::magenta::NoteSequence_SubsequenceInfo* subsequence_info) {
  delete subsequence_info_;
  subsequence_info_ = subsequence_info;
  if (subsequence_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.NoteSequence.subsequence_info)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace magenta
}  // namespace tensorflow

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tensorflow::magenta::NoteSequence_KeySignature_Key> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::magenta::NoteSequence_KeySignature_Key>() {
  return ::tensorflow::magenta::NoteSequence_KeySignature_Key_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::magenta::NoteSequence_KeySignature_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::magenta::NoteSequence_KeySignature_Mode>() {
  return ::tensorflow::magenta::NoteSequence_KeySignature_Mode_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::magenta::NoteSequence_SourceInfo_SourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::magenta::NoteSequence_SourceInfo_SourceType>() {
  return ::tensorflow::magenta::NoteSequence_SourceInfo_SourceType_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::magenta::NoteSequence_SourceInfo_EncodingType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::magenta::NoteSequence_SourceInfo_EncodingType>() {
  return ::tensorflow::magenta::NoteSequence_SourceInfo_EncodingType_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::magenta::NoteSequence_SourceInfo_Parser> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::magenta::NoteSequence_SourceInfo_Parser>() {
  return ::tensorflow::magenta::NoteSequence_SourceInfo_Parser_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::magenta::NoteSequence_TextAnnotation_TextAnnotationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::magenta::NoteSequence_TextAnnotation_TextAnnotationType>() {
  return ::tensorflow::magenta::NoteSequence_TextAnnotation_TextAnnotationType_descriptor();
}
template <> struct is_proto_enum< ::tensorflow::magenta::NoteSequence_PitchName> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tensorflow::magenta::NoteSequence_PitchName>() {
  return ::tensorflow::magenta::NoteSequence_PitchName_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_music_2eproto__INCLUDED
