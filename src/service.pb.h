// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#ifndef PROTOBUF_service_2eproto__INCLUDED
#define PROTOBUF_service_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "music.pb.h"
// @@protoc_insertion_point(includes)
namespace tensorflow {
namespace magenta {
class DecodeRequest;
class DecodeRequestDefaultTypeInternal;
extern DecodeRequestDefaultTypeInternal _DecodeRequest_default_instance_;
class DecodeResponse;
class DecodeResponseDefaultTypeInternal;
extern DecodeResponseDefaultTypeInternal _DecodeResponse_default_instance_;
class EncodeRequest;
class EncodeRequestDefaultTypeInternal;
extern EncodeRequestDefaultTypeInternal _EncodeRequest_default_instance_;
class EncodeResponse;
class EncodeResponseDefaultTypeInternal;
extern EncodeResponseDefaultTypeInternal _EncodeResponse_default_instance_;
class NoteSequence;
class NoteSequenceDefaultTypeInternal;
extern NoteSequenceDefaultTypeInternal _NoteSequence_default_instance_;
class NoteSequence_ControlChange;
class NoteSequence_ControlChangeDefaultTypeInternal;
extern NoteSequence_ControlChangeDefaultTypeInternal _NoteSequence_ControlChange_default_instance_;
class NoteSequence_KeySignature;
class NoteSequence_KeySignatureDefaultTypeInternal;
extern NoteSequence_KeySignatureDefaultTypeInternal _NoteSequence_KeySignature_default_instance_;
class NoteSequence_Note;
class NoteSequence_NoteDefaultTypeInternal;
extern NoteSequence_NoteDefaultTypeInternal _NoteSequence_Note_default_instance_;
class NoteSequence_PartInfo;
class NoteSequence_PartInfoDefaultTypeInternal;
extern NoteSequence_PartInfoDefaultTypeInternal _NoteSequence_PartInfo_default_instance_;
class NoteSequence_PitchBend;
class NoteSequence_PitchBendDefaultTypeInternal;
extern NoteSequence_PitchBendDefaultTypeInternal _NoteSequence_PitchBend_default_instance_;
class NoteSequence_QuantizationInfo;
class NoteSequence_QuantizationInfoDefaultTypeInternal;
extern NoteSequence_QuantizationInfoDefaultTypeInternal _NoteSequence_QuantizationInfo_default_instance_;
class NoteSequence_SourceInfo;
class NoteSequence_SourceInfoDefaultTypeInternal;
extern NoteSequence_SourceInfoDefaultTypeInternal _NoteSequence_SourceInfo_default_instance_;
class NoteSequence_SubsequenceInfo;
class NoteSequence_SubsequenceInfoDefaultTypeInternal;
extern NoteSequence_SubsequenceInfoDefaultTypeInternal _NoteSequence_SubsequenceInfo_default_instance_;
class NoteSequence_Tempo;
class NoteSequence_TempoDefaultTypeInternal;
extern NoteSequence_TempoDefaultTypeInternal _NoteSequence_Tempo_default_instance_;
class NoteSequence_TextAnnotation;
class NoteSequence_TextAnnotationDefaultTypeInternal;
extern NoteSequence_TextAnnotationDefaultTypeInternal _NoteSequence_TextAnnotation_default_instance_;
class NoteSequence_TimeSignature;
class NoteSequence_TimeSignatureDefaultTypeInternal;
extern NoteSequence_TimeSignatureDefaultTypeInternal _NoteSequence_TimeSignature_default_instance_;
class SampleRequest;
class SampleRequestDefaultTypeInternal;
extern SampleRequestDefaultTypeInternal _SampleRequest_default_instance_;
class SampleResponse;
class SampleResponseDefaultTypeInternal;
extern SampleResponseDefaultTypeInternal _SampleResponse_default_instance_;
class Z;
class ZDefaultTypeInternal;
extern ZDefaultTypeInternal _Z_default_instance_;
}  // namespace magenta
}  // namespace tensorflow

namespace tensorflow {
namespace magenta {

namespace protobuf_service_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_service_2eproto

// ===================================================================

class Z : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.Z) */ {
 public:
  Z();
  virtual ~Z();

  Z(const Z& from);

  inline Z& operator=(const Z& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Z& default_instance();

  static inline const Z* internal_default_instance() {
    return reinterpret_cast<const Z*>(
               &_Z_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Z* other);

  // implements Message ----------------------------------------------

  inline Z* New() const PROTOBUF_FINAL { return New(NULL); }

  Z* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Z& from);
  void MergeFrom(const Z& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Z* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float value = 1;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::google::protobuf::RepeatedField< float >&
      value() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.Z)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > value_;
  mutable int _value_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EncodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.EncodeRequest) */ {
 public:
  EncodeRequest();
  virtual ~EncodeRequest();

  EncodeRequest(const EncodeRequest& from);

  inline EncodeRequest& operator=(const EncodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncodeRequest& default_instance();

  static inline const EncodeRequest* internal_default_instance() {
    return reinterpret_cast<const EncodeRequest*>(
               &_EncodeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EncodeRequest* other);

  // implements Message ----------------------------------------------

  inline EncodeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  EncodeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EncodeRequest& from);
  void MergeFrom(const EncodeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EncodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.magenta.NoteSequence sequences = 2;
  int sequences_size() const;
  void clear_sequences();
  static const int kSequencesFieldNumber = 2;
  const ::tensorflow::magenta::NoteSequence& sequences(int index) const;
  ::tensorflow::magenta::NoteSequence* mutable_sequences(int index);
  ::tensorflow::magenta::NoteSequence* add_sequences();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >*
      mutable_sequences();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >&
      sequences() const;

  // string model_config = 1;
  void clear_model_config();
  static const int kModelConfigFieldNumber = 1;
  const ::std::string& model_config() const;
  void set_model_config(const ::std::string& value);
  #if LANG_CXX11
  void set_model_config(::std::string&& value);
  #endif
  void set_model_config(const char* value);
  void set_model_config(const char* value, size_t size);
  ::std::string* mutable_model_config();
  ::std::string* release_model_config();
  void set_allocated_model_config(::std::string* model_config);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.EncodeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence > sequences_;
  ::google::protobuf::internal::ArenaStringPtr model_config_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EncodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.EncodeResponse) */ {
 public:
  EncodeResponse();
  virtual ~EncodeResponse();

  EncodeResponse(const EncodeResponse& from);

  inline EncodeResponse& operator=(const EncodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EncodeResponse& default_instance();

  static inline const EncodeResponse* internal_default_instance() {
    return reinterpret_cast<const EncodeResponse*>(
               &_EncodeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EncodeResponse* other);

  // implements Message ----------------------------------------------

  inline EncodeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  EncodeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EncodeResponse& from);
  void MergeFrom(const EncodeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EncodeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.magenta.Z z = 1;
  int z_size() const;
  void clear_z();
  static const int kZFieldNumber = 1;
  const ::tensorflow::magenta::Z& z(int index) const;
  ::tensorflow::magenta::Z* mutable_z(int index);
  ::tensorflow::magenta::Z* add_z();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z >*
      mutable_z();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z >&
      z() const;

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.EncodeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z > z_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecodeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.DecodeRequest) */ {
 public:
  DecodeRequest();
  virtual ~DecodeRequest();

  DecodeRequest(const DecodeRequest& from);

  inline DecodeRequest& operator=(const DecodeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecodeRequest& default_instance();

  static inline const DecodeRequest* internal_default_instance() {
    return reinterpret_cast<const DecodeRequest*>(
               &_DecodeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DecodeRequest* other);

  // implements Message ----------------------------------------------

  inline DecodeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DecodeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DecodeRequest& from);
  void MergeFrom(const DecodeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DecodeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.magenta.Z z = 2;
  int z_size() const;
  void clear_z();
  static const int kZFieldNumber = 2;
  const ::tensorflow::magenta::Z& z(int index) const;
  ::tensorflow::magenta::Z* mutable_z(int index);
  ::tensorflow::magenta::Z* add_z();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z >*
      mutable_z();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z >&
      z() const;

  // string model_config = 1;
  void clear_model_config();
  static const int kModelConfigFieldNumber = 1;
  const ::std::string& model_config() const;
  void set_model_config(const ::std::string& value);
  #if LANG_CXX11
  void set_model_config(::std::string&& value);
  #endif
  void set_model_config(const char* value);
  void set_model_config(const char* value, size_t size);
  ::std::string* mutable_model_config();
  ::std::string* release_model_config();
  void set_allocated_model_config(::std::string* model_config);

  // double temperature = 4;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 4;
  double temperature() const;
  void set_temperature(double value);

  // int32 length = 3;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.DecodeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z > z_;
  ::google::protobuf::internal::ArenaStringPtr model_config_;
  double temperature_;
  ::google::protobuf::int32 length_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DecodeResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.DecodeResponse) */ {
 public:
  DecodeResponse();
  virtual ~DecodeResponse();

  DecodeResponse(const DecodeResponse& from);

  inline DecodeResponse& operator=(const DecodeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecodeResponse& default_instance();

  static inline const DecodeResponse* internal_default_instance() {
    return reinterpret_cast<const DecodeResponse*>(
               &_DecodeResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DecodeResponse* other);

  // implements Message ----------------------------------------------

  inline DecodeResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DecodeResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DecodeResponse& from);
  void MergeFrom(const DecodeResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DecodeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.magenta.NoteSequence sequences = 1;
  int sequences_size() const;
  void clear_sequences();
  static const int kSequencesFieldNumber = 1;
  const ::tensorflow::magenta::NoteSequence& sequences(int index) const;
  ::tensorflow::magenta::NoteSequence* mutable_sequences(int index);
  ::tensorflow::magenta::NoteSequence* add_sequences();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >*
      mutable_sequences();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >&
      sequences() const;

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.DecodeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence > sequences_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SampleRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.SampleRequest) */ {
 public:
  SampleRequest();
  virtual ~SampleRequest();

  SampleRequest(const SampleRequest& from);

  inline SampleRequest& operator=(const SampleRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleRequest& default_instance();

  static inline const SampleRequest* internal_default_instance() {
    return reinterpret_cast<const SampleRequest*>(
               &_SampleRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SampleRequest* other);

  // implements Message ----------------------------------------------

  inline SampleRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SampleRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SampleRequest& from);
  void MergeFrom(const SampleRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SampleRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string model_config = 1;
  void clear_model_config();
  static const int kModelConfigFieldNumber = 1;
  const ::std::string& model_config() const;
  void set_model_config(const ::std::string& value);
  #if LANG_CXX11
  void set_model_config(::std::string&& value);
  #endif
  void set_model_config(const char* value);
  void set_model_config(const char* value, size_t size);
  ::std::string* mutable_model_config();
  ::std::string* release_model_config();
  void set_allocated_model_config(::std::string* model_config);

  // int32 num_samples = 2;
  void clear_num_samples();
  static const int kNumSamplesFieldNumber = 2;
  ::google::protobuf::int32 num_samples() const;
  void set_num_samples(::google::protobuf::int32 value);

  // int32 length = 3;
  void clear_length();
  static const int kLengthFieldNumber = 3;
  ::google::protobuf::int32 length() const;
  void set_length(::google::protobuf::int32 value);

  // double temperature = 4;
  void clear_temperature();
  static const int kTemperatureFieldNumber = 4;
  double temperature() const;
  void set_temperature(double value);

  // bool same_z = 5;
  void clear_same_z();
  static const int kSameZFieldNumber = 5;
  bool same_z() const;
  void set_same_z(bool value);

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.SampleRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr model_config_;
  ::google::protobuf::int32 num_samples_;
  ::google::protobuf::int32 length_;
  double temperature_;
  bool same_z_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SampleResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tensorflow.magenta.SampleResponse) */ {
 public:
  SampleResponse();
  virtual ~SampleResponse();

  SampleResponse(const SampleResponse& from);

  inline SampleResponse& operator=(const SampleResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleResponse& default_instance();

  static inline const SampleResponse* internal_default_instance() {
    return reinterpret_cast<const SampleResponse*>(
               &_SampleResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(SampleResponse* other);

  // implements Message ----------------------------------------------

  inline SampleResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SampleResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SampleResponse& from);
  void MergeFrom(const SampleResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SampleResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tensorflow.magenta.NoteSequence sequences = 1;
  int sequences_size() const;
  void clear_sequences();
  static const int kSequencesFieldNumber = 1;
  const ::tensorflow::magenta::NoteSequence& sequences(int index) const;
  ::tensorflow::magenta::NoteSequence* mutable_sequences(int index);
  ::tensorflow::magenta::NoteSequence* add_sequences();
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >*
      mutable_sequences();
  const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >&
      sequences() const;

  // @@protoc_insertion_point(class_scope:tensorflow.magenta.SampleResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence > sequences_;
  mutable int _cached_size_;
  friend struct protobuf_service_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Z

// repeated float value = 1;
inline int Z::value_size() const {
  return value_.size();
}
inline void Z::clear_value() {
  value_.Clear();
}
inline float Z::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.Z.value)
  return value_.Get(index);
}
inline void Z::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.Z.value)
}
inline void Z::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.magenta.Z.value)
}
inline const ::google::protobuf::RepeatedField< float >&
Z::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.Z.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< float >*
Z::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.Z.value)
  return &value_;
}

// -------------------------------------------------------------------

// EncodeRequest

// string model_config = 1;
inline void EncodeRequest::clear_model_config() {
  model_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EncodeRequest::model_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.EncodeRequest.model_config)
  return model_config_.GetNoArena();
}
inline void EncodeRequest::set_model_config(const ::std::string& value) {
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.EncodeRequest.model_config)
}
#if LANG_CXX11
inline void EncodeRequest::set_model_config(::std::string&& value) {
  
  model_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.EncodeRequest.model_config)
}
#endif
inline void EncodeRequest::set_model_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.EncodeRequest.model_config)
}
inline void EncodeRequest::set_model_config(const char* value, size_t size) {
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.EncodeRequest.model_config)
}
inline ::std::string* EncodeRequest::mutable_model_config() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.EncodeRequest.model_config)
  return model_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EncodeRequest::release_model_config() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.EncodeRequest.model_config)
  
  return model_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EncodeRequest::set_allocated_model_config(::std::string* model_config) {
  if (model_config != NULL) {
    
  } else {
    
  }
  model_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_config);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.EncodeRequest.model_config)
}

// repeated .tensorflow.magenta.NoteSequence sequences = 2;
inline int EncodeRequest::sequences_size() const {
  return sequences_.size();
}
inline void EncodeRequest::clear_sequences() {
  sequences_.Clear();
}
inline const ::tensorflow::magenta::NoteSequence& EncodeRequest::sequences(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.EncodeRequest.sequences)
  return sequences_.Get(index);
}
inline ::tensorflow::magenta::NoteSequence* EncodeRequest::mutable_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.EncodeRequest.sequences)
  return sequences_.Mutable(index);
}
inline ::tensorflow::magenta::NoteSequence* EncodeRequest::add_sequences() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.EncodeRequest.sequences)
  return sequences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >*
EncodeRequest::mutable_sequences() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.EncodeRequest.sequences)
  return &sequences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >&
EncodeRequest::sequences() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.EncodeRequest.sequences)
  return sequences_;
}

// -------------------------------------------------------------------

// EncodeResponse

// repeated .tensorflow.magenta.Z z = 1;
inline int EncodeResponse::z_size() const {
  return z_.size();
}
inline void EncodeResponse::clear_z() {
  z_.Clear();
}
inline const ::tensorflow::magenta::Z& EncodeResponse::z(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.EncodeResponse.z)
  return z_.Get(index);
}
inline ::tensorflow::magenta::Z* EncodeResponse::mutable_z(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.EncodeResponse.z)
  return z_.Mutable(index);
}
inline ::tensorflow::magenta::Z* EncodeResponse::add_z() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.EncodeResponse.z)
  return z_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z >*
EncodeResponse::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.EncodeResponse.z)
  return &z_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z >&
EncodeResponse::z() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.EncodeResponse.z)
  return z_;
}

// -------------------------------------------------------------------

// DecodeRequest

// string model_config = 1;
inline void DecodeRequest::clear_model_config() {
  model_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DecodeRequest::model_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.DecodeRequest.model_config)
  return model_config_.GetNoArena();
}
inline void DecodeRequest::set_model_config(const ::std::string& value) {
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.DecodeRequest.model_config)
}
#if LANG_CXX11
inline void DecodeRequest::set_model_config(::std::string&& value) {
  
  model_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.DecodeRequest.model_config)
}
#endif
inline void DecodeRequest::set_model_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.DecodeRequest.model_config)
}
inline void DecodeRequest::set_model_config(const char* value, size_t size) {
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.DecodeRequest.model_config)
}
inline ::std::string* DecodeRequest::mutable_model_config() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.DecodeRequest.model_config)
  return model_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DecodeRequest::release_model_config() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.DecodeRequest.model_config)
  
  return model_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DecodeRequest::set_allocated_model_config(::std::string* model_config) {
  if (model_config != NULL) {
    
  } else {
    
  }
  model_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_config);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.DecodeRequest.model_config)
}

// repeated .tensorflow.magenta.Z z = 2;
inline int DecodeRequest::z_size() const {
  return z_.size();
}
inline void DecodeRequest::clear_z() {
  z_.Clear();
}
inline const ::tensorflow::magenta::Z& DecodeRequest::z(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.DecodeRequest.z)
  return z_.Get(index);
}
inline ::tensorflow::magenta::Z* DecodeRequest::mutable_z(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.DecodeRequest.z)
  return z_.Mutable(index);
}
inline ::tensorflow::magenta::Z* DecodeRequest::add_z() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.DecodeRequest.z)
  return z_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z >*
DecodeRequest::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.DecodeRequest.z)
  return &z_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z >&
DecodeRequest::z() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.DecodeRequest.z)
  return z_;
}

// int32 length = 3;
inline void DecodeRequest::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 DecodeRequest::length() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.DecodeRequest.length)
  return length_;
}
inline void DecodeRequest::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.DecodeRequest.length)
}

// double temperature = 4;
inline void DecodeRequest::clear_temperature() {
  temperature_ = 0;
}
inline double DecodeRequest::temperature() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.DecodeRequest.temperature)
  return temperature_;
}
inline void DecodeRequest::set_temperature(double value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.DecodeRequest.temperature)
}

// -------------------------------------------------------------------

// DecodeResponse

// repeated .tensorflow.magenta.NoteSequence sequences = 1;
inline int DecodeResponse::sequences_size() const {
  return sequences_.size();
}
inline void DecodeResponse::clear_sequences() {
  sequences_.Clear();
}
inline const ::tensorflow::magenta::NoteSequence& DecodeResponse::sequences(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.DecodeResponse.sequences)
  return sequences_.Get(index);
}
inline ::tensorflow::magenta::NoteSequence* DecodeResponse::mutable_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.DecodeResponse.sequences)
  return sequences_.Mutable(index);
}
inline ::tensorflow::magenta::NoteSequence* DecodeResponse::add_sequences() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.DecodeResponse.sequences)
  return sequences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >*
DecodeResponse::mutable_sequences() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.DecodeResponse.sequences)
  return &sequences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >&
DecodeResponse::sequences() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.DecodeResponse.sequences)
  return sequences_;
}

// -------------------------------------------------------------------

// SampleRequest

// string model_config = 1;
inline void SampleRequest::clear_model_config() {
  model_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SampleRequest::model_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.SampleRequest.model_config)
  return model_config_.GetNoArena();
}
inline void SampleRequest::set_model_config(const ::std::string& value) {
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.SampleRequest.model_config)
}
#if LANG_CXX11
inline void SampleRequest::set_model_config(::std::string&& value) {
  
  model_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.SampleRequest.model_config)
}
#endif
inline void SampleRequest::set_model_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.SampleRequest.model_config)
}
inline void SampleRequest::set_model_config(const char* value, size_t size) {
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.SampleRequest.model_config)
}
inline ::std::string* SampleRequest::mutable_model_config() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.SampleRequest.model_config)
  return model_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SampleRequest::release_model_config() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.SampleRequest.model_config)
  
  return model_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SampleRequest::set_allocated_model_config(::std::string* model_config) {
  if (model_config != NULL) {
    
  } else {
    
  }
  model_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_config);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.SampleRequest.model_config)
}

// int32 num_samples = 2;
inline void SampleRequest::clear_num_samples() {
  num_samples_ = 0;
}
inline ::google::protobuf::int32 SampleRequest::num_samples() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.SampleRequest.num_samples)
  return num_samples_;
}
inline void SampleRequest::set_num_samples(::google::protobuf::int32 value) {
  
  num_samples_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.SampleRequest.num_samples)
}

// int32 length = 3;
inline void SampleRequest::clear_length() {
  length_ = 0;
}
inline ::google::protobuf::int32 SampleRequest::length() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.SampleRequest.length)
  return length_;
}
inline void SampleRequest::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.SampleRequest.length)
}

// double temperature = 4;
inline void SampleRequest::clear_temperature() {
  temperature_ = 0;
}
inline double SampleRequest::temperature() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.SampleRequest.temperature)
  return temperature_;
}
inline void SampleRequest::set_temperature(double value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.SampleRequest.temperature)
}

// bool same_z = 5;
inline void SampleRequest::clear_same_z() {
  same_z_ = false;
}
inline bool SampleRequest::same_z() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.SampleRequest.same_z)
  return same_z_;
}
inline void SampleRequest::set_same_z(bool value) {
  
  same_z_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.SampleRequest.same_z)
}

// -------------------------------------------------------------------

// SampleResponse

// repeated .tensorflow.magenta.NoteSequence sequences = 1;
inline int SampleResponse::sequences_size() const {
  return sequences_.size();
}
inline void SampleResponse::clear_sequences() {
  sequences_.Clear();
}
inline const ::tensorflow::magenta::NoteSequence& SampleResponse::sequences(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.SampleResponse.sequences)
  return sequences_.Get(index);
}
inline ::tensorflow::magenta::NoteSequence* SampleResponse::mutable_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.SampleResponse.sequences)
  return sequences_.Mutable(index);
}
inline ::tensorflow::magenta::NoteSequence* SampleResponse::add_sequences() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.SampleResponse.sequences)
  return sequences_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >*
SampleResponse::mutable_sequences() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.SampleResponse.sequences)
  return &sequences_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >&
SampleResponse::sequences() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.SampleResponse.sequences)
  return sequences_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace magenta
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_service_2eproto__INCLUDED
