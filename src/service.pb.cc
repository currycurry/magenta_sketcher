// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tensorflow {
namespace magenta {
class ZDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Z> {
} _Z_default_instance_;
class EncodeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EncodeRequest> {
} _EncodeRequest_default_instance_;
class EncodeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EncodeResponse> {
} _EncodeResponse_default_instance_;
class DecodeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DecodeRequest> {
} _DecodeRequest_default_instance_;
class DecodeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DecodeResponse> {
} _DecodeResponse_default_instance_;
class SampleRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SampleRequest> {
} _SampleRequest_default_instance_;
class SampleResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SampleResponse> {
} _SampleResponse_default_instance_;

namespace protobuf_service_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Z, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Z, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeRequest, model_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeRequest, sequences_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncodeResponse, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecodeRequest, model_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecodeRequest, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecodeRequest, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecodeRequest, temperature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecodeResponse, sequences_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRequest, model_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRequest, num_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRequest, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRequest, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRequest, same_z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleResponse, sequences_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Z)},
  { 6, -1, sizeof(EncodeRequest)},
  { 13, -1, sizeof(EncodeResponse)},
  { 19, -1, sizeof(DecodeRequest)},
  { 28, -1, sizeof(DecodeResponse)},
  { 34, -1, sizeof(SampleRequest)},
  { 44, -1, sizeof(SampleResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Z_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EncodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EncodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DecodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SampleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SampleResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _Z_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EncodeRequest_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _EncodeResponse_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _DecodeRequest_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _DecodeResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SampleRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SampleResponse_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::tensorflow::magenta::protobuf_music_2eproto::InitDefaults();
  _Z_default_instance_.DefaultConstruct();
  _EncodeRequest_default_instance_.DefaultConstruct();
  _EncodeResponse_default_instance_.DefaultConstruct();
  _DecodeRequest_default_instance_.DefaultConstruct();
  _DecodeResponse_default_instance_.DefaultConstruct();
  _SampleRequest_default_instance_.DefaultConstruct();
  _SampleResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rservice.proto\022\022tensorflow.magenta\032\013mus"
      "ic.proto\"\022\n\001Z\022\r\n\005value\030\001 \003(\002\"Z\n\rEncodeRe"
      "quest\022\024\n\014model_config\030\001 \001(\t\0223\n\tsequences"
      "\030\002 \003(\0132 .tensorflow.magenta.NoteSequence"
      "\"2\n\016EncodeResponse\022 \n\001z\030\001 \003(\0132\025.tensorfl"
      "ow.magenta.Z\"l\n\rDecodeRequest\022\024\n\014model_c"
      "onfig\030\001 \001(\t\022 \n\001z\030\002 \003(\0132\025.tensorflow.mage"
      "nta.Z\022\016\n\006length\030\003 \001(\005\022\023\n\013temperature\030\004 \001"
      "(\001\"E\n\016DecodeResponse\0223\n\tsequences\030\001 \003(\0132"
      " .tensorflow.magenta.NoteSequence\"o\n\rSam"
      "pleRequest\022\024\n\014model_config\030\001 \001(\t\022\023\n\013num_"
      "samples\030\002 \001(\005\022\016\n\006length\030\003 \001(\005\022\023\n\013tempera"
      "ture\030\004 \001(\001\022\016\n\006same_z\030\005 \001(\010\"E\n\016SampleResp"
      "onse\0223\n\tsequences\030\001 \003(\0132 .tensorflow.mag"
      "enta.NoteSequence2\200\002\n\005Loopz\022Q\n\006Encode\022!."
      "tensorflow.magenta.EncodeRequest\032\".tenso"
      "rflow.magenta.EncodeResponse\"\000\022Q\n\006Decode"
      "\022!.tensorflow.magenta.DecodeRequest\032\".te"
      "nsorflow.magenta.DecodeResponse\"\000\022Q\n\006Sam"
      "ple\022!.tensorflow.magenta.SampleRequest\032\""
      ".tensorflow.magenta.SampleResponse\"\000b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 844);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service.proto", &protobuf_RegisterTypes);
  ::tensorflow::magenta::protobuf_music_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_service_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Z::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Z::Z()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.Z)
}
Z::Z(const Z& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.Z)
}

void Z::SharedCtor() {
  _cached_size_ = 0;
}

Z::~Z() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.Z)
  SharedDtor();
}

void Z::SharedDtor() {
}

void Z::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Z::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Z& Z::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

Z* Z::New(::google::protobuf::Arena* arena) const {
  Z* n = new Z;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Z::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.Z)
  value_.Clear();
}

bool Z::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.Z)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_value())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.Z)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.Z)
  return false;
#undef DO_
}

void Z::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.Z)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1;
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->value().data(), this->value_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.Z)
}

::google::protobuf::uint8* Z::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.Z)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float value = 1;
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->value_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.Z)
  return target;
}

size_t Z::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.Z)
  size_t total_size = 0;

  // repeated float value = 1;
  {
    unsigned int count = this->value_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Z::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.Z)
  GOOGLE_DCHECK_NE(&from, this);
  const Z* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Z>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.Z)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.Z)
    MergeFrom(*source);
  }
}

void Z::MergeFrom(const Z& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.Z)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void Z::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.Z)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Z::CopyFrom(const Z& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.Z)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Z::IsInitialized() const {
  return true;
}

void Z::Swap(Z* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Z::InternalSwap(Z* other) {
  value_.InternalSwap(&other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Z::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Z

// repeated float value = 1;
int Z::value_size() const {
  return value_.size();
}
void Z::clear_value() {
  value_.Clear();
}
float Z::value(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.Z.value)
  return value_.Get(index);
}
void Z::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.Z.value)
}
void Z::add_value(float value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:tensorflow.magenta.Z.value)
}
const ::google::protobuf::RepeatedField< float >&
Z::value() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.Z.value)
  return value_;
}
::google::protobuf::RepeatedField< float >*
Z::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.Z.value)
  return &value_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncodeRequest::kModelConfigFieldNumber;
const int EncodeRequest::kSequencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncodeRequest::EncodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.EncodeRequest)
}
EncodeRequest::EncodeRequest(const EncodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sequences_(from.sequences_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_config().size() > 0) {
    model_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_config_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.EncodeRequest)
}

void EncodeRequest::SharedCtor() {
  model_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

EncodeRequest::~EncodeRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.EncodeRequest)
  SharedDtor();
}

void EncodeRequest::SharedDtor() {
  model_config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EncodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncodeRequest::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EncodeRequest& EncodeRequest::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

EncodeRequest* EncodeRequest::New(::google::protobuf::Arena* arena) const {
  EncodeRequest* n = new EncodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EncodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.EncodeRequest)
  sequences_.Clear();
  model_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EncodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.EncodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_config()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_config().data(), this->model_config().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.magenta.EncodeRequest.model_config"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.magenta.NoteSequence sequences = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sequences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.EncodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.EncodeRequest)
  return false;
#undef DO_
}

void EncodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.EncodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_config = 1;
  if (this->model_config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_config().data(), this->model_config().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.EncodeRequest.model_config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_config(), output);
  }

  // repeated .tensorflow.magenta.NoteSequence sequences = 2;
  for (unsigned int i = 0, n = this->sequences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sequences(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.EncodeRequest)
}

::google::protobuf::uint8* EncodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.EncodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_config = 1;
  if (this->model_config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_config().data(), this->model_config().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.EncodeRequest.model_config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_config(), target);
  }

  // repeated .tensorflow.magenta.NoteSequence sequences = 2;
  for (unsigned int i = 0, n = this->sequences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->sequences(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.EncodeRequest)
  return target;
}

size_t EncodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.EncodeRequest)
  size_t total_size = 0;

  // repeated .tensorflow.magenta.NoteSequence sequences = 2;
  {
    unsigned int count = this->sequences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sequences(i));
    }
  }

  // string model_config = 1;
  if (this->model_config().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_config());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.EncodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EncodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EncodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.EncodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.EncodeRequest)
    MergeFrom(*source);
  }
}

void EncodeRequest::MergeFrom(const EncodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.EncodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sequences_.MergeFrom(from.sequences_);
  if (from.model_config().size() > 0) {

    model_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_config_);
  }
}

void EncodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.EncodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncodeRequest::CopyFrom(const EncodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.EncodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodeRequest::IsInitialized() const {
  return true;
}

void EncodeRequest::Swap(EncodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncodeRequest::InternalSwap(EncodeRequest* other) {
  sequences_.InternalSwap(&other->sequences_);
  model_config_.Swap(&other->model_config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EncodeRequest::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EncodeRequest

// string model_config = 1;
void EncodeRequest::clear_model_config() {
  model_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EncodeRequest::model_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.EncodeRequest.model_config)
  return model_config_.GetNoArena();
}
void EncodeRequest::set_model_config(const ::std::string& value) {
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.EncodeRequest.model_config)
}
#if LANG_CXX11
void EncodeRequest::set_model_config(::std::string&& value) {
  
  model_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.EncodeRequest.model_config)
}
#endif
void EncodeRequest::set_model_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.EncodeRequest.model_config)
}
void EncodeRequest::set_model_config(const char* value, size_t size) {
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.EncodeRequest.model_config)
}
::std::string* EncodeRequest::mutable_model_config() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.EncodeRequest.model_config)
  return model_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EncodeRequest::release_model_config() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.EncodeRequest.model_config)
  
  return model_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EncodeRequest::set_allocated_model_config(::std::string* model_config) {
  if (model_config != NULL) {
    
  } else {
    
  }
  model_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_config);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.EncodeRequest.model_config)
}

// repeated .tensorflow.magenta.NoteSequence sequences = 2;
int EncodeRequest::sequences_size() const {
  return sequences_.size();
}
void EncodeRequest::clear_sequences() {
  sequences_.Clear();
}
const ::tensorflow::magenta::NoteSequence& EncodeRequest::sequences(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.EncodeRequest.sequences)
  return sequences_.Get(index);
}
::tensorflow::magenta::NoteSequence* EncodeRequest::mutable_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.EncodeRequest.sequences)
  return sequences_.Mutable(index);
}
::tensorflow::magenta::NoteSequence* EncodeRequest::add_sequences() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.EncodeRequest.sequences)
  return sequences_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >*
EncodeRequest::mutable_sequences() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.EncodeRequest.sequences)
  return &sequences_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >&
EncodeRequest::sequences() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.EncodeRequest.sequences)
  return sequences_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EncodeResponse::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EncodeResponse::EncodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.EncodeResponse)
}
EncodeResponse::EncodeResponse(const EncodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      z_(from.z_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.EncodeResponse)
}

void EncodeResponse::SharedCtor() {
  _cached_size_ = 0;
}

EncodeResponse::~EncodeResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.EncodeResponse)
  SharedDtor();
}

void EncodeResponse::SharedDtor() {
}

void EncodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncodeResponse::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EncodeResponse& EncodeResponse::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

EncodeResponse* EncodeResponse::New(::google::protobuf::Arena* arena) const {
  EncodeResponse* n = new EncodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EncodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.EncodeResponse)
  z_.Clear();
}

bool EncodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.EncodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.magenta.Z z = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.EncodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.EncodeResponse)
  return false;
#undef DO_
}

void EncodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.EncodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.magenta.Z z = 1;
  for (unsigned int i = 0, n = this->z_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->z(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.EncodeResponse)
}

::google::protobuf::uint8* EncodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.EncodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.magenta.Z z = 1;
  for (unsigned int i = 0, n = this->z_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->z(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.EncodeResponse)
  return target;
}

size_t EncodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.EncodeResponse)
  size_t total_size = 0;

  // repeated .tensorflow.magenta.Z z = 1;
  {
    unsigned int count = this->z_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->z(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.EncodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EncodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EncodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.EncodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.EncodeResponse)
    MergeFrom(*source);
  }
}

void EncodeResponse::MergeFrom(const EncodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.EncodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  z_.MergeFrom(from.z_);
}

void EncodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.EncodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncodeResponse::CopyFrom(const EncodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.EncodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncodeResponse::IsInitialized() const {
  return true;
}

void EncodeResponse::Swap(EncodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EncodeResponse::InternalSwap(EncodeResponse* other) {
  z_.InternalSwap(&other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EncodeResponse::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EncodeResponse

// repeated .tensorflow.magenta.Z z = 1;
int EncodeResponse::z_size() const {
  return z_.size();
}
void EncodeResponse::clear_z() {
  z_.Clear();
}
const ::tensorflow::magenta::Z& EncodeResponse::z(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.EncodeResponse.z)
  return z_.Get(index);
}
::tensorflow::magenta::Z* EncodeResponse::mutable_z(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.EncodeResponse.z)
  return z_.Mutable(index);
}
::tensorflow::magenta::Z* EncodeResponse::add_z() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.EncodeResponse.z)
  return z_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z >*
EncodeResponse::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.EncodeResponse.z)
  return &z_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z >&
EncodeResponse::z() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.EncodeResponse.z)
  return z_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecodeRequest::kModelConfigFieldNumber;
const int DecodeRequest::kZFieldNumber;
const int DecodeRequest::kLengthFieldNumber;
const int DecodeRequest::kTemperatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecodeRequest::DecodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.DecodeRequest)
}
DecodeRequest::DecodeRequest(const DecodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      z_(from.z_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_config().size() > 0) {
    model_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_config_);
  }
  ::memcpy(&temperature_, &from.temperature_,
    reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&temperature_) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.DecodeRequest)
}

void DecodeRequest::SharedCtor() {
  model_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&temperature_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&temperature_) + sizeof(length_));
  _cached_size_ = 0;
}

DecodeRequest::~DecodeRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.DecodeRequest)
  SharedDtor();
}

void DecodeRequest::SharedDtor() {
  model_config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DecodeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecodeRequest::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecodeRequest& DecodeRequest::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecodeRequest* DecodeRequest::New(::google::protobuf::Arena* arena) const {
  DecodeRequest* n = new DecodeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.DecodeRequest)
  z_.Clear();
  model_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&temperature_, 0, reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&temperature_) + sizeof(length_));
}

bool DecodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.DecodeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_config()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_config().data(), this->model_config().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.magenta.DecodeRequest.model_config"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tensorflow.magenta.Z z = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temperature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.DecodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.DecodeRequest)
  return false;
#undef DO_
}

void DecodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.DecodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_config = 1;
  if (this->model_config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_config().data(), this->model_config().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.DecodeRequest.model_config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_config(), output);
  }

  // repeated .tensorflow.magenta.Z z = 2;
  for (unsigned int i = 0, n = this->z_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->z(i), output);
  }

  // int32 length = 3;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->length(), output);
  }

  // double temperature = 4;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->temperature(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.DecodeRequest)
}

::google::protobuf::uint8* DecodeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.DecodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_config = 1;
  if (this->model_config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_config().data(), this->model_config().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.DecodeRequest.model_config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_config(), target);
  }

  // repeated .tensorflow.magenta.Z z = 2;
  for (unsigned int i = 0, n = this->z_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->z(i), deterministic, target);
  }

  // int32 length = 3;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->length(), target);
  }

  // double temperature = 4;
  if (this->temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->temperature(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.DecodeRequest)
  return target;
}

size_t DecodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.DecodeRequest)
  size_t total_size = 0;

  // repeated .tensorflow.magenta.Z z = 2;
  {
    unsigned int count = this->z_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->z(i));
    }
  }

  // string model_config = 1;
  if (this->model_config().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_config());
  }

  // double temperature = 4;
  if (this->temperature() != 0) {
    total_size += 1 + 8;
  }

  // int32 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.DecodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DecodeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecodeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.DecodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.DecodeRequest)
    MergeFrom(*source);
  }
}

void DecodeRequest::MergeFrom(const DecodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.DecodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  z_.MergeFrom(from.z_);
  if (from.model_config().size() > 0) {

    model_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_config_);
  }
  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void DecodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.DecodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecodeRequest::CopyFrom(const DecodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.DecodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecodeRequest::IsInitialized() const {
  return true;
}

void DecodeRequest::Swap(DecodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecodeRequest::InternalSwap(DecodeRequest* other) {
  z_.InternalSwap(&other->z_);
  model_config_.Swap(&other->model_config_);
  std::swap(temperature_, other->temperature_);
  std::swap(length_, other->length_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecodeRequest::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecodeRequest

// string model_config = 1;
void DecodeRequest::clear_model_config() {
  model_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DecodeRequest::model_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.DecodeRequest.model_config)
  return model_config_.GetNoArena();
}
void DecodeRequest::set_model_config(const ::std::string& value) {
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.DecodeRequest.model_config)
}
#if LANG_CXX11
void DecodeRequest::set_model_config(::std::string&& value) {
  
  model_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.DecodeRequest.model_config)
}
#endif
void DecodeRequest::set_model_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.DecodeRequest.model_config)
}
void DecodeRequest::set_model_config(const char* value, size_t size) {
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.DecodeRequest.model_config)
}
::std::string* DecodeRequest::mutable_model_config() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.DecodeRequest.model_config)
  return model_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DecodeRequest::release_model_config() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.DecodeRequest.model_config)
  
  return model_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DecodeRequest::set_allocated_model_config(::std::string* model_config) {
  if (model_config != NULL) {
    
  } else {
    
  }
  model_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_config);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.DecodeRequest.model_config)
}

// repeated .tensorflow.magenta.Z z = 2;
int DecodeRequest::z_size() const {
  return z_.size();
}
void DecodeRequest::clear_z() {
  z_.Clear();
}
const ::tensorflow::magenta::Z& DecodeRequest::z(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.DecodeRequest.z)
  return z_.Get(index);
}
::tensorflow::magenta::Z* DecodeRequest::mutable_z(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.DecodeRequest.z)
  return z_.Mutable(index);
}
::tensorflow::magenta::Z* DecodeRequest::add_z() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.DecodeRequest.z)
  return z_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z >*
DecodeRequest::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.DecodeRequest.z)
  return &z_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::Z >&
DecodeRequest::z() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.DecodeRequest.z)
  return z_;
}

// int32 length = 3;
void DecodeRequest::clear_length() {
  length_ = 0;
}
::google::protobuf::int32 DecodeRequest::length() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.DecodeRequest.length)
  return length_;
}
void DecodeRequest::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.DecodeRequest.length)
}

// double temperature = 4;
void DecodeRequest::clear_temperature() {
  temperature_ = 0;
}
double DecodeRequest::temperature() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.DecodeRequest.temperature)
  return temperature_;
}
void DecodeRequest::set_temperature(double value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.DecodeRequest.temperature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecodeResponse::kSequencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecodeResponse::DecodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.DecodeResponse)
}
DecodeResponse::DecodeResponse(const DecodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sequences_(from.sequences_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.DecodeResponse)
}

void DecodeResponse::SharedCtor() {
  _cached_size_ = 0;
}

DecodeResponse::~DecodeResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.DecodeResponse)
  SharedDtor();
}

void DecodeResponse::SharedDtor() {
}

void DecodeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecodeResponse::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DecodeResponse& DecodeResponse::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

DecodeResponse* DecodeResponse::New(::google::protobuf::Arena* arena) const {
  DecodeResponse* n = new DecodeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.DecodeResponse)
  sequences_.Clear();
}

bool DecodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.DecodeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.magenta.NoteSequence sequences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sequences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.DecodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.DecodeResponse)
  return false;
#undef DO_
}

void DecodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.DecodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.magenta.NoteSequence sequences = 1;
  for (unsigned int i = 0, n = this->sequences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sequences(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.DecodeResponse)
}

::google::protobuf::uint8* DecodeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.DecodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.magenta.NoteSequence sequences = 1;
  for (unsigned int i = 0, n = this->sequences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sequences(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.DecodeResponse)
  return target;
}

size_t DecodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.DecodeResponse)
  size_t total_size = 0;

  // repeated .tensorflow.magenta.NoteSequence sequences = 1;
  {
    unsigned int count = this->sequences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sequences(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.DecodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DecodeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DecodeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.DecodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.DecodeResponse)
    MergeFrom(*source);
  }
}

void DecodeResponse::MergeFrom(const DecodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.DecodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sequences_.MergeFrom(from.sequences_);
}

void DecodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.DecodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecodeResponse::CopyFrom(const DecodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.DecodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecodeResponse::IsInitialized() const {
  return true;
}

void DecodeResponse::Swap(DecodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecodeResponse::InternalSwap(DecodeResponse* other) {
  sequences_.InternalSwap(&other->sequences_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecodeResponse::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecodeResponse

// repeated .tensorflow.magenta.NoteSequence sequences = 1;
int DecodeResponse::sequences_size() const {
  return sequences_.size();
}
void DecodeResponse::clear_sequences() {
  sequences_.Clear();
}
const ::tensorflow::magenta::NoteSequence& DecodeResponse::sequences(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.DecodeResponse.sequences)
  return sequences_.Get(index);
}
::tensorflow::magenta::NoteSequence* DecodeResponse::mutable_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.DecodeResponse.sequences)
  return sequences_.Mutable(index);
}
::tensorflow::magenta::NoteSequence* DecodeResponse::add_sequences() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.DecodeResponse.sequences)
  return sequences_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >*
DecodeResponse::mutable_sequences() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.DecodeResponse.sequences)
  return &sequences_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >&
DecodeResponse::sequences() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.DecodeResponse.sequences)
  return sequences_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleRequest::kModelConfigFieldNumber;
const int SampleRequest::kNumSamplesFieldNumber;
const int SampleRequest::kLengthFieldNumber;
const int SampleRequest::kTemperatureFieldNumber;
const int SampleRequest::kSameZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleRequest::SampleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.SampleRequest)
}
SampleRequest::SampleRequest(const SampleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model_config().size() > 0) {
    model_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_config_);
  }
  ::memcpy(&num_samples_, &from.num_samples_,
    reinterpret_cast<char*>(&same_z_) -
    reinterpret_cast<char*>(&num_samples_) + sizeof(same_z_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.SampleRequest)
}

void SampleRequest::SharedCtor() {
  model_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_samples_, 0, reinterpret_cast<char*>(&same_z_) -
    reinterpret_cast<char*>(&num_samples_) + sizeof(same_z_));
  _cached_size_ = 0;
}

SampleRequest::~SampleRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.SampleRequest)
  SharedDtor();
}

void SampleRequest::SharedDtor() {
  model_config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SampleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleRequest::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SampleRequest& SampleRequest::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

SampleRequest* SampleRequest::New(::google::protobuf::Arena* arena) const {
  SampleRequest* n = new SampleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.SampleRequest)
  model_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_samples_, 0, reinterpret_cast<char*>(&same_z_) -
    reinterpret_cast<char*>(&num_samples_) + sizeof(same_z_));
}

bool SampleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.SampleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string model_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_config()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model_config().data(), this->model_config().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tensorflow.magenta.SampleRequest.model_config"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_samples = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 length = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temperature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool same_z = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &same_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.SampleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.SampleRequest)
  return false;
#undef DO_
}

void SampleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.SampleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_config = 1;
  if (this->model_config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_config().data(), this->model_config().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.SampleRequest.model_config");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->model_config(), output);
  }

  // int32 num_samples = 2;
  if (this->num_samples() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_samples(), output);
  }

  // int32 length = 3;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->length(), output);
  }

  // double temperature = 4;
  if (this->temperature() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->temperature(), output);
  }

  // bool same_z = 5;
  if (this->same_z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->same_z(), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.SampleRequest)
}

::google::protobuf::uint8* SampleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.SampleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string model_config = 1;
  if (this->model_config().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model_config().data(), this->model_config().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tensorflow.magenta.SampleRequest.model_config");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->model_config(), target);
  }

  // int32 num_samples = 2;
  if (this->num_samples() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_samples(), target);
  }

  // int32 length = 3;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->length(), target);
  }

  // double temperature = 4;
  if (this->temperature() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->temperature(), target);
  }

  // bool same_z = 5;
  if (this->same_z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->same_z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.SampleRequest)
  return target;
}

size_t SampleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.SampleRequest)
  size_t total_size = 0;

  // string model_config = 1;
  if (this->model_config().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_config());
  }

  // int32 num_samples = 2;
  if (this->num_samples() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_samples());
  }

  // int32 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->length());
  }

  // double temperature = 4;
  if (this->temperature() != 0) {
    total_size += 1 + 8;
  }

  // bool same_z = 5;
  if (this->same_z() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.SampleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.SampleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.SampleRequest)
    MergeFrom(*source);
  }
}

void SampleRequest::MergeFrom(const SampleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.SampleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_config().size() > 0) {

    model_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_config_);
  }
  if (from.num_samples() != 0) {
    set_num_samples(from.num_samples());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.temperature() != 0) {
    set_temperature(from.temperature());
  }
  if (from.same_z() != 0) {
    set_same_z(from.same_z());
  }
}

void SampleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.SampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleRequest::CopyFrom(const SampleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.SampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleRequest::IsInitialized() const {
  return true;
}

void SampleRequest::Swap(SampleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleRequest::InternalSwap(SampleRequest* other) {
  model_config_.Swap(&other->model_config_);
  std::swap(num_samples_, other->num_samples_);
  std::swap(length_, other->length_);
  std::swap(temperature_, other->temperature_);
  std::swap(same_z_, other->same_z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleRequest::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleRequest

// string model_config = 1;
void SampleRequest::clear_model_config() {
  model_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SampleRequest::model_config() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.SampleRequest.model_config)
  return model_config_.GetNoArena();
}
void SampleRequest::set_model_config(const ::std::string& value) {
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tensorflow.magenta.SampleRequest.model_config)
}
#if LANG_CXX11
void SampleRequest::set_model_config(::std::string&& value) {
  
  model_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tensorflow.magenta.SampleRequest.model_config)
}
#endif
void SampleRequest::set_model_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tensorflow.magenta.SampleRequest.model_config)
}
void SampleRequest::set_model_config(const char* value, size_t size) {
  
  model_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tensorflow.magenta.SampleRequest.model_config)
}
::std::string* SampleRequest::mutable_model_config() {
  
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.SampleRequest.model_config)
  return model_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SampleRequest::release_model_config() {
  // @@protoc_insertion_point(field_release:tensorflow.magenta.SampleRequest.model_config)
  
  return model_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SampleRequest::set_allocated_model_config(::std::string* model_config) {
  if (model_config != NULL) {
    
  } else {
    
  }
  model_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_config);
  // @@protoc_insertion_point(field_set_allocated:tensorflow.magenta.SampleRequest.model_config)
}

// int32 num_samples = 2;
void SampleRequest::clear_num_samples() {
  num_samples_ = 0;
}
::google::protobuf::int32 SampleRequest::num_samples() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.SampleRequest.num_samples)
  return num_samples_;
}
void SampleRequest::set_num_samples(::google::protobuf::int32 value) {
  
  num_samples_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.SampleRequest.num_samples)
}

// int32 length = 3;
void SampleRequest::clear_length() {
  length_ = 0;
}
::google::protobuf::int32 SampleRequest::length() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.SampleRequest.length)
  return length_;
}
void SampleRequest::set_length(::google::protobuf::int32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.SampleRequest.length)
}

// double temperature = 4;
void SampleRequest::clear_temperature() {
  temperature_ = 0;
}
double SampleRequest::temperature() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.SampleRequest.temperature)
  return temperature_;
}
void SampleRequest::set_temperature(double value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.SampleRequest.temperature)
}

// bool same_z = 5;
void SampleRequest::clear_same_z() {
  same_z_ = false;
}
bool SampleRequest::same_z() const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.SampleRequest.same_z)
  return same_z_;
}
void SampleRequest::set_same_z(bool value) {
  
  same_z_ = value;
  // @@protoc_insertion_point(field_set:tensorflow.magenta.SampleRequest.same_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SampleResponse::kSequencesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SampleResponse::SampleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_service_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tensorflow.magenta.SampleResponse)
}
SampleResponse::SampleResponse(const SampleResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      sequences_(from.sequences_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.magenta.SampleResponse)
}

void SampleResponse::SharedCtor() {
  _cached_size_ = 0;
}

SampleResponse::~SampleResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.magenta.SampleResponse)
  SharedDtor();
}

void SampleResponse::SharedDtor() {
}

void SampleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleResponse::descriptor() {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SampleResponse& SampleResponse::default_instance() {
  protobuf_service_2eproto::InitDefaults();
  return *internal_default_instance();
}

SampleResponse* SampleResponse::New(::google::protobuf::Arena* arena) const {
  SampleResponse* n = new SampleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SampleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.magenta.SampleResponse)
  sequences_.Clear();
}

bool SampleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tensorflow.magenta.SampleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tensorflow.magenta.NoteSequence sequences = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sequences()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tensorflow.magenta.SampleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tensorflow.magenta.SampleResponse)
  return false;
#undef DO_
}

void SampleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tensorflow.magenta.SampleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.magenta.NoteSequence sequences = 1;
  for (unsigned int i = 0, n = this->sequences_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sequences(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tensorflow.magenta.SampleResponse)
}

::google::protobuf::uint8* SampleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.magenta.SampleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.magenta.NoteSequence sequences = 1;
  for (unsigned int i = 0, n = this->sequences_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->sequences(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.magenta.SampleResponse)
  return target;
}

size_t SampleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.magenta.SampleResponse)
  size_t total_size = 0;

  // repeated .tensorflow.magenta.NoteSequence sequences = 1;
  {
    unsigned int count = this->sequences_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sequences(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tensorflow.magenta.SampleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SampleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tensorflow.magenta.SampleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tensorflow.magenta.SampleResponse)
    MergeFrom(*source);
  }
}

void SampleResponse::MergeFrom(const SampleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.magenta.SampleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sequences_.MergeFrom(from.sequences_);
}

void SampleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tensorflow.magenta.SampleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleResponse::CopyFrom(const SampleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.magenta.SampleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleResponse::IsInitialized() const {
  return true;
}

void SampleResponse::Swap(SampleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SampleResponse::InternalSwap(SampleResponse* other) {
  sequences_.InternalSwap(&other->sequences_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SampleResponse::GetMetadata() const {
  protobuf_service_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_service_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SampleResponse

// repeated .tensorflow.magenta.NoteSequence sequences = 1;
int SampleResponse::sequences_size() const {
  return sequences_.size();
}
void SampleResponse::clear_sequences() {
  sequences_.Clear();
}
const ::tensorflow::magenta::NoteSequence& SampleResponse::sequences(int index) const {
  // @@protoc_insertion_point(field_get:tensorflow.magenta.SampleResponse.sequences)
  return sequences_.Get(index);
}
::tensorflow::magenta::NoteSequence* SampleResponse::mutable_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:tensorflow.magenta.SampleResponse.sequences)
  return sequences_.Mutable(index);
}
::tensorflow::magenta::NoteSequence* SampleResponse::add_sequences() {
  // @@protoc_insertion_point(field_add:tensorflow.magenta.SampleResponse.sequences)
  return sequences_.Add();
}
::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >*
SampleResponse::mutable_sequences() {
  // @@protoc_insertion_point(field_mutable_list:tensorflow.magenta.SampleResponse.sequences)
  return &sequences_;
}
const ::google::protobuf::RepeatedPtrField< ::tensorflow::magenta::NoteSequence >&
SampleResponse::sequences() const {
  // @@protoc_insertion_point(field_list:tensorflow.magenta.SampleResponse.sequences)
  return sequences_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace magenta
}  // namespace tensorflow

// @@protoc_insertion_point(global_scope)
